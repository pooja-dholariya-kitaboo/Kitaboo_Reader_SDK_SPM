// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Kitaboo_Reader_SDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import Accelerate
import CommonCrypto
import CoreData
import CoreMedia
import CoreText
import DeveloperToolsSupport
import Foundation
import ImageIO
@_exported import Kitaboo_Reader_SDK
import MediaPlayer
import NaturalLanguage
import ObjectiveC
import PDFKit
import QuartzCore
import SQLite3
import SafariServices
import Speech
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import libxml2
import ObjectiveC.message
import ObjectiveC.runtime
import zlib
@_inheritsConvenienceInitializers @objc public class ScormImsManifestParser : ObjectiveC.NSObject, Foundation.XMLParserDelegate {
  @objc public var isInManifest: Swift.Bool
  @objc public var isInResources: Swift.Bool
  @objc public var coreHtmlPath: Swift.String
  @objc public func parse(_ filePath: Swift.String) throws
  @objc public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol GenerateReportMailViewControllerDelegate {
  @objc func didTapOnDoneForGenerateReportMail(_ alternateEmail: Swift.String)
  @objc func didTapOnCancelForGenerateReportMail()
}
@objc @_Concurrency.MainActor @preconcurrency open class GenerateReportMailViewController : UIKit.UIViewController, UIKit.UITextFieldDelegate {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.GenerateReportMailViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public init(_ emailID: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
@objc public protocol PenToolControllerDelegate {
  @objc func didCreatePenDrawing(_ drawingObject: Kitaboo_Reader_SDK.SDKPentoolVO)
  @objc func didUpdatePenDrawing(_ drawingObject: Kitaboo_Reader_SDK.SDKPentoolVO)
  @objc func didChangeUndoableStatus()
  @objc func didUpdatedSelectedPenDrawing()
}
@_inheritsConvenienceInitializers @objc open class PenToolController : ObjectiveC.NSObject, Kitaboo_Reader_SDK.PenDrawingChangeDelegate, Kitaboo_Reader_SDK.PenDrawingSelectionChangeDelegate {
  @objc public func enableUndoRedoButton(_ enable: Swift.Bool)
  public var penThickness: Swift.Float
  public var penColor: Swift.String
  public var penMode: Kitaboo_Reader_SDK.PenMode
  public var isUndoable: Swift.Bool
  public var selectedDrawingObjectsCount: Swift.Int
  public var mode: Kitaboo_Reader_SDK.DRAWING_MODE
  weak public var delegate: (any Kitaboo_Reader_SDK.PenToolControllerDelegate)?
  public var hasClassAssociation: Swift.Bool
  @objc override dynamic public init()
  public func setPenDrawingCanvas(_ canvasArray: [Kitaboo_Reader_SDK.PenDrawingView])
  @objc public func didCreatePenDrawing(_ drawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc public func didUpdatePenDrawing(_ drawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc public func didChangeReviewMode(_ penMode: Kitaboo_Reader_SDK.PenMode)
  public func setPenStrokeThickness(_ thickness: Swift.Float)
  public func getPenStrokeThickness() -> Swift.Float
  public func setPenColor(_ color: Swift.String)
  public func getPenColor() -> Swift.String
  public func getPenMode() -> Kitaboo_Reader_SDK.PenMode
  public func setPenMode(_ penMode: Kitaboo_Reader_SDK.PenMode)
  public func setDrawingMode(_ drawingMode: Kitaboo_Reader_SDK.DRAWING_MODE)
  public func setDrawingView1(_ drawingView1: Kitaboo_Reader_SDK.PenDrawingView)
  public func setDrawingView2(_ drawingView2: Kitaboo_Reader_SDK.PenDrawingView)
  public func isAnyDrawingSelected() -> Swift.Bool
  public func setDeleteOnSelectionEnabled(_ enabled: Swift.Bool)
  @objc public func didChangePenDrawingSelection(_ drawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc public func deleteSelectedDrawing()
  public func deleteActivePagePenDrawings()
  public func shouldAutorotate() -> Swift.Bool
  public func deSelectedSelectedDrawings()
  public func setDefaultColorForStroke()
  public func exitPenToolEditingMode()
  public func undoDrawing()
  @objc public func addUndoObjects(_ pendrawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc public func addRedoObjects(_ pendrawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc public func deleteUndoObjects(_ pendrawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  public func updateUndoStatus()
  public func isRedoable() -> Swift.Bool
  @objc deinit
  public func calculateAndGetTransformedPoints(from rawPointsArray: [Foundation.NSValue], forScalingFactor scalingFactor: CoreFoundation.CGAffineTransform) -> [Foundation.NSValue]
  public func calculateAndGetRawPointsFromTransformedPointsArray(_ transformedPointsArray: [Foundation.NSValue], forScalingFactor scalingFactor: CoreFoundation.CGAffineTransform) -> [Swift.String]
  public func calculateAndGetRawPointsFromTransformedPointsArray(_ transformedPointsArray: [Foundation.NSValue]) -> [Swift.String]
  public func calculateAndGetTransformedPointsFromRawPointsArray(_ rawPointsArray: [Swift.String]) -> [Foundation.NSValue]!
  public func getSDKPenToolVOFromPenDrawingObject(_ drawingObject: Kitaboo_Reader_SDK.PenDrawingObject!) -> Kitaboo_Reader_SDK.SDKPentoolVO!
  public func setSelectedDrawingObjectsCount(_ selectedDrawingObjectsCount: Swift.Int)
}
@objc(PrintPageViewControllerDelegate) public protocol PrintPageViewControllerDelegate {
  @objc func printPageViewControllerDidDismiss()
  @objc func PrintPageViewControllerDidFinishJob()
  @objc func deviceNotSupportsPagePrinting()
  @objc func didPagePrintedSuccessFully()
  @objc func didPagePrintingFailedWithError(_ error: (any Swift.Error)?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(PrintPageViewController) @_Concurrency.MainActor @preconcurrency open class PrintPageViewController : UIKit.UIViewController, UIKit.UIPrintInteractionControllerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.PrintPageViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(withPrintImage printImage: UIKit.UIImage)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(withPrintFormatter printFormatter: UIKit.UIViewPrintFormatter)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(withPrintPage printPageData: Swift.AnyObject)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc public func printInteractionControllerDidDismissPrinterOptions(_ printInteractionController: UIKit.UIPrintInteractionController)
  @_Concurrency.MainActor @preconcurrency @objc public func printInteractionControllerDidFinishJob(_ printInteractionController: UIKit.UIPrintInteractionController)
  @_Concurrency.MainActor @preconcurrency @objc public func printInteractionControllerWillStartJob(_ printInteractionController: UIKit.UIPrintInteractionController)
  @_Concurrency.MainActor @preconcurrency @objc public func printInteractionController(_ printInteractionController: UIKit.UIPrintInteractionController, choosePaper paperList: [UIKit.UIPrintPaper]) -> UIKit.UIPrintPaper
  @objc deinit
}
public enum AssetType {
  case undefined
  case pdf
  case fixedEpub
  case reflowableEpub
  public static func == (a: Kitaboo_Reader_SDK.AssetType, b: Kitaboo_Reader_SDK.AssetType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum RendererAvailabilityForActionState : Swift.Int {
  case begin
  case complete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class RendererViewController : UIKit.UIViewController, Kitaboo_Reader_SDK.RendererProtocol, Kitaboo_Reader_SDK.HSOPFParserDelegate, Kitaboo_Reader_SDK.TextSearchControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public var isHighlightEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var bookThumbnailImage: Swift.String?
  @_Concurrency.MainActor @preconcurrency public var isTTSEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var setWebViewTextSelectionHandleColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public init(bookPath: Swift.String, assetType: Kitaboo_Reader_SDK.AssetType, delegate: any Kitaboo_Reader_SDK.RendererViewControllerDelegate)
  @_Concurrency.MainActor @preconcurrency public init?(bookPath: Swift.String, delegate: any Kitaboo_Reader_SDK.RendererViewControllerDelegate)
  @_Concurrency.MainActor @preconcurrency public init?(bookPath: Swift.String, delegate: any Kitaboo_Reader_SDK.RendererViewControllerDelegate, isbn: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init?(bookPath: Swift.String, delegate: any Kitaboo_Reader_SDK.RendererViewControllerDelegate, isbn: Swift.String, additionalInfo: [Swift.String : Any]?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc public func didCompleteSearchDecryption()
  @_Concurrency.MainActor @preconcurrency @objc public func setColorForSharedUGC(_ hexColor: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency public func setHighlightView(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView)
  @objc @_Concurrency.MainActor @preconcurrency public func addViewControllerAsSubView(_ controller: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency @objc public func openHighlightView(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, onPageNo pageNo: Swift.Int, atCoordinates coordinates: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func openHighlightView(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, onPageNo pageNo: Swift.Int, atCoordinates coordinates: CoreFoundation.CGPoint, withHighlightedTextRect highlightedTextRect: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func removeHighlightView()
  @_Concurrency.MainActor @preconcurrency @objc public func deleteSelectedHighlight(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
  @_Concurrency.MainActor @preconcurrency @objc public func highlight(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String, withIsImportant isImportant: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String, withSelectedWordHighlightColor selectedWordColor: Swift.String, withSearchArray searchResultArray: [Kitaboo_Reader_SDK.TextSearchResult], withSelectedResult searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @_Concurrency.MainActor @preconcurrency @objc public func moveToNextSelectedSearch()
  @_Concurrency.MainActor @preconcurrency @objc public func isNextSearchResultAvailable() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func isPreviousSearchResultAvailable() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func isLastPreviousSearchResult() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func isLastNextSearchResult() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func moveToPreviousSelectedSearch()
  @_Concurrency.MainActor @preconcurrency @objc public func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String, withParagraph paragraph: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightTextWithFrame(_ frame: CoreFoundation.CGRect, onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightSentenceWithWordFrames(_ frames: [Any], onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightSentenceWithWordFramesForTTS(_ frames: [Any], onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func updateBackgroundForAudioSyncFrames(withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func getHighlightForSelectedText(withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String) -> Kitaboo_Reader_SDK.SDKHighlightVO
  @_Concurrency.MainActor @preconcurrency @objc public func getHighlightForSelectedTextEpub(withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String, callback: @escaping (Kitaboo_Reader_SDK.SDKHighlightVO) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func getSelectedText() -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc public func postNote(withHighlightVO highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @_Concurrency.MainActor @preconcurrency @objc public func deleteNote(withHighlightVO highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @_Concurrency.MainActor @preconcurrency @objc public func drawHighlights(_ highlights: [Kitaboo_Reader_SDK.SDKHighlightVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func drawTextAnnotation(_ textAnnotation: [Kitaboo_Reader_SDK.SDKTextAnnotationVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func exitTextAnnotationMode()
  @_Concurrency.MainActor @preconcurrency @objc public func deleteTextAnnotation()
  @_Concurrency.MainActor @preconcurrency @objc public func updateTextAnnotationAlignment(_ alignment: UIKit.NSTextAlignment)
  @_Concurrency.MainActor @preconcurrency @objc public func enableTeacherReviewModeWithPageArray(_ pageArray: [Swift.String])
  @_Concurrency.MainActor @preconcurrency @objc public func disableTeacherReviewMode()
  @_Concurrency.MainActor @preconcurrency @objc public func updateTextAnnotationWithBackground(_ background: UIKit.UIColor, withTextColor textColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc public func removeTextAnnotationModeWithoutSave()
  @_Concurrency.MainActor @preconcurrency @objc public func drawPenDrawings(_ penToolArray: [Kitaboo_Reader_SDK.SDKPentoolVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func drawMarkups(_ links: [Kitaboo_Reader_SDK.KFLinkVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func drawFIBs(_ fibs: [Any], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addReviewViewOnFib(_ fibVo: Kitaboo_Reader_SDK.SDKFIBVO)
  @_Concurrency.MainActor @preconcurrency @objc public func removeFibReviewViewOnPageNo(_ pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addInLineVideo(_ view: UIKit.UIView, atRect frame: CoreFoundation.CGRect, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addMultiLinkController(_ viewController: UIKit.UIViewController, atSourceView sourceView: UIKit.UIView, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addInstructionPopup(_ instructionPopupController: UIKit.UIViewController, atSourceView sourceView: UIKit.UIView, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func navigateToPageNumber(_ number: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func enablePagination(_ enable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func setBrightnessForReflowable(_ brightnessValue: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc public func isPaginationEnabled() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func enableNightMode(_ enable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func setReaderMode(_ mode: Kitaboo_Reader_SDK.READER_MODE)
  @_Concurrency.MainActor @preconcurrency @objc public func setTextAlignment(_ textAlignment: Kitaboo_Reader_SDK.TEXT_ALIGNMENT)
  @_Concurrency.MainActor @preconcurrency @objc public func resetReaderSetting()
  @_Concurrency.MainActor @preconcurrency @objc public func resetReaderFontSetting()
  @_Concurrency.MainActor @preconcurrency @objc public func setFontFamily(_ fontFamily: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func didFontSizeChanged(_ fontSize: Swift.UInt)
  @_Concurrency.MainActor @preconcurrency @objc public func setLineSpacing(_ lineSpacing: Kitaboo_Reader_SDK.TEXT_LINESPACING)
  @_Concurrency.MainActor @preconcurrency @objc public func setMargin(_ margin: Kitaboo_Reader_SDK.READER_MARGIN)
  @_Concurrency.MainActor @preconcurrency @objc public func setBookOrientationMode(_ bookOrientation: Kitaboo_Reader_SDK.BookOrientationMode)
  @_Concurrency.MainActor @preconcurrency @objc public func getBookOrientationMode() -> Kitaboo_Reader_SDK.BookOrientationMode
  @_Concurrency.MainActor @preconcurrency @objc public func addBookmark(_ bookmarks: [Kitaboo_Reader_SDK.SDKBookmarkVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func setBookmarkVO(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @_Concurrency.MainActor @preconcurrency @objc public func getBookmarkVOForPageNo(_ pageNo: Swift.Int) -> Kitaboo_Reader_SDK.SDKBookmarkVO?
  @_Concurrency.MainActor @preconcurrency @objc public func addBookmarkView(_ bookmarkView: Kitaboo_Reader_SDK.BookMarkView, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addPrintPageView(_ printPageView: Kitaboo_Reader_SDK.PrintPageButton, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func getPageImageToPrintForPageNumber(_ pageNo: Swift.Int) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public func printPagesWithWatermark(watermarkText: Swift.String, textColor: Swift.String, pageNumbers: [Foundation.NSNumber], callback: ((Any?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func printPagesWithWatermark(watermarkText: Swift.String, textColor: Swift.String, customPages: Swift.String, isCurrentPage: Swift.Bool, callback: ((Any?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency @objc public func exitPrintMode()
  @_Concurrency.MainActor @preconcurrency @objc public func getHighlightVOForStickyNoteTouchPoint(_ touchPoint: CoreFoundation.CGPoint) -> Kitaboo_Reader_SDK.SDKHighlightVO?
  @_Concurrency.MainActor @preconcurrency @objc public func getHighlightVOForStickyNoteWithDefaultPosition() -> Kitaboo_Reader_SDK.SDKHighlightVO?
  @_Concurrency.MainActor @preconcurrency @objc public func getHighlightVOForStickyNoteWithDefaultPositionWithCallBack(_ callback: @escaping (Kitaboo_Reader_SDK.SDKHighlightVO?, (any Swift.Error)?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func getTextAnnotationVOWithDefaultPosition() -> Kitaboo_Reader_SDK.SDKTextAnnotationVO?
  @_Concurrency.MainActor @preconcurrency @objc public func addTextAnnotation(_ sdkTextAnnotationVO: Kitaboo_Reader_SDK.SDKTextAnnotationVO)
  @_Concurrency.MainActor @preconcurrency @objc public func setPenDrawingModeEnabled(_ enabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func setTeacherReviewDragBoxModeEnabled(_ enabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func setPenDrawingModeEnabled(_ enabled: Swift.Bool, withReviewModeEnable reviewModeEnabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func getPenDrawingCanvas() -> [Kitaboo_Reader_SDK.PenDrawingView]
  @_Concurrency.MainActor @preconcurrency @objc public func resetZoomScaleToDefault()
  @_Concurrency.MainActor @preconcurrency @objc public func getActivePages() -> [Any]
  @_Concurrency.MainActor @preconcurrency @objc public func reloadPages()
  @_Concurrency.MainActor @preconcurrency @objc public func setVerticalMarginForReflowableEpubBook(_ marginValue: Foundation.NSNumber)
  @_Concurrency.MainActor @preconcurrency @objc public func drawProtractorDrawings(_ protractorArray: [Any], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func getFIBViewForLinkId(_ linkID: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency public func getCurrentCFI() -> Swift.String?
  @_Concurrency.MainActor @preconcurrency public func jumpToCFIString(_ href: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func getLastVisitedRangeInfo() -> Swift.String?
  @_Concurrency.MainActor @preconcurrency public func getCurrentBookDataCFI() -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc public func addWatermark(_ watermarkHolderView: Kitaboo_Reader_SDK.WatermarkHolderView, onPageNumber pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func updateUGC(_ UGCs: [Kitaboo_Reader_SDK.UGC], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func highlightWordByWordId(_ wordId: Swift.String, andPageIdentifier pageIdentifier: Swift.String, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func moveToNextSelectedSearch(for searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @_Concurrency.MainActor @preconcurrency @objc public func moveToPreviousSelectedSearch(for searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @_Concurrency.MainActor @preconcurrency @objc public func isNextSearchResultAvailable(for searchResult: Kitaboo_Reader_SDK.TextSearchResult) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func isPreviousSearchResultAvailable(for searchResult: Kitaboo_Reader_SDK.TextSearchResult) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func getFirstVisibleWordForScreen(withCallBack callback: @escaping ([Swift.AnyHashable : Any]?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func enableFurthestPage(_ isEnable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func isFurthestPageEnabled() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func setCustomPrintEnabled(_ isCustomPrintEnabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setFurthestPageData(_ furthestPage: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setFurthestPageData(with dict: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor @preconcurrency public func navigateToFurthestPage(withSuccessHandler successHandler: (() -> Swift.Void)?, withFailureHandler failureHandler: (() -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func navigateToFurthestPage(_ furthestPageData: Swift.String?, withSuccessHandler successHandler: (() -> Swift.Void)?, withFailureHandler failureHandler: (() -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency @objc public func disableTwoPageSeperation(_ disableSeperation: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func didTapOnMarkupHitArea(_ markupHitAreaLabel: Kitaboo_Reader_SDK.MarkupHitAreaLabel)
  @_Concurrency.MainActor @preconcurrency public func decryptReflowableCoverImage(_ opfParser: Kitaboo_Reader_SDK.HSOPFParser)
  @_Concurrency.MainActor @preconcurrency @objc public func getReaderFontSetting() -> Kitaboo_Reader_SDK.ReaderFontSetting
  @_Concurrency.MainActor @preconcurrency @objc public func isAvailableReaderFontSetting() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func getVisibleThumbnailNumber(callback: @escaping (Swift.String) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func addWatermarkImageOnEpub(_ watermarkImagePath: Swift.String, onPageNumber pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func isAutoPageScrollingDisableInAudioSync() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func didPauseTTS()
  @_Concurrency.MainActor @preconcurrency @objc public func didPlayTTS()
  @_Concurrency.MainActor @preconcurrency @objc public func didChangeSpeedRate(_ rate: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc public func set3dVideoModeEnabled(_ enabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func playTTS()
  @_Concurrency.MainActor @preconcurrency public func stopTTS()
  @_Concurrency.MainActor @preconcurrency public func pauseTTS()
  @_Concurrency.MainActor @preconcurrency public func resumeTTS()
  @_Concurrency.MainActor @preconcurrency public func playNextSentenceInTTS()
  @_Concurrency.MainActor @preconcurrency public func playPreviousSentenceInTTS()
  @_Concurrency.MainActor @preconcurrency public func setTTSVolume(_ volume: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func setTTSSpeed(_ rate: Swift.Float)
  @_Concurrency.MainActor @preconcurrency public func isTTSPlaying() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func playPDFTTSFromPoint(_ wordRect: CoreFoundation.CGRect, withWordText wordText: Swift.String, withPageNumber pageNumber: Foundation.NSNumber)
  @_Concurrency.MainActor @preconcurrency @objc public func didJumpToSentence(withWordFramesForTTS frames: [Any], withPageIdentifier pageIdentifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func currentPageNumberForTTS(_ pageNumber: Foundation.NSNumber)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class HDMediaBookTimeIndexVO : ObjectiveC.NSObject {
  @objc open var startTime: Swift.Int
  @objc open var endTime: Swift.Int
  @objc open var folio: Swift.String?
  @objc open var fileName: Swift.String?
  @objc open var title: Swift.String?
  @objc open var chapterTitle: Swift.String?
  @objc open var chapterTotalTime: Swift.Int
  @objc open var chapterContentIndex: Swift.Int
  @objc open var parent: Kitaboo_Reader_SDK.HDMediaBookTimeIndexVO?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class HSDBManager : ObjectiveC.NSObject {
  public var book: Kitaboo_Reader_SDK.KitabooBookVO?
  @objc override dynamic public init()
  public func saveHighlight(_ ugc: Kitaboo_Reader_SDK.SDKHighlightVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func updateHighlight(_ localId: Swift.String, ugcId: Swift.String, dateTime: Swift.String, synced: Swift.Bool)
  public func highlightForPageID(_ pageID: Swift.String, displayNumber: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]
  public func deleteHighlight(_ ugc: Kitaboo_Reader_SDK.UGC, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func highlightBookID(_ bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]?
  public func bookMarkBookID(_ bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Kitaboo_Reader_SDK.SDKBookmarkVO]?
  public func saveBookmark(_ bookMark: Kitaboo_Reader_SDK.SDKBookmarkVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func bookmarkForPageID(_ pageID: Swift.String, displayNumber: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]
  public func deleteBookmark(_ ugc: Kitaboo_Reader_SDK.UGC, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func updateBookmark(_ localId: Swift.String, ugcId: Swift.String, dateTime: Swift.String, synced: Swift.Bool)
  public func savePentoolDrawing(_ ugc: Kitaboo_Reader_SDK.SDKPentoolVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func pentoolDrawingForPageID(_ pageID: Swift.String, displayNumber: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]
  public func deletePentoolDrawing(_ ugc: Kitaboo_Reader_SDK.UGC, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func saveFIB(_ fibVO: Kitaboo_Reader_SDK.SDKFIBVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func getFIBObject(withLinkId linkId: Foundation.NSNumber, forUserId userId: Foundation.NSNumber) -> Kitaboo_Reader_SDK.SDKFIBVO?
  public func getEquationFIBObject(forText text: Swift.String, withLink link: Kitaboo_Reader_SDK.KFLinkVO, forUserId userId: Foundation.NSNumber) -> Kitaboo_Reader_SDK.SDKFIBVO
  public func deleteFIB(_ fibVO: Kitaboo_Reader_SDK.SDKFIBVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func updateFIB(_ fibVO: Kitaboo_Reader_SDK.SDKFIBVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber)
  public func saveTextAnnotation(_ textAnnotationVO: Kitaboo_Reader_SDK.SDKTextAnnotationVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func textAnnotationVOForPageID(_ pageID: Swift.String, displayNumber: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]
  public func deleteTextAnnotation(_ ugc: Kitaboo_Reader_SDK.UGC, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func saveProtractor(_ ugc: Kitaboo_Reader_SDK.SDKProtractorVO, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func protractorDrawingForPageID(_ pageID: Swift.String, displayNumber: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]
  public func deleteProtractorDrawing(_ ugc: Kitaboo_Reader_SDK.UGC, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func fetchClassInfoOfBook(_ bookGuid: Foundation.NSNumber, forUser userId: Foundation.NSNumber, withContext context: CoreData.NSManagedObjectContext) -> [Any]
  public func fetchClassInfoOfBook(_ bookGuid: Foundation.NSNumber, forUser userId: Foundation.NSNumber) -> [Any]
  public func bookClassInfoArrayForBookID(_ bookGuid: Foundation.NSNumber, forUser userId: Foundation.NSNumber) -> [Any]
  public func saveClassInfoOfBook(_ bookClassInfoVO: Kitaboo_Reader_SDK.SDKBookClassInfoVO, ofBook bookGuid: Foundation.NSNumber, forUser userId: Foundation.NSNumber) -> Swift.Bool
  public func saveSharedReceivedInfo(_ shareRecieveListDic: [Swift.AnyHashable : Any], ofBook bookGuid: Foundation.NSNumber, forUser userId: Foundation.NSNumber) -> Swift.Bool
  public func checkWhetheralreadyExists(inEntityWithEntityName entityName: Swift.String, forUserID userID: Swift.Int, forBookID bookID: Swift.Int, forClassID classID: Swift.Int) -> [Any]?
  public func getPenToolUGCDictionaryFromSDKPenToolVO(_ penToolVO: Kitaboo_Reader_SDK.SDKPentoolVO) -> [Swift.String : Any]
  public func getSDKPenToolVOFromUGCDictionary(_ penToolUGCDict: [Swift.String : Any]) -> Kitaboo_Reader_SDK.SDKPentoolVO
  public func getHighlightUGCDictionaryFromSDKHighlightVO(_ highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO) -> [Swift.String : Any]
  public func getBookMarkUGCDictionaryFromSDKBookMarkVO(_ bookMarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO) -> [Swift.String : Any]
  public func getFIBUCGDictionaryFromSDKFIBVO(_ fibVO: Kitaboo_Reader_SDK.SDKFIBVO) -> [Swift.String : Any]
  public func getSDKFIBVOFromUGCDictionary(_ fibUGCDict: [Swift.String : Any]) -> Kitaboo_Reader_SDK.SDKFIBVO
  public func getTextAnnotationUCGDictFromSDKTextAnnotationVO(_ textAnnotationVO: Kitaboo_Reader_SDK.SDKTextAnnotationVO) -> [Swift.String : Any]
  public func getUGCStatusStringFromUGCStatus(_ status: Kitaboo_Reader_SDK.UGCStatus) -> Swift.String
  public func getUGCStatusFromUGCStatusString(_ status: Swift.String?) -> Kitaboo_Reader_SDK.UGCStatus
  public func getUGCIsImportantStringFromUGCIsImportant(_ isImportant: Swift.Bool) -> Swift.String
  public func getImportantStringFromUGCImportant(_ isImportant: Swift.Bool) -> Swift.String
  public func getUGCIsImportantFromUGCIsImportantString(_ isImportantString: Swift.String?) -> Swift.Bool?
  public func saveKitabooUGC(with ugcDictionary: inout [Swift.String : Any], bookID: Foundation.NSNumber, userID: Foundation.NSNumber, isSynced: Swift.Bool, modifiedDate: Foundation.Date?) -> Swift.Bool
  public func deleteAllReceivedUGC(for bookID: Foundation.NSNumber, userID: Foundation.NSNumber)
  public func getKitabooUGCObject(with linkId: Foundation.NSNumber, for userId: Foundation.NSNumber) -> Kitaboo_Reader_SDK.KitabooUGC?
  public func getTeacherCommentArray(for bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]
  public func getTextAnnotationUGCArray(from array: [Any], forUserID: Foundation.NSNumber) -> [Any]
  public func getHighlightUGCArray(from array: [Any], for userID: Foundation.NSNumber) -> [Any]
  public func gethighlightUGCArrayFromFibArray(array: [Any], userID: Foundation.NSNumber) -> [Any]
  public func getPenToolUGCArray(from array: [Any], for userID: Foundation.NSNumber) -> [Any]
  public func getBookmarksUGCArray(from array: [Any], for userID: Foundation.NSNumber) -> [Any]
  public func getProtractorUGCArray(from array: [Any], for userID: Foundation.NSNumber) -> [Any]
  public func getFIBUGCArrayFromArray(array: [Any], userID: Foundation.NSNumber) -> [Any]
  public func getFIBlUGCObjectFromKitabooUGCObject(_ kitabooUGC: Kitaboo_Reader_SDK.KitabooUGC?) -> Kitaboo_Reader_SDK.SDKFIBVO?
  public func updateUGC(_ localId: Swift.String, ugcId: Swift.String, dateTime: Swift.String, synced: Swift.Bool)
  public func getUGC(localId: Swift.String) -> Kitaboo_Reader_SDK.KitabooUGC?
  public func checkForUGC(_ localId: Swift.String) -> Swift.Bool
  public func deleteUGC(_ ugc: Kitaboo_Reader_SDK.UGC, bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> Swift.Bool
  public func getJSONFormatedStringFromDictionary(_ dictionary: [Swift.String : Any]) -> Swift.String?
  public func getDictionaryFromJSONFormatedString(_ jsonFormatedString: Swift.String?) -> [Swift.String : Any]?
  public func getStringValue(_ object: Any?) -> Swift.String
  public func checkWhetherThisServerID(_ serverID: Swift.String?, orLocalID localID: Swift.String?, alreadyExistsInEntityWithEntityName entityName: Swift.String, forUserID userID: Swift.String) -> [Any]?
  public func getChapterNameForChapter(_ chapter: Kitaboo_Reader_SDK.EPUBChapter) -> Swift.String
  public func getUnsynedUGCArrayForBookID(_ bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber) -> [Any]?
  public func getUnsynedUGCDictionaryForBookID(_ bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber) -> [Swift.String : Any]?
  public func getUnsyncedUGCDictionaryForUserID(_ userID: Foundation.NSNumber) -> [Swift.String : Any]
  public func getUnsyncedUGCDictionaryForUserID(_ userID: Foundation.NSNumber, withBookID bookId: Foundation.NSNumber) -> [Swift.String : Any]
  public func getDistinctBookIdsForUnsyncedUGCs(forUserID userID: Foundation.NSNumber) -> [Any]
  public func getDistinctBookIdsForUnsyncedTrackingData(forUserID userID: Foundation.NSNumber) -> [Any]
  public func updateAnsweredUGC(_ ugcId: Swift.String, accepted: Swift.Bool, andUserId userId: Swift.String)
  public func getHighlightWithUgcId(_ ugcId: Swift.String, andUserId userId: Swift.String) -> Kitaboo_Reader_SDK.KitabooUGC?
  public func getLastSyncedDateForBookID(_ bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber) -> Swift.String
  public func isResourcesDecryptedForBookID(_ bookID: Foundation.NSNumber) -> Swift.Bool
  public func updateResourceDecryption(_ isDecrypted: Swift.Bool, forBookID bookID: Foundation.NSNumber)
  public func setLastSyncedDate(_ lastSyncDate: Swift.String, forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber)
  public func submitAnotation(forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber)
  public func submitAnotationForFib(forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber)
  public func isSubmitAnotationAllowed(forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber) -> Swift.Bool
  public func isSubmitAnotationAllowedForFib(forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber) -> Swift.Bool
  public func getUnsyncedCollabDataDictionary(forUserID userID: Foundation.NSNumber) -> [Swift.String : Any]?
  public func getUnsyncedCollabDataDictionary(forUserID userID: Foundation.NSNumber, withBookID bookId: Foundation.NSNumber) -> [Swift.String : Any]?
  public func setCollabDataSubmitted(forUserID userID: Foundation.NSNumber)
  public func setCollabDataSubmitted(forUserID userID: Foundation.NSNumber, forUGCIdArray ugcIdArray: [Any])
  public func updateSharedCollabData(_ sharedUGCData: [Swift.String : Any], ofBook bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber)
  public func createReaderAnalyticsSession(forUserID userID: Swift.String, withBookID bookID: Swift.String, withAnalyticsData analyticsData: Swift.String) -> Swift.String?
  public func updateReaderAnalyticsSession(forUser userID: Foundation.NSNumber, withBookID bookID: Foundation.NSNumber, withAnalyticsData analyticsJSON: Swift.String)
  public func getReaderAnalytics(forUser userID: Foundation.NSNumber, withBookID bookID: Foundation.NSNumber) -> [Swift.String : Any]?
  public func deleteAllReaderAnalytics(forUser userID: Foundation.NSNumber, withBookID bookID: Foundation.NSNumber)
  public func deleteAllReaderAnalytics()
  public func deleteReaderAnalytics(forUser userID: Foundation.NSNumber, withBookID bookID: Foundation.NSNumber, withSessionID sessionID: Swift.String)
  public func saveSCORMdataToDB(bookID: Foundation.NSNumber, forUser userID: Foundation.NSNumber, forSCORMId scormId: Swift.String, withSCORMString scormDataString: Swift.String, andClassId classId: Swift.String, andPageID pageID: Foundation.NSNumber, andActivityname activityName: Swift.String, andIsSynced isSynced: Swift.Bool)
  public func fetchScormDataWithBookID(bookID: Swift.String, forUser userID: Foundation.NSNumber, forSCORMId scormId: Foundation.NSNumber) -> Swift.String
  public func fetchSCORMInfoFromDBWithBookID(bookID: Foundation.NSNumber, forUser userID: Foundation.NSNumber, andClassId classId: Swift.String, checkIfSynced checkSynced: Swift.Bool) -> [Any]
  public func getSCROMData(scromArray: [Kitaboo_Reader_SDK.SCORMData]) -> [Any]
  public func updateScorm(bookID: Foundation.NSNumber, forSCORMId scormId: Swift.String, isSynced: Swift.Bool)
  public func updateSCORMDataInDatabase(scormData: Kitaboo_Reader_SDK.SCORMData, scormString: Swift.String, activityName: Swift.String, isSynced: Swift.Bool)
  public func updateSCORMDataInDatabase(scormData: Kitaboo_Reader_SDK.SCORMData, scormString: Swift.String, isSynced: Swift.Bool)
  public func getProtractorUGCDictionaryFromSDKProctorVO(protractorVO: Kitaboo_Reader_SDK.SDKProtractorVO) -> [Swift.String : Any]
  public func clearAllFIBsOnPageNumber(pageID: Swift.String, withDisplayNumber displayNum: Swift.String, bookID: Foundation.NSNumber, andUserID userID: Foundation.NSNumber)
  public func clearAllFIBsOnPageNumber(pageID: Swift.String, withDisplayNumber displayNum: Swift.String, bookID: Foundation.NSNumber, andUserID userID: Foundation.NSNumber, withSubmitted isSubmitted: Swift.Bool)
  public func isUnsubmittedFIBsAvailableOnPageID(pageID: Swift.String, withDisplayNumber displayNum: Swift.String, bookID: Foundation.NSNumber, andUserID userID: Foundation.NSNumber) -> Swift.Bool
  public func isFIBsAvailableOnPageID(pageID: Swift.String, withDisplayNumber displayNum: Swift.String, bookID: Foundation.NSNumber, andUserID userID: Foundation.NSNumber, withSubmitted isSubmitted: Swift.Bool) -> Swift.Bool
  public func getFIBsForPageID(pageID: Swift.String, forDisplayNumber displayNumber: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber, withSubmitted isSubmitted: Swift.Bool) -> [Any]
  public func getFIBsForDisplayNumber(displayNumber: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber, withSubmitted isSubmitted: Swift.Bool) -> [Any]
  public func getFIBsForPageID(pageID: Swift.String, bookID: Foundation.NSNumber, userID: Foundation.NSNumber, withSubmitted isSubmitted: Swift.Bool) -> [Any]
  public func getKitabooUgcFIBArrayForbookID(bookID: Foundation.NSNumber, userID: Foundation.NSNumber) -> [Any]
  public func getDistinctScormIdsForUnsyncedScormForUserID(userID: Foundation.NSNumber) -> [Any]
  public func fetchScormInfoWithScormID(scormID: Swift.String, forUser userID: Foundation.NSNumber, checkIfSynced: Swift.Bool) -> [Any]
  public func getBookIDForScormID(scormID: Swift.String) -> Foundation.NSNumber?
  public func getScorm(scormID: Swift.String) -> Kitaboo_Reader_SDK.SCORMData?
  public func saveBookMetadata(metadata: Foundation.NSDictionary, forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber)
  public func getBookMetadataForbookID(bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber) -> Foundation.NSDictionary?
  public func saveReaderFontSetting(fontSetting: Kitaboo_Reader_SDK.ReaderFontSetting, forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber)
  public func getReaderFontSettingForBookID(bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber) -> Kitaboo_Reader_SDK.ReaderFontSetting?
  public func updateIsSyncedFurtherPageForBookID(bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber, isSynced: Swift.Int, withTimeStamp timeStamp: Swift.String?)
  public func getUnsyncedFurthestPageDataDictionary(forUserID userID: Foundation.NSNumber) -> [Swift.String : Any]
  public func getBookIdsForUnsyncedFurthestPageData(forUserID userID: Foundation.NSNumber) -> [Swift.String]
  @objc deinit
}
public enum VIDEOTYPE : Swift.Int {
  case kVideoTypeLocal
  case kVideoTypeVimeo
  case kVideoTypeKaltura
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol KitabooVideoPlayerDelegate : AnyObject {
  func videoPlayerDidStopPlaying()
  func videoPlayerDidFinishPlaying()
  func videoPlayerDidPausePlaying()
  func videoPlayerDidEnterFullScreen(with linkVO: Kitaboo_Reader_SDK.KFLinkVO)
  func videoPlayerDidExitFullScreen(with linkVO: Kitaboo_Reader_SDK.KFLinkVO)
}
@objc @_Concurrency.MainActor @preconcurrency open class KitabooVideoPlayer : UIKit.UIViewController, Kitaboo_Reader_SDK.HDMediaBookNarrationSpeedControllerDelegate, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency public var _moviePlayerController: Kitaboo_Reader_SDK.MoviePlayerController?
  @_Concurrency.MainActor @preconcurrency public var _linkVO: Kitaboo_Reader_SDK.KFLinkVO
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.KitabooVideoPlayerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isViewLoaded: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public init(videoPath: Swift.String, bookVO: Kitaboo_Reader_SDK.EPUBBookVO, resource: Kitaboo_Reader_SDK.EPUBResource)
  @_Concurrency.MainActor @preconcurrency public init(videoPath: Swift.String, bookVO: Kitaboo_Reader_SDK.KFBookVO, linkVO: Kitaboo_Reader_SDK.KFLinkVO)
  @_Concurrency.MainActor @preconcurrency public init(videoPath: Swift.String, videoType: Kitaboo_Reader_SDK.VIDEOTYPE, frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public init(videoPath: Swift.String, videoType: Kitaboo_Reader_SDK.VIDEOTYPE, decryptionKey key: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public static func setIsExternalResource(_ isExternalResource: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willRotate(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didRotate(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc public func didNarrationSpeedValueChanges(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @_Concurrency.MainActor @preconcurrency @objc public func didTapOnCancel()
  @_Concurrency.MainActor @preconcurrency public func playVideo()
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ g: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy og: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func removeMoviePlayer()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func getInlineVideoPlayer() -> UIKit.UIView
}
@objc public protocol TeacherReviewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func didSelectLearner(_ learnerName: Swift.String, withLearnerID learnerID: Swift.String)
  @objc optional func didSelectPenTypeForTeacherReview()
  @objc optional func didSelectPenColorForTeacherReview(_ color: Swift.String)
  @objc optional func didSelectEraserForTeacherReview()
  @objc optional func didSelectDeleteForTeacherReview()
  @objc optional func didSelectDoneForTeacherReview(withUpdatedAnotations anotations: [Any], forLearnerID learnerID: Swift.String)
  @objc optional func didSelectNavigatePageButtonForTeacherReview(_ pageNumber: Swift.String)
  @objc optional func didStudentPopUpOpen(_ isStudentPopUpOpen: Swift.Bool)
  @objc optional func didSelectClearAllForTeacherReview()
  @objc optional func didSelectGenerateReport()
}
@_inheritsConvenienceInitializers @objc(TeacherReviewController) @_Concurrency.MainActor @preconcurrency open class TeacherReviewController : UIKit.UIViewController, Kitaboo_Reader_SDK.PlayerActionDelegate, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc public func didSelectedPlayerActionBar(_ playerActionBar: Kitaboo_Reader_SDK.PlayerActionBar, withItem item: Kitaboo_Reader_SDK.PlayerActionBarItem)
  @_Concurrency.MainActor @preconcurrency @objc public func willResetPlayerActionBar(_ playerActionBar: Kitaboo_Reader_SDK.PlayerActionBar)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didReceiveMemoryWarning()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum Filter : Swift.Int {
  case TOC
  case RESOURCE
  case BOOKMARK
  case STANDARDS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TOCControllerDelegate {
  @objc func navigateToPage(_ pageID: Swift.String)
  @objc func didSelectContentSegment()
  @objc func actionForLink(_ linkVO: Kitaboo_Reader_SDK.KFLinkVO)
  @objc func didSelectResourceSegment()
  @objc func didSelectBookmarkSegment()
  @objc func didSelectActionToCloseTOC()
  @objc func labelTextForLink(_ linkVO: Kitaboo_Reader_SDK.KFLinkVO) -> Swift.String
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class TOCController : UIKit.UIViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var traitCollection: UIKit.UITraitCollection {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(HDSliderBarView) @_Concurrency.MainActor @preconcurrency open class HDSliderBarView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var pageSlider: Kitaboo_Reader_SDK.ReflowableCustomSlider
  @objc @_Concurrency.MainActor @preconcurrency public var sliderContainerVewHeight: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor @preconcurrency final public let sliderContainerVew: UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency final public let percentageLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor @preconcurrency public var sliderValueChanged: ((Swift.Float) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var sliderMoves: ((Swift.Float) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public init(VerticalSliderValue enable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func enableVerticalSlider(_ enable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public func updatePercentage()
  @objc @_Concurrency.MainActor @preconcurrency public func enableSliderThumbImage(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setSliderThumbColour(_ thumbColor: UIKit.UIColor, maxTintColor maxColor: UIKit.UIColor, minTintColor minTint: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setImageForSlider(_ image: UIKit.UIImage, withColour color: UIKit.UIColor)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ReflowableCustomSlider) @_Concurrency.MainActor @preconcurrency open class ReflowableCustomSlider : UIKit.UISlider {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func trackRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func thumbRect(forBounds bounds: CoreFoundation.CGRect, trackRect rect: CoreFoundation.CGRect, value: Swift.Float) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(HDReflowableSliderPopUpView) @_Concurrency.MainActor @preconcurrency open class HDReflowableSliderPopUpView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public let chapterLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor @preconcurrency final public let chapterNameLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor @preconcurrency final public let readingTimeLeftLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(HDReflowablePageCountView) @_Concurrency.MainActor @preconcurrency open class HDReflowablePageCountView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public let chapterLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor @preconcurrency final public let dotLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor @preconcurrency final public let pageLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor @preconcurrency final public let readingTimeLeftLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency open func setPageData(_ pageNumber: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency open func setTimeLeftData(_ text: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency open func setCustomFontFamily(_ fontName: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency open func setViewColors(_ textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency open func enableDotLabel(_ enable: Swift.Bool)
  @objc deinit
}
@objc public enum MarkupLinkType : Swift.Int {
  case none
  case multiLink
  case audio
  case video
  case image
  case input
  case comments
  case pageLink
  case webLink
  case dictera
  case document
  case audioSync
  case htmlWrap
  case dropDown
  case slideShow
  case widget
  case groupNotes
  case kaltura
  case youtube
  case survey
  case glossary
  case jumpToBook
  case imageZoom
  case instruction
  case vimeoVideo
  case tracerMedia
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BookOrientationType : Swift.Int {
  case landscapeOnly
  case portraitOnly
  case dynamic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class KFBookVO : Kitaboo_Reader_SDK.KitabooBookVO {
  public var ISBN: Swift.String
  @objc public var pages: Foundation.NSDictionary?
  public var glossary: Foundation.NSMutableDictionary?
  public var path: Swift.String
  public var bookOrientationType: Kitaboo_Reader_SDK.BookOrientationType
  public var isReadAloudEnabled: Swift.Bool
  public func getBookResourcesForTORSubnodes() -> [[Swift.String : Any]]
  public func getBookResourcesForTORSubnodes(forRole role: Swift.String, ofStandardType standardType: Swift.String) -> [Any]
  public func pageForPagenumber(_ pageNumber: Foundation.NSNumber) -> Kitaboo_Reader_SDK.KFPageVO?
  public func getLinksForForPagenumber(_ pageNumber: Foundation.NSNumber) -> [Kitaboo_Reader_SDK.KFLinkVO]?
  override public func getBookContentForTOC() -> [Any]
  override public func getBookResourcesForTOC() -> [Any]
  public func getBookResourcesForTOCWithSubnodes() -> [Any]
  override public func getThumbnailData() -> [Any]
  open func getChapterForPageID(_ pageID: Swift.String) -> Kitaboo_Reader_SDK.KFChapterVO?
  public func getPrevAudioLinkPagefromCurrentPageNumber(_ currentPageNumber: Swift.String) -> Kitaboo_Reader_SDK.KFPageVO?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class KFChapterVO : ObjectiveC.NSObject {
  public var chapterID: Swift.Int
  public var title: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class KFPageVO : ObjectiveC.NSObject {
  open var pageID: Swift.Int
  public var pageNum: Swift.Int
  public var displayNum: Swift.String
  public var links: Foundation.NSDictionary? {
    get
    set(setLink)
  }
  public func getAudioSyncTypeLinks() -> [Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class KFLinkVO : ObjectiveC.NSObject {
  public var linkID: Swift.Int
  public var folioNumber: Swift.String
  public var pageID: Swift.String?
  public var type: Swift.String {
    get
    set
  }
  public var xCoordinate: Swift.String?
  public var yCoordinate: Swift.String?
  public var box: Swift.String?
  public var alpha: Swift.Int
  public var url: Swift.String?
  public var groupName: Swift.String?
  public var properties: Swift.String?
  public var layer: Swift.String?
  public var iconURL: Swift.String?
  public var toolTip: Swift.String?
  public var sequence: Swift.String?
  public var audioLength: Swift.Int
  public var altText: Swift.String?
  public var _linkType: Kitaboo_Reader_SDK.MarkupLinkType?
  public var transformedRect: CoreFoundation.CGRect
  public var boxTansformedRect: CoreFoundation.CGRect
  public var isExternal: Swift.Bool
  public var isInstantFeedback: Swift.Bool
  public var isMultipleAnswer: Swift.Bool
  public var isMathKeyboardEnabled: Swift.Bool
  public var answer: Swift.String?
  public var isCaseSenstive: Swift.Bool
  public var iconText: Swift.String?
  public var iconView: Kitaboo_Reader_SDK.MarkupView?
  public var iconHitAreaLabel: Kitaboo_Reader_SDK.MarkupHitAreaLabel?
  public var isBorder: Swift.Bool
  public var is3dPlayerView: Swift.Bool
  public var isMultiLinkMember: Swift.Bool
  public var audioSync: [Any]? {
    get
    set(setAudioSync)
  }
  public var linkType: Kitaboo_Reader_SDK.MarkupLinkType? {
    get
    set(setLinkType)
  }
  @objc public func getIconForLinkType(_ linkType: Kitaboo_Reader_SDK.MarkupLinkType) -> Swift.String
  public func isInLine() -> Swift.Bool
  public func checkIs3dView() -> Swift.Bool
  public func getSrtPath() -> Swift.String
  public func isFlexible() -> Swift.Bool
  public func isMovable() -> Swift.Bool
  public func isPlaylist() -> Swift.Bool
  public func isVisible() -> Swift.Bool
  public func isDisplayUnderTOR() -> Swift.Bool
  public func isPlaybackground() -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class KFGlossaryVO : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class KFAudioSyncVO : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HDAudioBookPlayerViewControllerDelegate {
  @objc optional func didTapOnBookmark()
  @objc optional func didTapOnPlayPause(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc optional func didTapOnNarrationSpeed(_ button: UIKit.UIButton)
  @objc optional func didTapOnForward()
  @objc optional func didTapOnRewind()
  @objc optional func didTapOnNextChapter()
  @objc optional func didTapOnPreviousChapter()
  @objc optional func didSeekBarValueChanged()
  @objc optional func imageViewForThumbnail(_ thumbnailURL: Swift.String) -> UIKit.UIImageView?
}
@objc public enum AudioBookPlayerViewStateUpdate : Swift.Int {
  case kAudioBookUpdatePlayPauseState = 0, kAudioBookUpdateReadingSpeed, kAudioBookUpdateCurrentTime
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class HDAudioBookPlayerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var previousChapterButtonLeadingConstant: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var nextChapterButtonTrailingConstant: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency open var rewindButtonLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var forwardTrailingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var bookmarkButtonLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var narrationSpeedButtonTrailingConstraint: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDAudioBookPlayerViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var forwardBackwardTimeConstant: Swift.Float
  @objc @_Concurrency.MainActor @preconcurrency public var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @_Concurrency.MainActor @preconcurrency open var _themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO
  @_Concurrency.MainActor @preconcurrency open var chapterNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var chapterNumberLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var seekBar: Kitaboo_Reader_SDK.ReflowableCustomSlider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var currentTimeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var totalTimeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var bookmarkButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var forwardButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var rewindButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var playPauseButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var narrationSpeedButton: UIKit.UIButton {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency open func updateChapterViewControlsFont()
  @objc @_Concurrency.MainActor @preconcurrency open func updateConstraints()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency open func setPlayPauseButtonCornerRadius(_ radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func setSeekBarThumbImage(_ image: UIKit.UIImage)
  @_Concurrency.MainActor @preconcurrency open func updateTheme()
  @objc @_Concurrency.MainActor @preconcurrency public func updateAudioThumbnail()
  @objc @_Concurrency.MainActor @preconcurrency public func addSleepTimeView()
  @objc @_Concurrency.MainActor @preconcurrency public func removeSleepTimeView()
  @objc @_Concurrency.MainActor @preconcurrency public func setSleepTimeLabelText(_ text: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func addMediaControlsView()
  @objc @_Concurrency.MainActor @preconcurrency public func updatePlayerView(_ state: Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate, mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel, showLoader: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func hideBookmark(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disableNextChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disablePreviousChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency open func disableBookmark(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteAllBookmarks(_ bookmarksVO: [Kitaboo_Reader_SDK.SDKBookmarkVO])
  @objc @_Concurrency.MainActor @preconcurrency public func addBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func getThumbnailContainerView() -> UIKit.UIView?
  @objc @_Concurrency.MainActor @preconcurrency open func updateTimeinHours(_ currentTime: Swift.Double, _ totalTime: Swift.Double)
  @objc @_Concurrency.MainActor @preconcurrency open func bookmarkButtonTapped(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency open func getChapterViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, centerX: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func getSliderViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func getMediaControlViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat)
  @objc deinit
}
extension UIKit.UIImage {
  public func withRoundedCorners(radius: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage?
}
@objc(HSModalPopupControllerDelegate) public protocol HSModalPopupControllerDelegate {
  @objc func didCloseModalPopupController()
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class HSModalPopupController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HSModalPopupControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public func setContentViewWith(view: Any)
  @objc @_Concurrency.MainActor @preconcurrency public func setCaptionTextWith(text: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Kitaboo_Reader_SDK.SDKHLSDownloadInfo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Kitaboo_Reader_SDK.SDKHLSDownloadInfo>
  @objc @NSManaged dynamic public var assetDownloadedData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var assetDownloadingBitrate: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var assetEncKeyData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var assetM3U8Name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var assetM3U8Path: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bookId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cookies: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isDownloaded: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalAssets: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objc public protocol BookmarkControllerDelegate {
  @objc func didBookmarkComplete(with bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class BookMarkController : UIKit.UIViewController, UIKit.UITextFieldDelegate {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.BookmarkControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func changeUILayoutForRTL()
  @_Concurrency.MainActor @preconcurrency public func setTextFieldTintColor(_ tintColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func accessibilityPerformEscape() -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func setBackgroundColorForView(_ color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didReceiveMemoryWarning()
  @objc @_Concurrency.MainActor @preconcurrency public func getBookmarkVO() -> Kitaboo_Reader_SDK.SDKBookmarkVO?
  @objc @_Concurrency.MainActor @preconcurrency public func setBookmarkVO(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class IconFont : ObjectiveC.NSObject {
  @objc public static func shared() -> Kitaboo_Reader_SDK.IconFont
  @objc public func getKitaboo6_0Font(fontSize: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class CustomFontsFor6_0 : ObjectiveC.NSObject {
  @objc public static func shared() -> Kitaboo_Reader_SDK.CustomFontsFor6_0
  @objc public func getCustomBoldFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc public func getCustomItalicFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc public func getCustomMediumFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc public func getCustomRegularFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HDGoogleTranslationLanguage : ObjectiveC.NSObject {
  @objc public var code: Swift.String?
  @objc public var name: Swift.String?
  @objc public init(code: Swift.String, name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class HDGoogleTranslationManager : ObjectiveC.NSObject {
  @objc public static let shared: Kitaboo_Reader_SDK.HDGoogleTranslationManager
  @objc public var googleAPIKey: Swift.String
  @objc open var supportedLanguages: [Kitaboo_Reader_SDK.HDGoogleTranslationLanguage]
  @objc public func detectLanguage(forText text: Swift.String, completion: @escaping (_ language: Swift.String?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc public func fetchSupportedLanguages(completion: @escaping (_ success: Swift.Bool, _ error: Foundation.NSError?) -> Swift.Void)
  @objc public func translate(textToTranslate: Swift.String, sourceLanguageCode: Swift.String, targetLanguageCode: Swift.String, completion: @escaping (_ translations: Swift.String?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@objc public protocol KitabooDataSyncingManagerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func didFetchedUGCSuccessfully()
  @objc optional func didFailedToFetchUGCWithError(_ error: any Swift.Error)
  @objc optional func didSavedUGCSuccessfully()
  @objc optional func didFailedToSaveUGCWithError(_ error: any Swift.Error)
  @objc optional func didUGCSynchCompletedSuccessfully()
  @objc optional func didUGCSynchFailedWithError(_ error: any Swift.Error)
  @objc optional func didSavedStudentAnotationSuccessfully()
  @objc optional func didFailedToSaveStudentAnotationWithError(_ error: any Swift.Error)
  @objc optional func didSubmitedAnotationSuccessfully()
  @objc optional func didFailedToSubmitAnotationWithError(_ error: any Swift.Error)
  @objc optional func didSavedScormDataSuccessfully()
  @objc optional func didSavedScormDataSuccessfully(bookID: Foundation.NSNumber, scormID: Swift.String, classID: Swift.String)
  @objc optional func didFailedToSaveScormWithError(_ error: any Swift.Error)
  @objc optional func didFailedToSaveScorm(error: any Swift.Error, bookID: Foundation.NSNumber, scormID: Swift.String, classID: Swift.String)
  @objc optional func didFetchScormDataSuccessfully()
  @objc optional func didFailedToFetchScormWithError(_ error: any Swift.Error)
  @objc optional func didUGCSynchCompletedSuccessfully(withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didUGCSynchFailedWithError(_ error: any Swift.Error, withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didUGCSaveCompletedSuccessfully(withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didPartialUGCSaveCompletedSuccessfully(userID: Swift.String, bookID: Swift.String)
  @objc optional func didUGCSaveFailedWithError(_ error: any Swift.Error, withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didPartialUGCSaveFailed(error: any Swift.Error, userID: Swift.String, bookID: Swift.String)
  @objc optional func didUGCFetchCompletedSuccessfully(withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didUGCFetchFailedWithError(_ error: any Swift.Error, withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didSaveHighlightDataSuccessfully()
  @objc optional func didSaveHighlightDataFailedWithError(_ error: any Swift.Error)
  @objc optional func didSaveHighlightDataFailedWithError(_ error: any Swift.Error, withShareAndRecieveDict shareAndRecieveDict: Foundation.NSDictionary, forBookID bookID: Foundation.NSNumber)
  @objc optional func didSaveTrackingDataSuccessfully()
  @objc optional func didSaveTrackingDataSuccessfully(withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didSaveTrackingDataFailedWithError(_ error: any Swift.Error)
  @objc optional func didSaveTrackingDataFailedWithError(_ error: any Swift.Error, forBookID bookID: Foundation.NSNumber, forUserId userID: Foundation.NSNumber)
  @objc optional func didAcceptOrRejectDataSuccessfully()
  @objc optional func didAcceptOrRejectDataSuccessfully(withUGCId ugcID: Swift.String, andIsAccepted accepted: Swift.Bool)
  @objc optional func didAcceptOrRejectDataFailedWithError(_ error: any Swift.Error)
  @objc optional func didAcceptOrRejectDataFailedWithError(_ error: any Swift.Error, withUGCId ugcID: Swift.String, andIsAccepted accepted: Swift.Bool)
  @objc optional func didSaveCollabDataSuccessfully()
  @objc optional func didSaveCollabDataFailedWithError(_ error: any Swift.Error)
  @objc optional func didSaveCollabDataFailedWithError(_ error: any Swift.Error, forBookID bookID: Foundation.NSNumber, forUserId userID: Foundation.NSNumber)
  @objc optional func didSavePartialCollabDataSuccessfully(withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didSavePartialCollabDataFailedWithError(_ error: any Swift.Error, withUserID userID: Swift.String, withBookID bookID: Swift.String)
  @objc optional func didFetchFurthestPageDataSuccessfully(forBookID bookID: Foundation.NSNumber, withFurthestPageData furthestPageData: Swift.String)
  @objc optional func didFailedToFetchFurthestPageDataWithError(_ error: any Swift.Error, forBookID bookID: Foundation.NSNumber)
  @objc optional func didSaveFurthestPageDataSuccessfully(_ bookID: Foundation.NSNumber)
  @objc optional func didFailedToSaveFurthestPageDataWithError(_ error: any Swift.Error, forBookID bookID: Foundation.NSNumber)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class HDThemeManager_6_0 : ObjectiveC.NSObject {
  @objc public static let shared: Kitaboo_Reader_SDK.HDThemeManager_6_0
  @objc public var mediaTheme: Kitaboo_Reader_SDK.BookShelfThemeFor_V6_0?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class HDThemeReferer : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class KitabooReader : UIKit.UIViewController, UIKit.UIPageViewControllerDelegate, UIKit.UIPageViewControllerDataSource, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency public init(assetPath: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor @preconcurrency @objc public func pageViewController(_ pageViewController: UIKit.UIPageViewController, spineLocationFor orientation: UIKit.UIInterfaceOrientation) -> UIKit.UIPageViewController.SpineLocation
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willRotate(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didRotate(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func updateUGC(_ UGCs: [Any], onPageNo pageNo: Swift.Int)
}
extension Kitaboo_Reader_SDK.KitabooReader : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
}
@objc extension UIKit.UIColor {
  @objc public static var colorNameCache: Foundation.NSMutableDictionary?
  @objc dynamic public func colorSpaceModel() -> CoreGraphics.CGColorSpaceModel
  @objc dynamic public func colorSpaceString() -> Swift.String
  @objc dynamic public func canProvideRGBComponents() -> Swift.Bool
  @objc dynamic public func arrayFromRGBAComponents() -> [Foundation.NSNumber]?
  @objc dynamic public func red(_ red: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?, green: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?, blue: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?, alpha: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?) -> Swift.Bool
  @objc dynamic public func red() -> CoreFoundation.CGFloat
  @objc dynamic public func green() -> CoreFoundation.CGFloat
  @objc dynamic public func blue() -> CoreFoundation.CGFloat
  @objc dynamic public func white() -> CoreFoundation.CGFloat
  @objc dynamic public func alpha() -> CoreFoundation.CGFloat
  @objc dynamic public func rgbHex() -> Swift.UInt32
  @objc dynamic public func colorByLuminanceMapping() -> UIKit.UIColor?
  @objc dynamic public func colorByMultiplying(byRed red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByAdding(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByLightening(toRed red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByDarkening(toRed red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByMultiplying(by f: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByAdding(_ f: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByLightening(to f: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByDarkening(to f: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func colorByMultiplying(byColor color: UIKit.UIColor) -> UIKit.UIColor?
  @objc dynamic public func colorByAdding(color: UIKit.UIColor) -> UIKit.UIColor?
  @objc dynamic public func colorByLightening(toColor color: UIKit.UIColor) -> UIKit.UIColor?
  @objc dynamic public func colorByDarkening(toColor color: UIKit.UIColor) -> UIKit.UIColor?
  @objc dynamic public func stringFromColor() -> Swift.String?
  @objc dynamic public func hexStringFromColor() -> Swift.String
  @objc dynamic public class func colorWithString(_ stringToConvert: Swift.String) -> UIKit.UIColor?
  @objc dynamic public class func colorFromArray(_ colorInfo: [Any]) -> UIKit.UIColor?
  @objc dynamic public class func ios7Blue() -> UIKit.UIColor
  @objc dynamic public class func ios7Gray() -> UIKit.UIColor
  @objc dynamic public class func randomColor() -> UIKit.UIColor
  @objc dynamic public class func colorWithRGBHex(_ hex: Swift.UInt32) -> UIKit.UIColor
  @objc dynamic public class func colorWithHexString(_ stringToConvert: Swift.String) -> UIKit.UIColor?
  @objc dynamic public class func colorWithName(_ cssColorName: Swift.String) -> UIKit.UIColor?
  @objc public static let colorNameDB: Swift.String
  @objc dynamic public class func searchForColorByName(_ cssColorName: Swift.String) -> UIKit.UIColor?
}
@_inheritsConvenienceInitializers @objc(SDKBookClassInfo) public class SDKBookClassInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Swift.String {
  public static func ePUBStringFromUTCDate(_ date: Foundation.Date) -> Swift.String
  public static func ePUBStringFromDate(_ date: Foundation.Date) -> Swift.String
  public static func hsStringFromInteger(_ numberToConvert: Swift.UInt) -> Swift.String
  public static func hsStringFromDate(_ date: Foundation.Date) -> Swift.String
  public static func hsStringFromUTCDate(_ date: Foundation.Date) -> Swift.String
  public func hsDateFromString() -> Foundation.Date?
  public func hsUtcDateFromString() -> Foundation.Date?
  public func hsStringBetweenString(_ start: Swift.String, andString end: Swift.String) -> Swift.String?
  public func hsEncodeString(_ encoding: Swift.String.Encoding) -> Swift.String?
  public func hsIsEqualToStringIgnoreCase(_ aString: Swift.String) -> Swift.Bool
  public func hsStringByAppendingAndExcludingNullString(_ string: Swift.String, withSeparator separator: Swift.String) -> Swift.String
  public func hsNumberValue() -> Foundation.NSNumber
}
extension Foundation.Date {
  public static func ePUBUTCDateFromString(_ dateString: Swift.String) -> Foundation.Date?
  public static func ePUBDateFromString(_ dateString: Swift.String) -> Foundation.Date?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KitabooRenderingManager : ObjectiveC.NSObject {
  public func getNewTiledLayerDelegate(for pageToZoom: Foundation.NSNumber) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class TeacherReviewFibView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var fibVO: Kitaboo_Reader_SDK.SDKFIBVO?
  @objc @_Concurrency.MainActor @preconcurrency public var fibVOArray: [Kitaboo_Reader_SDK.SDKFIBVO]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol KitabooImageControllerDelegate : AnyObject {
  func didTapOnCloseForImageContoller()
  func didFailedLoadingImage()
  func didFailedLoadingImage(_ error: Foundation.NSError)
  func didLoadRemoteImage(_ position: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class KitabooImageController : UIKit.UIViewController, UIKit.UIScrollViewDelegate, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public static func setIsExternalResource(_ isExternalResource: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didRotate(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation)
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Kitaboo_Reader_SDK.KitabooImageController : Kitaboo_Reader_SDK.ImageDownloadTaskDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imageDownloaded(position: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imageDownloadingFailed(error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func setDownloadedImage(atPosition position: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func retryImageLoading()
}
extension Kitaboo_Reader_SDK.KitabooImageController {
  @_Concurrency.MainActor @preconcurrency convenience public init?(imageURLs: [Swift.String], properties: [Any], ISBN: Swift.String, isEncrypted: Swift.Bool, isZoomable: Swift.Bool, altText: Swift.String, tooltip: Swift.String, delegate: any Kitaboo_Reader_SDK.KitabooImageControllerDelegate)
  @_Concurrency.MainActor @preconcurrency convenience public init?(imageURLs: [Swift.String], properties: [Any], ISBN: Swift.String, isEncrypted: Swift.Bool, isZoomable: Swift.Bool, delegate: any Kitaboo_Reader_SDK.KitabooImageControllerDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willRotate(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didReceiveMemoryWarning()
}
@objc public protocol HDMediaBookTOCControllerDelegate {
  @objc optional func didTapOnChapterSegment()
  @objc optional func didTapOnTranscriptSegment()
  @objc optional func didTapOnBookmarkSegment()
  @objc optional func didTapOnChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO)
  @objc optional func didTapOnTranscript(_ transcriptVO: Kitaboo_Reader_SDK.HDMediaBookTranscriptVO)
  @objc optional func didTapOnBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnChapterPlayPause(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc optional func didTapOnBookmarkDelete(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
}
@objc public enum MediaBookTOCFilter : Swift.Int {
  case CHAPTER = 0, TRANSCRIPT, BOOKMARK
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class HDMediaBookTOCController : UIKit.UIViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDMediaBookTOCControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var selectedMode: Kitaboo_Reader_SDK.MediaBookTOCFilter
  @objc @_Concurrency.MainActor @preconcurrency public var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @_Concurrency.MainActor @preconcurrency open var chapterButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency open var transcriptButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency open var bookmarkButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency open var _dataArray: Foundation.NSArray?
  @_Concurrency.MainActor @preconcurrency open var lineViewTop2Constraint: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor @preconcurrency open var lineView2HeightConstraint: UIKit.NSLayoutConstraint
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency public func setData(_ data: Foundation.NSArray?)
  @_Concurrency.MainActor @preconcurrency open func addTheme()
  @_Concurrency.MainActor @preconcurrency open func configureSegmentView()
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func hideTranscript(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func hideBookmark(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func updateTOCForCurrentChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setPlayPauseState(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc @_Concurrency.MainActor @preconcurrency public func refresh()
  @objc @_Concurrency.MainActor @preconcurrency public func reloadBookmarkSection()
  @objc @_Concurrency.MainActor @preconcurrency open func actionForButton(sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency open func updateTabelViewCell(_ contentCell: Kitaboo_Reader_SDK.HDMediaBookTOCTableViewCell)
  @_Concurrency.MainActor @preconcurrency open func configureCell(at indexPath: Foundation.IndexPath, for contentCell: Kitaboo_Reader_SDK.HDMediaBookTOCTableViewCell, with chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO, and multiLevelData: Kitaboo_Reader_SDK.HDMultiLevelDataModel? = nil)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(KitabooUGC) public class KitabooUGC : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Operation) open class Operation : Foundation.Operation {
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override final public func start()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class ScreenSize : ObjectiveC.NSObject {
  public static let SCREEN_WIDTH: CoreFoundation.CGFloat
  public static let SCREEN_HEIGHT: CoreFoundation.CGFloat
  public static let SCREEN_MAX_LENGTH: CoreFoundation.CGFloat
  public static let SCREEN_MIN_LENGTH: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DeviceType : ObjectiveC.NSObject {
  public static let IS_IPHONE_6: Swift.Bool
  public static let IS_IPHONE_6P: Swift.Bool
  public static let IS_IPAD: Swift.Bool
  public static let IS_IPAD_MINI: Swift.Bool
  public static let IS_IPAD_PRO: Swift.Bool
  public static let IS_IPAD_PRO_12: Swift.Bool
  public static let IS_IPAD_AIR: Swift.Bool
  public static let IS_IPHONE_X: Swift.Bool
  public static let IS_IPHONE_X_series: Swift.Bool
  public static let IS_IPHONE_8: Swift.Bool
  public static let IS_IPHONE_8_PLUS: Swift.Bool
  public static let IS_IPHONE_11: Swift.Bool
  public static let IS_IPHONE_11_PRO: Swift.Bool
  public static let IS_IPHONE_11_PRO_MAX: Swift.Bool
  public static let IS_IPHONE_12: Swift.Bool
  public static let IS_IPHONE_12_PRO: Swift.Bool
  public static let IS_IPHONE_12_PRO_MAX: Swift.Bool
  public static let IS_IPHONE_12_MINI: Swift.Bool
  public static let IS_IPHONE_13: Swift.Bool
  public static let IS_IPHONE_13_PRO: Swift.Bool
  public static let IS_IPHONE_13_PRO_MAX: Swift.Bool
  public static let IS_IPHONE_13_MINI: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc extension AVKit.AVPlayerViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var subtitleLabel: UIKit.UILabel? {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addSubtitles()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func open(fileFromLocal filePath: Foundation.URL) throws
  @nonobjc @_Concurrency.MainActor @preconcurrency public func open(fileFromRemote filePath: Foundation.URL, encoding: Swift.String.Encoding = .utf8)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func show(subtitles string: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showByDictionary(dictionaryContent: Foundation.NSMutableDictionary)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addPeriodicNotification(parsedPayload: Foundation.NSDictionary)
}
public enum MultiLevelExpandStatus : Swift.Int {
  case collapsed
  case expanded
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class HDMultiLevelDataModel : ObjectiveC.NSObject {
  open var chapter: Kitaboo_Reader_SDK.HDMediaBookChapterVO?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SCORMData) public class SCORMData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HDVideoTOCVO) open class HDVideoTOCVO : ObjectiveC.NSObject {
  @objc open var videoSeekTime: Swift.String?
  @objc open var videoTitle: Swift.String?
  @objc open var videoThumbnailURL: Swift.String?
  @objc open var videoDescription: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HSParserDelegate {
  @objc optional func parsingDidBegin()
  @objc optional func parsingDidCompleted(_ book: Kitaboo_Reader_SDK.EPUBBookVO)
  @objc optional func parsingDidFailed(_ error: any Swift.Error)
  @objc optional func parsingDidUpdateWithPercentage(_ percentage: Swift.Int)
}
@_inheritsConvenienceInitializers @objc public class HSParser : ObjectiveC.NSObject, Kitaboo_Reader_SDK.HSOPFParserDelegate {
  @objc weak public var delegate: (any Kitaboo_Reader_SDK.HSParserDelegate)?
  @objc public var isbn: Swift.String
  @objc public func parseEPUB(_ path: Swift.String)
  @objc public func didOPFParsingUpdate(withPercentage progress: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KitabooRequest) open class KitabooRequest : ObjectiveC.NSObject {
  @objc open func registerUser(_ firstName: Swift.String, lastName: Swift.String, email: Swift.String, userName: Swift.String, password: Swift.String, accessCode: Swift.String) -> Foundation.URLRequest
  @objc open func validateAccessCode(userToken: Swift.String, withAccessCode accessCode: Swift.String) -> Foundation.URLRequest
  @objc open func authenticateUserWith(_ userName: Swift.String, password: Swift.String) -> Foundation.URLRequest
  @objc open func authenticateUserWith(_ userName: Swift.String, password: Swift.String, addUUID: Swift.Bool = false) -> Foundation.URLRequest
  @objc open func authenticateUserWithEncryptedPassword(_ userName: Swift.String, encryptedPassword: Swift.String, addUUID: Swift.Bool = false) -> Foundation.URLRequest
  @objc open func authenticateGoogleClassRoomUserWith(_ tokenSchema: [Swift.String : Any]) -> Foundation.URLRequest
  @objc open func changePasswordWith(_ userToken: Swift.String, existingPassword password: Swift.String, password newPassword: Swift.String, andUserName userName: Swift.String) -> Foundation.URLRequest
  @objc open func changePasswordWith(_ userToken: Swift.String, existingEncryptedPassword password: Swift.String, encryptedPassword newPassword: Swift.String, andUserName userName: Swift.String) -> Foundation.URLRequest
  @objc open func resetPasswordWith(userName: Swift.String) -> Foundation.URLRequest
  @objc open func bookClassInfo(_ userToken: Swift.String, bookIds: [Swift.String]) -> Foundation.URLRequest
  @objc open func forceUpdate(_ appVersion: Swift.String) -> Foundation.URLRequest
  @objc open func dowloadBookURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String) -> Foundation.URLRequest
  @objc open func dowloadBookOnlineURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, timeStamp: Swift.Int64) -> Foundation.URLRequest
  @objc open func downloadMediaBookURLWith(_ userToken: Swift.String, bookId: Swift.Int) -> Foundation.URLRequest
  @objc open func dowloadBookOnlineServerlessURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, timeStamp: Swift.Int64) -> Foundation.URLRequest
  @objc open func downloadMediaBookServerlessURLWith(_ userToken: Swift.String, bookId: Swift.Int) -> Foundation.URLRequest
  @objc open func authenticateHLSPackage(BaseURL baseURL: Swift.String, userToken: Swift.String, packageId: Swift.Int64, timeStamp: Swift.Int64) -> Foundation.URLRequest
  @objc open func consumeBookWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String) -> Foundation.URLRequest
  @objc open func releaseBookWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String) -> Foundation.URLRequest
  @objc open func fetchBookList(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func fetchBookListForCategory(userToken: Swift.String, startIndex: Swift.String?, endIndex: Swift.String?, categoryName: Swift.String, categoryId: Swift.String? = nil) -> Foundation.URLRequest
  @objc open func fetchBookListForCategoryV1(userToken: Swift.String, startIndex: Swift.String?, endIndex: Swift.String?, categoryName: Swift.String, categoryId: Swift.String? = nil) -> Foundation.URLRequest
  @objc open func fetchCategoryList(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func fetchCategoryListV1(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func fetchBooksForCollection(userToken: Swift.String, categoryName: Swift.String, collectionName: Swift.String, startIndex: Swift.String?, endIndex: Swift.String?, categoryId: Swift.String? = nil) -> Foundation.URLRequest
  @objc open func fetchRecentlyViewedBooks(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func downloadAllBooksUrl(userToken: Swift.String, state: Swift.String, bookList: [Swift.String : [Any]]) -> Foundation.URLRequest
  @objc open func deleteAllBooks(userToken: Swift.String, bookList: [Swift.String : [Any]]) -> Foundation.URLRequest
  @objc open func saveSessionHistory(userToken: Swift.String, sessionHistory: [Swift.String : [[Swift.String : Any]]]) -> Foundation.URLRequest
  @objc open func refreshBookList(userToken: Swift.String, bookIdAndTypeDict: [Swift.String : Any], timeStamp: Swift.String?) -> Foundation.URLRequest
  @objc open func fetchUserSettings(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func markFavourite(userToken: Swift.String, favoriteBook: [Swift.String : Any]) -> Foundation.URLRequest
  @objc open func fetchFavourite(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func unmarkFavourite(userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func fetchCollabUGC(_ userToken: Swift.String, bookId: Swift.String, timeStamp: Swift.String, bookVersion: Swift.String) -> Foundation.URLRequest
  @objc open func fetchCollabShare(_ userToken: Swift.String, bookId: Swift.String, timeStamp: Swift.String) -> Foundation.URLRequest
  @objc open func fetchUGC(_ userToken: Swift.String, bookId: Swift.String, timeStamp: Swift.String, bookVersion: Swift.String) -> Foundation.URLRequest
  @objc open func fetchTeacherAnnotations(_ userToken: Swift.String, bookId: Swift.String, timeStamp: Swift.String, bookVersion: Swift.String) -> Foundation.URLRequest
  @objc open func fetchStudentAnnotations(_ userToken: Swift.String, bookId: Swift.String, learnerId: Swift.String, timeStamp: Swift.String, bookVersion: Swift.String) -> Foundation.URLRequest
  @objc open func fetchKalturaURL(_ userToken: Swift.String, entryID: Swift.String, type: ObjectiveC.NSInteger) -> Foundation.URLRequest
  @objc open func registerDevice(_ userToken: Swift.String, body: Foundation.Data) -> Foundation.URLRequest
  @objc open func deRegisterDevice(_ userToken: Swift.String, body: Foundation.Data) -> Foundation.URLRequest
  @objc open func getNotifications(_ userToken: Swift.String, userId: Swift.String) -> Foundation.URLRequest
  @objc open func deleteNotification(_ userToken: Swift.String, userId: Swift.String) -> Foundation.URLRequest
  @objc open func markReadNotifications(_ userToken: Swift.String, userId: Swift.String, body: Foundation.Data) -> Foundation.URLRequest
  @objc open func saveUGCData(_ userToken: Swift.String, ugcData: Foundation.Data, bookId: Swift.String, timeStamp: Swift.String) -> Foundation.URLRequest
  @objc open func saveUGCData(_ userToken: Swift.String, ugcData: Foundation.Data, bookId: Swift.String, timeStamp: Swift.String, metaDataObject metaData: Kitaboo_Reader_SDK.KitabooServiceMetaData) -> Foundation.URLRequest
  @objc open func saveColllabData(_ userToken: Swift.String, collab: Foundation.Data, bookId: Swift.String, timeStamp: Swift.String) -> Foundation.URLRequest
  @objc open func saveColllabData(_ userToken: Swift.String, collab: Foundation.Data, bookId: Swift.String, timeStamp: Swift.String, metaDataObject metaData: Kitaboo_Reader_SDK.KitabooServiceMetaData) -> Foundation.URLRequest
  @objc open func saveHighlightData(_ userToken: Swift.String, highlight: Foundation.Data, bookId: Swift.String, timeStamp: Swift.String) -> Foundation.URLRequest
  @objc open func saveTrackingData(_ userToken: Swift.String, analytics: Foundation.Data, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func getAnalyticsData(_ userToken: Swift.String, bookId: Swift.String, classId: Foundation.NSNumber) -> Foundation.URLRequest
  @objc open func elasticSearchData(_ userToken: Swift.String, searchData: Foundation.Data) -> Foundation.URLRequest
  @objc open func newElasticSearchData(_ userToken: Swift.String, searchData: Foundation.Data) -> Foundation.URLRequest
  @objc open func bookLevelSearchData(_ userToken: Swift.String, searchData: Foundation.Data) -> Foundation.URLRequest
  @objc open func bookshelfStateData(_ userToken: Swift.String, feedBackData: Foundation.Data?, type: Swift.String) -> Foundation.URLRequest
  @objc open func updateUserDetails(_ userToken: Swift.String, profileData: Foundation.Data, coverData: Foundation.Data, firstName: Swift.String?, lastName: Swift.String?) -> Foundation.URLRequest
  @objc open func acceptRejectCollab(_ userToken: Swift.String, collabData: Foundation.Data) -> Foundation.URLRequest
  @objc open func saveTeacherAnnotations(_ userToken: Swift.String, annotations: Foundation.Data, bookId: Swift.String, timeStamp: Swift.String, learnerId: Swift.String) -> Foundation.URLRequest
  @objc open func submitAnotation(_ userToken: Swift.String, bookId: Swift.String, timeStamp: Swift.String) -> Foundation.URLRequest
  @objc open func fetchReadingSpeedInformation(userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func fetchLastPageAccessed(userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func fetchFurthestPage(userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func saveLastPageAccessed(userToken: Swift.String, bookId: Swift.String, lastPageData: Swift.String) -> Foundation.URLRequest
  @objc open func saveFurthestPageData(userToken: Swift.String, furthestPageData: Foundation.Data) -> Foundation.URLRequest
  @objc open func saveSCORMData(_ userToken: Swift.String, scormData: Foundation.Data, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func fetchSCORMData(_ userToken: Swift.String, bookId: Swift.String, classId: Swift.String) -> Foundation.URLRequest
  @objc open func fetchSCORMDataWithoutClass(_ userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func getBookDetails(_ userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func getBookDownload(_ userToken: Swift.String, bookId: Swift.String, assetType: Swift.String) -> Foundation.URLRequest
  @objc open func getTOCList(_ userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func getTOCListData(_ userToken: Swift.String) -> Foundation.URLRequest
  @objc open func getBookDetailsWithID(_ bookId: Swift.String, userToken: Swift.String) -> Foundation.URLRequest
  @objc open func packageURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String) -> Foundation.URLRequest
  @objc open func getBookDetailsSecured(_ userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func fetchRecentlyViewedBooksSecured(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func fetchBooksForCollectionSecured(userToken: Swift.String, categoryName: Swift.String, categoryId: Swift.String? = nil, collectionName: Swift.String, startIndex: Swift.String?, endIndex: Swift.String?) -> Foundation.URLRequest
  @objc open func fetchBookListForCategorySecured(userToken: Swift.String, startIndex: Swift.String?, endIndex: Swift.String?, categoryName: Swift.String, categoryId: Swift.String? = nil) -> Foundation.URLRequest
  @objc open func fetchFavouriteSecured(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func downloadAllBooksUrlSecured(userToken: Swift.String, state: Swift.String, bookList: [Swift.String : [Any]]) -> Foundation.URLRequest
  @objc open func refreshBookListSecured(userToken: Swift.String, bookIdAndTypeDict: [Swift.String : Any], timeStamp: Swift.String?) -> Foundation.URLRequest
  @objc open func refreshCategoryListSecured(_ userToken: Swift.String, categoryIdList: [Swift.String : Any]) -> Foundation.URLRequest
  @objc open func fetchPreferredLocale(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func savePreferredLocale(userToken: Swift.String, languageData: Foundation.Data) -> Foundation.URLRequest
  @objc open func fetchBookTOC(_ userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func fetchStudentMarkupReport(_ userToken: Swift.String, bookId: Swift.String, classID: Swift.String, chapterNumbers: Swift.String, email: Swift.String, userIDs: Swift.String) -> Foundation.URLRequest
  @objc open func getScreenshotCount(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func updateScreenshotCount(userToken: Swift.String, screenshotCount: Swift.Int) -> Foundation.URLRequest
  @objc open func getFetchsession(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func deleteSession(userToken: Swift.String, uuId: Swift.String) -> Foundation.URLRequest
  @objc open func deleteAllSession(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func getImmersiveReaderToken(userToken: Swift.String) -> Foundation.URLRequest
  @objc open func getPrintData(userToken: Swift.String, bookId: Swift.String) -> Foundation.URLRequest
  @objc open func savePrintData(userToken: Swift.String, lastPageData: [Swift.String : Swift.AnyObject], bookID: Swift.String) -> Foundation.URLRequest
  @objc open func getCustomePDFPages(userToken: Swift.String, lastPageData: [Swift.String : Swift.AnyObject], bookID: Swift.String) -> Foundation.URLRequest
  @objc deinit
}
extension Kitaboo_Reader_SDK.SCORMData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Kitaboo_Reader_SDK.SCORMData>
  @objc @NSManaged dynamic public var activityName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bookID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cmi__core: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSubmitted: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pageID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var scoId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addBorder(with color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addBoarderToRight(with color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addBoarderToLeft(with color: UIKit.UIColor) -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addBottomBorder(with colour: UIKit.UIColor) -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addBottomBorder(with colour: UIKit.UIColor, atYPostion yPos: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addTopBorder(with color: UIKit.UIColor) -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addDottedBottomBorder(with colour: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addDashedLineAtBottomOfView(with colour: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addVerticalDottedLine(with color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addShadowToView()
}
@_inheritsConvenienceInitializers @objc public class Utility : ObjectiveC.NSObject {
  public static func getDeviceID() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class KitabooDataSyncingManager : ObjectiveC.NSObject {
  public var delegate: (any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate)?
  public var microServicesBaseURLString: Swift.String
  public init(baseURLString: Swift.String, clientID: Swift.String)
  public func fetchUGC(for bookID: Foundation.NSNumber, for userID: Foundation.NSNumber, with delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, with userToken: Swift.String, and bookVersion: Swift.String)
  public func saveUGC(for userID: Foundation.NSNumber, with delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, with userToken: Swift.String)
  public func fetchUGCOperation(forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String, andBookVersion bookVersion: Swift.String)
  public func saveUGCOperation(for bookID: Foundation.NSNumber, for userID: Foundation.NSNumber, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String, withMetaData metaData: Kitaboo_Reader_SDK.KitabooServiceMetaData)
  public func synchUGC(for bookID: Foundation.NSNumber, userID: Foundation.NSNumber, delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, userToken: Swift.String, bookVersion: Swift.String)
  public func saveHighlightData(_ ShareAndRecieveDict: [Swift.String : Any], forBookID bookID: Foundation.NSNumber, forUserToken userToken: Swift.String)
  public func saveTrackingData(forBookID bookID: Foundation.NSNumber, forUserToken userToken: Swift.String, forUserId userID: Foundation.NSNumber, withMinimumTimeSpend timeSpendLimit: Swift.Int)
  public func saveTrackingData(forBookID bookID: Foundation.NSNumber, forUserToken userToken: Swift.String, forUserId userID: Foundation.NSNumber)
  public func acceptOrRejectCollab(_ ugcID: Swift.String, isAccepted accepted: Swift.Bool, forUserToken userToken: Swift.String)
  public func saveTeacherAnnotations(for annotationArray: [Any], forLearnerID learnerId: Swift.String, withBookID bookId: Foundation.NSNumber, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String)
  public func submitAnotation(forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String)
  public func submitAnotationOperation(forBookID bookID: Foundation.NSNumber, forUserID userID: Foundation.NSNumber, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String)
  public func saveScormBookData(forUserID userID: Foundation.NSNumber, bookID: Foundation.NSNumber, andClassId classId: Swift.String, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String)
  public func saveScormData(forUserID userID: Foundation.NSNumber, bookID: Foundation.NSNumber, andClassId classId: Swift.String, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String)
  public func saveScormData(withScormID scormID: Swift.String, forUserID userID: Foundation.NSNumber, withDelegate delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, withUserToken userToken: Swift.String)
  public func fetchAndSaveSormData(for userID: Foundation.NSNumber, bookID: Foundation.NSNumber, classId: Swift.String, with delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, userToken: Swift.String)
  public func saveUGCOperationPerBookID(_ bookID: Foundation.NSNumber, for userID: Foundation.NSNumber, with delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, userToken: Swift.String, metaData: Kitaboo_Reader_SDK.KitabooServiceMetaData)
  public func saveTrackingDataPerBookID(_ bookID: Foundation.NSNumber, with delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, userToken: Swift.String, userId userID: Foundation.NSNumber, minimumTimeSpend timeSpendLimit: Swift.Int)
  public func saveLastPageAccessed(lastPageFolio: Swift.String, bookId: Foundation.NSNumber, forUserToken userToken: Swift.String)
  public func fetchFurthestPageData(for bookID: Foundation.NSNumber, userID: Foundation.NSNumber, with delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, userToken: Swift.String)
  public func saveFurthestPageData(for userID: Foundation.NSNumber, with delegate: any Kitaboo_Reader_SDK.KitabooDataSyncingManagerDelegate, with userToken: Swift.String)
  @objc deinit
}
public typealias DataTaskCompletionHandler = (Kitaboo_Reader_SDK.NetworkDataTaskOperation?, Foundation.Data?, Foundation.HTTPURLResponse?, Foundation.NSError?) -> Swift.Void
@_hasMissingDesignatedInitializers @objc(NetworkDataTaskOperation) open class NetworkDataTaskOperation : Kitaboo_Reader_SDK.Operation, Foundation.URLSessionDataDelegate {
  @objc override dynamic open func cancel()
  @objc deinit
}
extension Kitaboo_Reader_SDK.NetworkDataTaskOperation {
  @objc dynamic public class func operationWithRequest(_ request: Foundation.URLRequest, withSession session: Foundation.URLSession, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc dynamic public class func operationWithRequest(_ request: Foundation.URLRequest, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc dynamic public class func operationWithURL(_ url: Foundation.URL, withSession session: Foundation.URLSession, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc dynamic public class func operationWithURL(_ url: Foundation.URL, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
}
extension Kitaboo_Reader_SDK.NetworkDataTaskOperation {
  @objc dynamic public class func sendRequest(_ request: Foundation.URLRequest, withSession session: Foundation.URLSession, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc dynamic public class func sendRequest(_ request: Foundation.URLRequest, withCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc dynamic public class func sendRequestWithURL(_ url: Foundation.URL, withSession session: Foundation.URLSession, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc dynamic public class func sendRequestWithURL(_ url: Foundation.URL, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
}
extension Kitaboo_Reader_SDK.NetworkDataTaskOperation {
  @objc dynamic public class func requestOperation(_ request: Foundation.URLRequest, withSession session: Foundation.URLSession, andCompletionHandler completionHandler: Kitaboo_Reader_SDK.DataTaskCompletionHandler? = nil) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
}
extension Kitaboo_Reader_SDK.NetworkDataTaskOperation {
  @objc dynamic public func responseData(_ completionHandler: @escaping Kitaboo_Reader_SDK.DataTaskCompletionHandler)
  @objc dynamic public func responseJSON(_ options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (_ operation: Kitaboo_Reader_SDK.NetworkDataTaskOperation?, _ response: Foundation.HTTPURLResponse?, _ json: Any?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func responseJSONWithResponseString(_ options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (_ operation: Kitaboo_Reader_SDK.NetworkDataTaskOperation?, _ response: Foundation.HTTPURLResponse?, _ json: Any?, _ error: Foundation.NSError?, _ responseString: Swift.String?) -> Swift.Void)
  public func responseString(_ encoding: Swift.String.Encoding? = String.Encoding.utf8, completionHandler: @escaping (Kitaboo_Reader_SDK.NetworkDataTaskOperation?, Foundation.HTTPURLResponse?, Swift.String?, Foundation.NSError?) -> Swift.Void)
  public func responseImage(_ encoding: Swift.String.Encoding? = String.Encoding.utf8, completionHandler: @escaping (Kitaboo_Reader_SDK.NetworkDataTaskOperation?, Foundation.HTTPURLResponse?, UIKit.UIImage?, Foundation.NSError?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc open class NumberLocalizationHandler : ObjectiveC.NSObject {
  @objc public static var languageCode: Swift.String
  @objc public static func setLanguageCodeForNumberLocalizationWithCode(code: Swift.String)
  @objc public static func localizeNumber(number: Any) -> Swift.String
  @objc public static func localizeNumber(number: Any, fractionalPoints: Swift.Int = 2) -> Swift.String
  @objc public static func localizeTime(time: Swift.String) -> Swift.String
  @objc public static func localizeTime(time: Swift.String, format: Swift.String = "mm:ss") -> Swift.String
  @objc public static func localizeNumberWithoutFormat(number: Any) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HighlightItemDelegate {
  @objc func didSelectItem(item: Kitaboo_Reader_SDK.HighlightItem)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class HighlightItem : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var itemAction: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency final public let singleTap: UIKit.UITapGestureRecognizer
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.HighlightItemDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var metaData: [Swift.String : Any]?
  @_Concurrency.MainActor @preconcurrency public var isSelected: Swift.Bool?
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool?
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func addItemActionButton(tapGesture: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor @preconcurrency public func setSelected(selected: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setEnabled(enabled: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func performActin()
  @objc deinit
}
@objc public protocol HDAudioBookPlayerViewController_6_0_Delegate : Kitaboo_Reader_SDK.HDAudioBookPlayerViewController_V6Delegate {
  @objc func didTapOnMuteMediaButton(_ mediaPlayer: Kitaboo_Reader_SDK.HDMediaBookModel)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class HDAudioBookPlayerViewController_6_0 : Kitaboo_Reader_SDK.HDAudioBookPlayerViewController_V6 {
  @_Concurrency.MainActor @preconcurrency open var isAudioBook: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var selectSleepButton: (() -> ())?
  @_Concurrency.MainActor @preconcurrency public var sleepButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency open var nextChapterButtonWidthConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency public func updateView()
  @_Concurrency.MainActor @preconcurrency public func setReadingSpeed(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @_Concurrency.MainActor @preconcurrency public var playerTopBarHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func addMainView()
  @_Concurrency.MainActor @preconcurrency override public func updateTheme()
  @_Concurrency.MainActor @preconcurrency public func addThumbnailView()
  @_Concurrency.MainActor @preconcurrency @objc override public func addSleepTimeView()
  @_Concurrency.MainActor @preconcurrency @objc override public func updateAudioThumbnail()
  @objc @_Concurrency.MainActor @preconcurrency public func setAudioThumbnailAccordingAspectRatio(img: UIKit.UIImage, imgView: UIKit.UIImageView)
  @_Concurrency.MainActor @preconcurrency public func addChapterView()
  @_Concurrency.MainActor @preconcurrency public func addSliderView()
  @_Concurrency.MainActor @preconcurrency override public func addMediaControlsView()
  @_Concurrency.MainActor @preconcurrency public func scrollUpTransactionForThumbnail(scrollPosition: CoreFoundation.CGFloat, isScrollUp: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func updateChapterNmConstraint()
  @_Concurrency.MainActor @preconcurrency @objc override public func updateChapterViewControlsFont()
  @objc @_Concurrency.MainActor @preconcurrency public func manageMarquee(scrollPosition: CoreFoundation.CGFloat, isScrollUp: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func startMarqueeAnimation()
  @objc @_Concurrency.MainActor @preconcurrency public func stopMarqueeAnimation()
  @_Concurrency.MainActor @preconcurrency override open func getChapterViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, centerX: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func getThumbnailConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, centerX: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency override open func getSliderViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency override open func getMediaControlViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc override public func updateConstraints()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func changeSleepButtonStatus(isSleepTimerOff: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency public func setPlayPauseState(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @_Concurrency.MainActor @preconcurrency @objc override public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDAudioBookPlayerViewController_V6 {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func changeSleepButtonStatus(isSleepTimerOff: Swift.Bool)
}
@objc public enum UGCStatus : Swift.Int {
  case unsaved = 0
  case new = 1
  case update = 2
  case delete = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TextAnnotationAlignment : Swift.Int {
  case left = 0
  case right = 1
  case center = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class UGC : ObjectiveC.NSObject {
  @objc public var ugcID: Swift.String
  @objc public var localID: Swift.String
  @objc public var createdDate: Foundation.Date?
  @objc public var modifiedDate: Foundation.Date?
  @objc public var chapterName: Swift.String
  @objc public var href: Swift.String
  @objc public var idref: Swift.String
  @objc public var isSynced: Swift.Bool
  @objc public var chapterID: Foundation.NSNumber?
  @objc public var status: Kitaboo_Reader_SDK.UGCStatus
  @objc public var pageIdentifier: Swift.String
  @objc public var displayNum: Swift.String
  @objc public var positionIdentifier: Swift.String?
  @objc public var bookVersion: Swift.String?
  @objc public func getDisplayDate() -> Swift.String
  @objc public func getUTCCreatedDate() -> Swift.String
  @objc public func getUTCModifiedDate() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKHighlightVO : Kitaboo_Reader_SDK.UGC {
  @objc public var text: Swift.String
  @objc public var startOffset: Foundation.NSNumber
  @objc public var endOffset: Foundation.NSNumber
  @objc public var noteText: Swift.String
  @objc public var noteComments: [[Swift.String : Any]]
  @objc public var sharedUsers: [Foundation.NSNumber]
  @objc public var creatorName: Swift.String
  @objc public var creatorID: Swift.Int
  @objc public var isImportant: Swift.Bool
  @objc public var isShare: Swift.Bool
  @objc public var isReceived: Swift.Bool
  @objc public var isAnswered: Swift.Bool
  @objc public var isCollabSubmitted: Swift.Bool
  @objc public var isTeacherReviewNote: Swift.Bool
  @objc public var textColor: Swift.String
  @objc public var backgroundColor: Swift.String
  @objc public var metaData: [Swift.String : Any]
  @objc public var isMultiNoteMember: Swift.Bool
  @objc public var multiNoteFrame: CoreFoundation.CGRect
  @objc public func isStickyNote() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKBookmarkVO : Kitaboo_Reader_SDK.UGC {
  @objc public var text: Swift.String?
  @objc public var startOffset: Foundation.NSNumber?
  @objc public var endOffset: Foundation.NSNumber?
  @objc public var creatorName: Swift.String?
  @objc public var creatorID: Swift.Int
  @objc public var metaData: [Swift.String : Any]?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKPentoolVO : Kitaboo_Reader_SDK.UGC {
  @objc public var colorCode: Swift.String?
  @objc public var penThickness: Foundation.NSNumber?
  @objc public var penToolPoints: [Swift.String]
  @objc public var penType: Foundation.NSNumber?
  @objc public var penToolData: [Swift.String : Any]?
  @objc public var isSubmitted: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKFIBVO : Kitaboo_Reader_SDK.UGC {
  @objc public var metaData: [Swift.String : Any]?
  @objc public var linkID: Foundation.NSNumber?
  @objc public var review: Foundation.NSNumber?
  @objc public var text: Swift.String?
  @objc public var answerStatus: Swift.String?
  @objc public var teacherComment: Swift.String?
  @objc public var commentCreatedDate: Foundation.Date?
  @objc public var commentModifiedDate: Foundation.Date?
  @objc public var isSubmitted: Swift.Bool
  @objc public var inputType: Foundation.NSNumber?
  @objc public var isEquation: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKTextAnnotationVO : Kitaboo_Reader_SDK.UGC {
  @objc public var metaData: [Swift.AnyHashable : Any]?
  @objc public var text: Swift.String?
  @objc public var fontName: Swift.String?
  @objc public var fontSize: Swift.Float
  @objc public var backgroundColor: Swift.String?
  @objc public var textColor: Swift.String?
  @objc public var textAlignment: Kitaboo_Reader_SDK.TextAnnotationAlignment
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKProtractorVO : Kitaboo_Reader_SDK.SDKPentoolVO {
  @objc public var protractorLineThickness: Swift.Float
  @objc override dynamic public init()
  @objc deinit
}
@objc(PlayerActionDelegate) public protocol PlayerActionDelegate {
  @objc optional func didSelectedPlayerActionBar(_ playerActionBar: Kitaboo_Reader_SDK.PlayerActionBar, withItem item: Kitaboo_Reader_SDK.PlayerActionBarItem)
  @objc optional func willResetPlayerActionBar(_ playerActionBar: Kitaboo_Reader_SDK.PlayerActionBar)
}
@objc public enum PlayerActionBarAlignment : Swift.Int {
  case left
  case right
  case center
  case top
  case bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PlayerActionBarAlignmentMode : Swift.Int {
  case PlayerActionBarHorizontalMode
  case PlayerActionBarVerticalMode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class PlayerActionBar : UIKit.UIView, Kitaboo_Reader_SDK.PlayerItemDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.PlayerActionDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func addActionBarItem(_ item: Kitaboo_Reader_SDK.PlayerActionBarItem, withItemsWidth width: Swift.Double, withItemAlignments alignment: Kitaboo_Reader_SDK.PlayerActionBarAlignment, isTappable tapable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func didPlayerActionBarSelectItem(_ item: Kitaboo_Reader_SDK.PlayerActionBarItem)
  @objc @_Concurrency.MainActor @preconcurrency public func resetPlayerActionBarSelection()
  @objc @_Concurrency.MainActor @preconcurrency public func enableItemWithTag(_ tag: Swift.Int, isEnabled enabled: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func hideItemWithTag(_ tag: Swift.Int, isHidden hidden: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func changeWidthOfItem(_ actionItem: Kitaboo_Reader_SDK.PlayerActionBarItem, withHidden hidden: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func getSelectedItem() -> Kitaboo_Reader_SDK.PlayerActionBarItem?
  @objc @_Concurrency.MainActor @preconcurrency public func getTappableItems() -> [Kitaboo_Reader_SDK.PlayerActionBarItem]
  @objc @_Concurrency.MainActor @preconcurrency public func setPlayerActionBarAlignmentMode(_ alignmentMode: Kitaboo_Reader_SDK.PlayerActionBarAlignmentMode)
  @objc deinit
}
extension Kitaboo_Reader_SDK.KitabooUGC {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Kitaboo_Reader_SDK.KitabooUGC>
  @objc @NSManaged dynamic public var bookID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdOn: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var creatorId: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var creatorName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayNum: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAnswered: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isCollabSubmitted: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isImportant: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isReceived: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isShare: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSubmitted: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSynced: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var linkID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var localID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metaData: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifiedDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pageID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var serverID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ugcData: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ugcType: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc public class BookShelfConstants : ObjectiveC.NSObject {
  @objc public static let Connecting: Swift.String
  @objc public static let Preparing: Swift.String
  @objc public static let Loading: Swift.String
  @objc public static let STARTED_DOWNLOADING: Swift.String
  @objc public static let FINISHED_DOWNLOADING: Swift.String
  @objc public static let ERROR_IN_DOWNLOADING: Swift.String
  @objc public static let PAUSED_DOWNLOADING: Swift.String
  @objc public static let NO_NETWORK: Swift.String
  @objc public static let HIDE_TOPBAR_BUTTONS: Swift.String
  @objc public static let SHOW_TOPBAR_BUTTONS: Swift.String
  @objc public static let BOOKSHELF_REFRESH_BUTTON: Swift.String
  @objc public static let BOOKPLAYER_BOOKMARK_BUTTON: Swift.String
  @objc public static let SHOW_PAGE_TRANSITION_VIEW: Swift.String
  @objc public static let NO_ACCOUNT_SIGN_UP_ENABLED: Swift.String
  @objc public static let PEN_TOOL_ENABLED: Swift.String
  @objc public static let PHONE_BOOKPLAYER_SEARCH_ENABLE: Swift.String
  @objc public static let TOC_SEGMENT_CTRL: Swift.String
  @objc public static let CHANGE_PASSWORD_LOADS_URL: Swift.String
  @objc public static let CHANGE_PROFILE_PICTURE_ENABLED: Swift.String
  @objc public static let READ_TO_ME_CLOSE_ICON_ENABLED: Swift.String
  @objc public static let OPEN_WEBACTIVITY_INSIDEAPP: Swift.String
  @objc public static let SIGNOUT_HELP_BUTTON: Swift.String
  @objc public static let SIGNOUT_BG_COLOR: Swift.String
  @objc public static let SIGNOUT_PROFILE_SETTINGS_BUTTON: Swift.String
  @objc public static let SIGNOUT_SIGN_OUT_BUTTON: Swift.String
  @objc public static let FORGOT_PASSWORD_VIEW_CLOSE_BUTTON: Swift.String
  @objc public static let SIDEBAR_NIB_VIEW: Swift.String
  @objc public static let SIDEBAR_SEPARATOR_VIEW: Swift.String
  @objc public static let SIDEBAR_SELECTED_CELL: Swift.String
  @objc public static let TOPBAR_BG_COLOR: Swift.String
  @objc public static let TOPBAR_ACCESSCODE_BTN: Swift.String
  @objc public static let BOTTOMBAR_SEGMENT_CONTROl: Swift.String
  @objc public static let COLLECTIONVIEWCELL_SELECTED_COLOR: Swift.String
  @objc public static let THUMBNAIL_TITLE_LABEL_ENABLED: Swift.String
  @objc public static let BOOKSHELF_VIEW_BG_COLOR: Swift.String
  @objc public static let HIGHLIGHT_COLOR0: Swift.String
  @objc public static let HIGHLIGHT_COLOR1: Swift.String
  @objc public static let HIGHLIGHT_COLOR2: Swift.String
  @objc public static let HIGHLIGHT_COLOR3: Swift.String
  @objc public static let HIGHLIGHT_TYPE: Swift.String
  @objc public static let AUDIO_TYPE: Swift.String
  @objc public static let ACCESS_CODE_MAX_LENGTH: Swift.Int
  @objc public static let USER_DEFAULT_CONFIG_DICTIONARY_KEY: Swift.String
  @objc public static let LMS_STUDENT_ID: Swift.String
  @objc public static let LMS_SCHOOL_ID: Swift.String
  @objc public static let LMS_SERVICE_URL: Swift.String
  @objc public static let LANGUAGE_OPTION: Swift.String
  @objc public static let PAGE_TRANSITION: Swift.String
  @objc public static let NOTIFIED_APP_INSTALLED: Swift.String
  @objc public static let DOWNLOAD_BUTTON_TAG: Swift.Int
  @objc public static let PAUSE_BUTTON_TAG: Swift.Int
  @objc public static let RESUME_BUTTON_TAG: Swift.Int
  @objc public static let BOOKSHELF_SCREENS_COMPONENT_COLOR: Swift.String
  @objc public static let BOOKSHELF_SCREENS_ICON_COLOR: Swift.String
  @objc public static let BOOKSHELF_SCREENS_COMPONENT_HIGHLIGHT_COLOR: Swift.String
  @objc public static let BOOKSHELF_SCREENS_TEXT_PLACEHOLDER_COLOR: Swift.String
  @objc public static let BOOKSHELF_SCREENS_TEXT_COLOR: Swift.String
  @objc public static let BOOKSHELF_SCREENS_DIVIDER_COLOR: Swift.String
  @objc public static let AUDIO_SYNC_QUE_COLOR: Swift.String
  @objc public static let READ_TO_ME_AUDIO_SYNC_COLOR: Swift.String
  @objc public static let HIDE_MARKUP_ICONS_FOR_READTOME: Swift.String
  @objc public static let SHOW_SIGNIN_TEXT_FOR_SIGIN_VIEW: Swift.String
  @objc public static let MARKUP_ICON_SIZE: Swift.String
  @objc public static let IPAD_PORTRAIT: Swift.String
  @objc public static let IPAD_LANDSCAPE: Swift.String
  @objc public static let IPHONE_PORTRAIT: Swift.String
  @objc public static let IPHONE_LANDSCAPE: Swift.String
  @objc public static let SHOW_PROFILE_EDIT_ICON: Swift.String
  @objc public static let LAUNCH_SCREEN_LAUNCH_TIME: Swift.String
  @objc public static let SHOW_READ_TO_ME_POPUP: Swift.String
  @objc public static let USE_OAUTH: Swift.String
  @objc public static let SHOW_iPHONE_BOOKPLAYER_ASPECTFIT: Swift.String
  @objc public static let BOOKSHELF_THUMBNAIL_ASPECTFIT: Swift.String
  @objc public static let CLOSE_AUDIOBAR_AFTER_PLAYING: Swift.String
  @objc public static let INLINE_VIDEO_ASPECT_FIT: Swift.String
  @objc public static let SHOW_HELP_SCREEN: Swift.String
  @objc public static let NEW_SIGN_IN_VIEW_ENABLED: Swift.String
  @objc public static let SHOW_PRINT_OPTION: Swift.String
  @objc public static let SHOW_LAST_NAME_IN_PROFILE_SETTINGS: Swift.String
  @objc public static let SHOW_PROTRACTOR_TOOL: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TextHighlightViewDelegate {
  @objc optional func didBeginPan()
  @objc optional func didEndPan(at targetFrame: CoreFoundation.CGRect, viewsDifference: CoreFoundation.CGFloat, presentStart: CoreFoundation.CGFloat, presentEnd: CoreFoundation.CGFloat, previousStart: CoreFoundation.CGFloat, previousEnd: CoreFoundation.CGFloat, startingTextSelectionPointY: CoreFoundation.CGFloat)
  @objc optional func didClickOnSaveButton()
  @objc optional func didClickOnNoteButton()
  @objc optional func didTapOutside()
  @objc optional func performSearch(for searchString: Swift.String)
  @objc optional func loadWebViewDictionary(with dicID: Swift.String, word: Kitaboo_Reader_SDK.PdfWordExtractVO, selectedWordDictionaryData: Foundation.Data)
  @objc optional func didClickONDeleteNoteButton()
  @objc optional func colorForTextSelectionView() -> UIKit.UIColor
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class TextHighlightView : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.TextHighlightViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var pageId: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public var maxWordsToHighlight: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public var isHighlightImportant: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public var extractionsDictionary: [Swift.Int : Kitaboo_Reader_SDK.PdfLineExtractVO] {
    @objc get
    @objc set(extractionsDictionary)
  }
  @objc @_Concurrency.MainActor @preconcurrency public func setHighlightColor(_ highlightColor: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public var highlightVO: Kitaboo_Reader_SDK.HighlightTool {
    @objc get
    @objc set(highlightVO)
  }
  @objc @_Concurrency.MainActor @preconcurrency public func didRecognizeLongPress(at longPressedPoint: CoreFoundation.CGPoint) -> Kitaboo_Reader_SDK.PdfWordExtractVO?
  @objc @_Concurrency.MainActor @preconcurrency public func saveHighlight()
  @objc @_Concurrency.MainActor @preconcurrency public func didClickOnDeleteButton()
  @objc @_Concurrency.MainActor @preconcurrency public func getTargetRectForShowingPopOverForStartLineRect(_ startLineRect: CoreFoundation.CGRect, andEndLineRect endLineRect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor @preconcurrency public func getSelectedStartWordIDAndEndWordID() -> [Swift.String : Swift.String]
  @objc @_Concurrency.MainActor @preconcurrency public func updateHighlight()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class CustomizeView : UIKit.UIView, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public init(With localUrl: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency @objc public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency open class HSEpubReflowableLaunchImageView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public init(image imageURL: Swift.String?, withBookTitle bookTitle: Swift.String?, bookAuthor: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func setThumbnailView()
  @objc @_Concurrency.MainActor @preconcurrency public func setWidth(_ width: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setViewWithShadow(_ view: UIKit.UIView?)
  @objc @_Concurrency.MainActor @preconcurrency public func setGradientTo(_ view: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc(FIBMathEquationViewDelegate) public protocol FIBMathEquationViewDelegate {
  @objc func showEquationEditorKeyboard(forLink link: Kitaboo_Reader_SDK.KFLinkVO, withFIBVO fibVO: Kitaboo_Reader_SDK.SDKFIBVO?)
  @objc func didSelectSubmittedEquation(_ fibVO: Kitaboo_Reader_SDK.SDKFIBVO?, withKFLinkVO link: Kitaboo_Reader_SDK.KFLinkVO, withSourceView sourceView: Kitaboo_Reader_SDK.FIBMathEquationView)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FIBMathEquationView) @_Concurrency.MainActor @preconcurrency open class FIBMathEquationView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.FIBMathEquationViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var fibVO: Kitaboo_Reader_SDK.SDKFIBVO?
  @objc @_Concurrency.MainActor @preconcurrency public var isTeacher: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public init(link: Kitaboo_Reader_SDK.KFLinkVO, equationTxt: Swift.String, isSubmited: Swift.Bool, frame: CoreFoundation.CGRect, isTeacher: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public init(link: Kitaboo_Reader_SDK.KFLinkVO, fibVO: Kitaboo_Reader_SDK.SDKFIBVO?, frame: CoreFoundation.CGRect, isTeacher: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public init(link: Kitaboo_Reader_SDK.KFLinkVO, fibVO: Kitaboo_Reader_SDK.SDKFIBVO?, frame: CoreFoundation.CGRect, useDefaultIcon: Swift.Bool, isTeacher: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency open func setThemeColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func focusToTextField()
  @objc deinit
}
@objc public protocol HSOPFParserDelegate {
  @objc optional func didOPFParsingUpdate(withPercentage progress: Swift.Float)
}
@_inheritsConvenienceInitializers @objc public class HSOPFParser : ObjectiveC.NSObject, Foundation.XMLParserDelegate {
  @objc public var rootPath: Swift.String
  @objc public var coverImagePath: Swift.String
  @objc public var epubMeta: Kitaboo_Reader_SDK.EPUBMeta
  @objc weak public var delegate: (any Kitaboo_Reader_SDK.HSOPFParserDelegate)?
  @objc public func parse(_ filePath: Swift.String, error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSError?>?)
  @objc public func parserDidStartDocument(_ parser: Foundation.XMLParser)
  @objc public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String])
  @objc public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc public func parser(_ parser: Foundation.XMLParser, foundCDATA CDATABlock: Foundation.Data)
  @objc public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class HDKitabooMediaPopOverModel : ObjectiveC.NSObject {
  @objc open var popOverTitle: Swift.String?
  @objc open var numberOfItems: Foundation.NSNumber?
  @objc open var itemsTitles: [Swift.String]?
  @objc open var itemFont: UIKit.UIFont?
  @objc open var selectedItem: Swift.String?
  @objc open var selectedItemColor: UIKit.UIColor?
  @objc open var customItemTitles: [Swift.String]?
  @objc open var customItemFont: UIKit.UIFont?
  @objc open var popOverSourceView: UIKit.UIView?
  @objc open var enableSwitchControl: Swift.Bool
  @objc open var switchState: Swift.Bool
  @objc open var switchTintColor: UIKit.UIColor?
  @objc open var switchLabelText: Swift.String?
  @objc open var switchLabelFont: UIKit.UIFont?
  @objc open var enableDefaultCustomisedController: Swift.Bool
  @objc open var enableCustomController: Swift.Bool
  @objc open var enableCustomControllerRightArrow: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HDKitabooMediaPopOverControllerDelegate {
  @objc optional func didTapOnItem(_ itemTitle: Swift.String)
  @objc optional func didChangeSwitchState(_ isOn: Swift.Bool)
  @objc optional func didTapOnCancelItem()
}
@objc @_Concurrency.MainActor @preconcurrency open class HDKitabooMediaPopOverController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency open var delegate: (any Kitaboo_Reader_SDK.HDKitabooMediaPopOverControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaPopOverModel: Kitaboo_Reader_SDK.HDKitabooMediaPopOverModel)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDKitabooMediaPopOverController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension Kitaboo_Reader_SDK.HDKitabooMediaPopOverController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
@objc public protocol GenerateReportChapterTableViewCellDelegate {
  @objc func didTapOnNodeButton(_ indexPath: Foundation.IndexPath?)
}
public class Subtitles {
  public init(file filePath: Foundation.URL, encoding: Swift.String.Encoding = .utf8) throws
  public init(content: Swift.String) throws
  public init(subtitles string: Swift.String) throws
  public func searchSubtitles(at time: Foundation.TimeInterval) -> Swift.String?
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class HDReachability {
  public typealias NetworkReachable = (Kitaboo_Reader_SDK.HDReachability) -> ()
  public typealias NetworkUnreachable = (Kitaboo_Reader_SDK.HDReachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Kitaboo_Reader_SDK.HDReachability.NetworkStatus, b: Kitaboo_Reader_SDK.HDReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Kitaboo_Reader_SDK.HDReachability.Connection, b: Kitaboo_Reader_SDK.HDReachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: Kitaboo_Reader_SDK.HDReachability.NetworkReachable?
  public var whenUnreachable: Kitaboo_Reader_SDK.HDReachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Kitaboo_Reader_SDK.HDReachability.Connection {
    get
  }
  public var connection: Kitaboo_Reader_SDK.HDReachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDReachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc public protocol HighlightActionViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func didSelectItem(_ item: Kitaboo_Reader_SDK.HighlightItem)
  @objc optional func didUpdatedHighlight()
  @objc optional func didHighlightClosed()
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class HighlightActionView : UIKit.UIView, Kitaboo_Reader_SDK.HighlightItemDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public init(itemSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func addHighlightItem(_ view: Kitaboo_Reader_SDK.HighlightItem)
  @objc @_Concurrency.MainActor @preconcurrency public func observeValue(for keyPath: Swift.String, of object: Any, change: [Foundation.NSKeyValueChangeKey : Any], context: Swift.UnsafeMutableRawPointer)
  @_Concurrency.MainActor @preconcurrency @objc public func didSelectItem(item: Kitaboo_Reader_SDK.HighlightItem)
  @objc @_Concurrency.MainActor @preconcurrency public func resetHighlightSelection()
  @objc @_Concurrency.MainActor @preconcurrency public func remove()
  @objc @_Concurrency.MainActor @preconcurrency public var itemSize: CoreFoundation.CGSize
  @objc @_Concurrency.MainActor @preconcurrency public var pageNumber: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public var highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO?
  @objc @_Concurrency.MainActor @preconcurrency public var highlightItems: [Kitaboo_Reader_SDK.HighlightItem]?
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HighlightActionViewDelegate)?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class HDMediaBookTOCTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency open var timeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var dataLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconBtn: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconBtnWidth: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var iconBtnHeight: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var dataLabelLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var timeLabelLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var iconBtnTrailingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc(HDDropDownDelegate) public protocol HDDropDownDelegate {
  @objc func didSelectItem(name: Swift.String)
}
@objc(HDDropDownController) @_Concurrency.MainActor @preconcurrency open class HDDropDownController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.HDDropDownDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(dataArray: [Swift.String], dropDownFrame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didReceiveMemoryWarning()
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDDropDownController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
extension Kitaboo_Reader_SDK.BookSyncInfo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Kitaboo_Reader_SDK.BookSyncInfo>
  @objc @NSManaged dynamic public var bookID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bookMetaData: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSynced: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastSyncDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objc(EquationEditorKeyboardViewControllerDelegate) public protocol EquationEditorKeyboardViewControllerDelegate {
  @objc func changeEquationKeyboardToNormalForLink(_ link: Kitaboo_Reader_SDK.KFLinkVO, FIBVO: Kitaboo_Reader_SDK.SDKFIBVO?, withEnterText text: Swift.String)
  @objc func saveEquationEditorForLink(_ link: Kitaboo_Reader_SDK.KFLinkVO, FIBVO: Kitaboo_Reader_SDK.SDKFIBVO?, _ text: Swift.String)
  @objc func closeEquationEditor()
}
@objc(EquationEditorKeyboardViewController) @_Concurrency.MainActor @preconcurrency open class EquationEditorKeyboardViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate, UIKit.UIScrollViewDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.EquationEditorKeyboardViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var link: Kitaboo_Reader_SDK.KFLinkVO
  @objc @_Concurrency.MainActor @preconcurrency public var fibVO: Kitaboo_Reader_SDK.SDKFIBVO!
  @objc @_Concurrency.MainActor @preconcurrency public var latex: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var posY: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public init(eqfibVO: Kitaboo_Reader_SDK.SDKFIBVO)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class KitabooFixedParser : ObjectiveC.NSObject {
  public func getPDFBookPath(path: Swift.String, pageID: Swift.Int) -> Foundation.NSDictionary
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HDVideoBookPlayerViewController_V6Delegate {
  @objc optional func didTapOnVideoBookmark()
  @objc optional func didTapOnVideoPlayPause(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc optional func didTapOnVideoNarrationSpeed(_ button: UIKit.UIButton)
  @objc optional func didTapOnVideoForward()
  @objc optional func didTapOnVideoRewind()
  @objc optional func didTapOnVideoNextChapter()
  @objc optional func didTapOnVideoPreviousChapter()
  @objc optional func didVideoSeekBarValueChanged()
  @objc optional func didTapOnVideoMute(_ isMute: Swift.Bool)
  @objc optional func didTapOnVideoBack()
  @objc optional func didTapOnVideoFullScreen(_ isFullScreen: Swift.Bool)
  @objc optional func didTapOnSubtitleView(_ enabled: Swift.Bool)
  @objc optional func didTapOnVideoMoreOptions(_ view: UIKit.UIView)
  @objc optional func didTapOnVideoView(_ enableControls: Swift.Bool)
}
@objc public enum VideoPlayerViewStateUpdate_V6 : Swift.Int {
  case kVideoUpdatePlayPauseState = 0, kVideoUpdateReadingSpeed, kVideoUpdateCurrentTime
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class HDVideoBookPlayerViewController_V6 : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDVideoBookPlayerViewController_V6Delegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @_Concurrency.MainActor @preconcurrency public var controlPanelView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?, withVideoPlayer videoPlayer: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency open func bookmarkButtonTapped(_ sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor @preconcurrency public func hideControlWithDelay()
  @objc @_Concurrency.MainActor @preconcurrency public func didTapOnViewww()
  @objc @_Concurrency.MainActor @preconcurrency public func setViewFullScreenForIphone()
  @objc @_Concurrency.MainActor @preconcurrency public func updatePlayerView(_ state: Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate_V6, mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func hideBookmark(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disableNextChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disablePreviousChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency open func disableBookmark(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setSubtitleViewState(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableDisbleMuteButton(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setSubtitleViewColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteAllBookmarks(_ bookmarksVO: [Kitaboo_Reader_SDK.SDKBookmarkVO])
  @objc @_Concurrency.MainActor @preconcurrency public func addBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func isVideoReadyToPlay(_ isLoaded: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func updateViewOnOrientationChange()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
@objc public protocol HDVideoBookPlayerViewControllerDelegate {
  @objc optional func didTapOnVideoBookmark()
  @objc optional func didTapOnVideoPlayPause(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc optional func didTapOnVideoNarrationSpeed(_ button: UIKit.UIButton)
  @objc optional func didTapOnVideoForward()
  @objc optional func didTapOnVideoRewind()
  @objc optional func didTapOnVideoNextChapter()
  @objc optional func didTapOnVideoPreviousChapter()
  @objc optional func didVideoSeekBarValueChanged()
  @objc optional func didTapOnVideoMute(_ isMute: Swift.Bool)
  @objc optional func didTapOnVideoBack()
  @objc optional func didTapOnVideoFullScreen(_ isFullScreen: Swift.Bool)
  @objc optional func didTapOnSubtitleView(_ enabled: Swift.Bool)
  @objc optional func didTapOnVideoMoreOptions(_ view: UIKit.UIView)
  @objc optional func didTapOnVideoView(_ enableControls: Swift.Bool)
}
@objc public enum VideoPlayerViewStateUpdate : Swift.Int {
  case kVideoUpdatePlayPauseState = 0, kVideoUpdateReadingSpeed, kVideoUpdateCurrentTime
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class HDVideoBookPlayerViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDVideoBookPlayerViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?, withVideoPlayer videoPlayer: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency open func bookmarkButtonTapped(_ sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor @preconcurrency public func setViewFullScreenForIphone()
  @objc @_Concurrency.MainActor @preconcurrency public func updatePlayerView(_ state: Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate, mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func hideBookmark(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disableNextChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disablePreviousChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency open func disableBookmark(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setSubtitleViewState(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableDisbleMuteButton(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setSubtitleViewColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteAllBookmarks(_ bookmarksVO: [Kitaboo_Reader_SDK.SDKBookmarkVO])
  @objc @_Concurrency.MainActor @preconcurrency public func addBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func isVideoReadyToPlay(_ isLoaded: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func updateViewOnOrientationChange()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
@objc(HDBookDownloaderManagerDelegate) public protocol HDBookDownloaderManagerDelegate {
  @objc func bookDownloadRequestDidUpdateProgress(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func bookDownloadRequestDidPopulatedInterruptedTasks(_ bookDownloadDetail: [Kitaboo_Reader_SDK.HDBookDownloadDetails])
  @objc optional func bookDownloadRequestStarted(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func bookDownloadRequestDidPaused(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func didPauseAllDownloads()
  @objc optional func bookDownloadRequestDidResumed(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func bookDownloadRequestDidRetry(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func bookDownloadRequestCanceled(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func bookDownloadRequestFinished(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func bookDownloadRequestDidFailedWithError(_ error: Foundation.NSError, bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String)
  @objc optional func bookDownloadRequestDestinationDoestNotExists(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, bookID: Swift.String, location: Foundation.URL)
}
@_inheritsConvenienceInitializers @objc(HDBookDownloaderManager) public class HDBookDownloaderManager : ObjectiveC.NSObject {
  @objc public class func shared() -> Kitaboo_Reader_SDK.HDBookDownloaderManager
  @objc deinit
  @objc override dynamic public init()
}
extension Kitaboo_Reader_SDK.HDBookDownloaderManager {
  public func updateProgress(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func interruptedTasks(_ bookDownloadDetail: [Kitaboo_Reader_SDK.HDBookDownloadDetails])
  public func started(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func paused(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func allDownloadsPaused()
  public func resumed(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func retry(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func canceled(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func finished(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func failedWithError(_ error: Foundation.NSError, bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int)
  public func destinationDoestNotExists(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDBookDownloadDetails, index: Swift.Int, location: Foundation.URL)
}
extension Kitaboo_Reader_SDK.HDBookDownloaderManager {
  @objc dynamic public func downloadBook(_ bookId: Swift.String, bookDownloadURL: Swift.String, delegate: any Kitaboo_Reader_SDK.HDBookDownloaderManagerDelegate, downloadPath: Swift.String)
  @objc dynamic public func pauseBookDownload(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDBookDownloaderManagerDelegate)
  @objc dynamic public func resumeBookDownload(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDBookDownloaderManagerDelegate)
  @objc dynamic public func setDelegateForBook(delegate: any Kitaboo_Reader_SDK.HDBookDownloaderManagerDelegate, bookID: Swift.String)
  @objc dynamic public func retryBookDownload(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDBookDownloaderManagerDelegate)
  @objc dynamic public func getDownloadDetails(_ bookID: Swift.String) -> Kitaboo_Reader_SDK.HDBookDownloadDetails?
  @objc dynamic public func getDownloadingBooks() -> Swift.Array<Kitaboo_Reader_SDK.HDBookDownloadDetails>?
  @objc dynamic public func pauseAllDownlaods(delegate: any Kitaboo_Reader_SDK.HDBookDownloaderManagerDelegate)
  @objc dynamic public func inProgressDownloadCount() -> Swift.Int
  @objc dynamic public func cancelBookDownload(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDBookDownloaderManagerDelegate)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HighlightTool : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(data: [Swift.String : Any])
  @objc public func setBookGuid(_ bookGuid: Foundation.NSNumber)
  @objc public func setStartLineId(_ startLineId: Foundation.NSNumber)
  @objc public func setCreatedOn(_ creationTime: Swift.String)
  @objc public func setModifiedOn(_ modifiedTime: Swift.String)
  @objc public func setEndLineId(_ endLineId: Foundation.NSNumber)
  @objc public func setStartWordId(_ startWordId: Foundation.NSNumber)
  @objc public func setEndWordId(_ endWordId: Foundation.NSNumber)
  @objc public func setHighlightUUID(_ highlightUUID: Swift.String)
  @objc public func setHighlightColor(_ highlightColor: Swift.String)
  @objc public func setHighlightedText(_ highlightedText: Swift.String)
  @objc public func setIsImportant(_ isImportant: Swift.Bool)
  @objc public func setDeleted(_ deleted: Swift.Bool)
  @objc public func setIsNote(_ isNote: Swift.Bool)
  @objc public func setIsSynced(_ isSynced: Swift.Bool)
  @objc public func setIsShared(_ isShared: Swift.Bool)
  @objc public func setNoteText(_ noteText: Swift.String)
  @objc public func setNoteType(_ noteType: Foundation.NSNumber)
  @objc public func setNoteXPosition(_ noteXPosition: Foundation.NSNumber)
  @objc public func setNoteYPosition(_ noteYPosition: Foundation.NSNumber)
  @objc public func setPageNumber(_ pageNumber: Foundation.NSNumber)
  @objc public func setCommentsArray(_ commentsArray: [[Swift.String : Any]])
  @objc public func setChapterTitle(_ chapterTitle: Swift.String)
  @objc public func setChapterNumber(_ chapterNumber: Foundation.NSNumber)
  @objc public func setCreatorId(_ creatorId: Foundation.NSNumber)
  @objc public func setDateTime(_ dateTime: Swift.String)
  @objc public func setIsAnswered(_ isAnswered: Swift.Bool)
  @objc public func setSharedWithUsersArray(_ sharedWithUsersArray: [Foundation.NSNumber])
  @objc public func setIsReceived(_ isReceived: Swift.Bool)
  @objc public func setIsCollabSubmitted(_ isCollabSubmitted: Swift.Bool)
  @objc public func setCreatorName(_ userName: Swift.String)
  @objc public func getBookGuid() -> Foundation.NSNumber
  @objc public func getEndLineId() -> Foundation.NSNumber
  @objc public func getEndWordId() -> Foundation.NSNumber
  @objc public func getHighlightedColor() -> Swift.String
  @objc public func getHighlightedText() -> Swift.String
  @objc public func isNote() -> Swift.Bool
  @objc public func isSynced() -> Swift.Bool
  @objc public func isImportant() -> Swift.Bool
  @objc public func isDeleted() -> Swift.Bool
  @objc public func getNoteText() -> Swift.String
  @objc public func getNoteType() -> Foundation.NSNumber
  @objc public func getCreatedOn() -> Swift.String
  @objc public func getModifiedOn() -> Swift.String
  @objc public func getNoteXPosition() -> Foundation.NSNumber
  @objc public func getNoteYPosition() -> Foundation.NSNumber
  @objc public func getPageNumber() -> Foundation.NSNumber
  @objc public func getStartLineId() -> Foundation.NSNumber
  @objc public func getStartWordId() -> Foundation.NSNumber
  @objc public func getServerId() -> Swift.String
  @objc public func getHighlightedUUID() -> Swift.String
  @objc public func getCommentsArray() -> [[Swift.String : Any]]
  @objc public func getChapterNumber() -> Foundation.NSNumber
  @objc public func getChapterTitle() -> Swift.String
  @objc public func getCreatorId() -> Foundation.NSNumber
  @objc public func isShared() -> Swift.Bool
  @objc public func isAnswered() -> Swift.Bool
  @objc public func isReceived() -> Swift.Bool
  @objc public func isCollabSubmitted() -> Swift.Bool
  @objc public func getSharedWithUsersArray() -> [Foundation.NSNumber]
  @objc public func getIconString() -> Swift.String
  @objc public func isStickyNote() -> Swift.Bool
  @objc public func getDateTime() -> Swift.String
  @objc public func getCreatorName() -> Swift.String
  @objc public func updateComments(_ comments: [[Swift.String : Any]])
  @objc public func setIsUpdate(_ isUpdate: Swift.Bool)
  @objc public func getIsUpdate() -> Swift.Bool
  @objc public func setIsNewhighlightCreated(_ isNewHighlightCreated: Swift.Bool)
  @objc public func getIsNewhighlightCreated() -> Swift.Bool
  @objc public func setIsNoteAlreadyShared(_ isNoteShared: Swift.Bool)
  @objc public func getIsNoteAlreadyShared() -> Swift.Bool
  @objc public func setServerID(_ serverID: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class RTLorLTRFlowLayoutForUICollectionView : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public protocol HDMediaBookPlayerDelegate {
  @objc optional func playerPlaying(currentTime: Swift.Int, totalTime: Swift.Int)
  @objc optional func playerDidFinishPlaying()
  @objc optional func playerFailedToPlay(error: any Swift.Error)
  @objc optional func playerDidChangeState(mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency open class HDMediaBookPlayer : UIKit.UIView, AVFoundation.AVAssetResourceLoaderDelegate {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDMediaBookPlayerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @objc @_Concurrency.MainActor @preconcurrency public var itemStoppedPlaying: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var isAudioSample: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var currentSelectedSubtitle: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var currentSelectedAudio: Swift.String? {
    @objc get
  }
  @available(iOS 11.0, *)
  @objc @_Concurrency.MainActor @preconcurrency public var currentSelectedQuality: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func getPlayerLayerView() -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency public func play(chapter chapterModel: Kitaboo_Reader_SDK.HDMediaBookChapterVO? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func playToSeekTime(_ value: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func stop()
  @objc @_Concurrency.MainActor @preconcurrency public func pause()
  @objc @_Concurrency.MainActor @preconcurrency public func mute(_ isAudioMute: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setReadingSpeed(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc @_Concurrency.MainActor @preconcurrency public func playForwardWithTime(_ time: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func playBackwardWithTime(_ time: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func navigateToChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO, withSeekTime seekTime: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func navigateToBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func getSeekTime() -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDMediaBookPlayer {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func changeMediaLanguage(_ audioType: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func changeMediaSubtitle(_ subtitle: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func changeVideoQuality(_ option: Swift.String)
}
@objc(GlossaryResourceType) public enum GlossaryResourceType : Swift.Int {
  case kGlossaryResourceTypeAudio = 0
  case kGlossaryResourceTypeVideo = 1
  case kGlossaryResourceTypeImage = 2
  case kGlossaryResourceTypeURL = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(GlossaryViewControllerDelegate) public protocol GlossaryViewControllerDelegate {
  @objc func didSelectGlossaryItem(WithType selectedType: Kitaboo_Reader_SDK.GlossaryResourceType, withPath resorcePath: Swift.String)
}
@_inheritsConvenienceInitializers @objc(GlossaryViewController) @_Concurrency.MainActor @preconcurrency open class GlossaryViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.GlossaryViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency open var glossaryItem: Kitaboo_Reader_SDK.KFGlossaryVO?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setColorsForGlossaryView(iconColor: UIKit.UIColor, iconBorderColor: UIKit.UIColor, alphabetTextColor: UIKit.UIColor, keyWordTextColor: UIKit.UIColor, descriptionTextColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(InfomationPopOverContentViewController) @_Concurrency.MainActor @preconcurrency open class InfomationPopOverContentViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency open var instructionTextViewTopConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor @preconcurrency open func setInstructionText(_ instruction: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency open func setInstructionTextFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor @preconcurrency open func setInstructionTextBackgroundColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency open func getInstructionTextSize() -> CoreFoundation.CGSize
  @objc @_Concurrency.MainActor @preconcurrency open func getInstructionTextLineHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Kitaboo_Reader_SDK.InfomationPopOverContentViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func setLinkVo(_ link: Kitaboo_Reader_SDK.KFLinkVO)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func getLinkVo() -> Kitaboo_Reader_SDK.KFLinkVO?
}
@_inheritsConvenienceInitializers @objc public class HDMediaBookTranscriptVO : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKFontName : ObjectiveC.NSObject {
  @objc public static let HELVETICA_FONT_LIGHT: Swift.String
  @objc public static let HELVETICA_FONT_REGULAR: Swift.String
  @objc public static let HELVETICA_FONT_BOLD: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKIconFont : ObjectiveC.NSObject {
  @objc public static let ICON_ALERT: Swift.String
  @objc public static let ICON_BOOKSHELF: Swift.String
  @objc public static let ICON_TOC: Swift.String
  @objc public static let ICON_MYDATA: Swift.String
  @objc public static let ICON_SEARCH: Swift.String
  @objc public static let ICON_HIGHLIGHTER_K12: Swift.String
  @objc public static let ICON_HIGHLIGHT: Swift.String
  @objc public static let ICON_TAPPABLE_STICKY_NOTE: Swift.String
  @objc public static let ICON_STICKY_NOTE: Swift.String
  @objc public static let ICON_THUMBNAIL: Swift.String
  @objc public static let ICON_ASSESSMENT: Swift.String
  @objc public static let ICON_AUDIO: Swift.String
  @objc public static let ICON_VIDEO1: Swift.String
  @objc public static let ICON_IMAGE1: Swift.String
  @objc public static let ICON_ACTIVITY: Swift.String
  @objc public static let ICON_ANIMATION: Swift.String
  @objc public static let ICON_WEBLINK: Swift.String
  @objc public static let ICON_JUMP_TO_SCREEN: Swift.String
  @objc public static let TOC_BOOKMARK_NORMAL_ICON: Swift.String
  @objc public static let ICON_BOOKMARK_SELECTED: Swift.String
  @objc public static let ICON_EDIT_CATEGORY: Swift.String
  @objc public static let ICON_DOWNLOAD: Swift.String
  @objc public static let ICON_PENTOOL: Swift.String
  @objc public static let ICON_ADD_NOTES: Swift.String
  @objc public static let ICON_FIT_HORIZONTAL: Swift.String
  @objc public static let ICON_FIT_VERTICAL: Swift.String
  @objc public static let ICON_ZOOM_IN: Swift.String
  @objc public static let ICON_ZOOM_OUT: Swift.String
  @objc public static let ICON_FIT_TO_SCREEN: Swift.String
  @objc public static let ICON_PRINT: Swift.String
  @objc public static let ICON_SETTING_OUTLINE: Swift.String
  @objc public static let ICON_DELETE_OUTLINE: Swift.String
  @objc public static let ICON_IMPORTANT: Swift.String
  @objc public static let ICON_ADD_SHELF: Swift.String
  @objc public static let ICON_CHECK: Swift.String
  @objc public static let ICON_Tick: Swift.String
  @objc public static let ICON_PREV_PAGE_ICON: Swift.String
  @objc public static let ICON_NEXT: Swift.String
  @objc public static let ICON_HISTORY_PREV: Swift.String
  @objc public static let ICON_HISTORY_NEXT: Swift.String
  @objc public static let ICON_MEDIA_PAUSE: Swift.String
  @objc public static let ICON_MEDIA_PLAY: Swift.String
  @objc public static let ICON_MEDIA_STOP: Swift.String
  @objc public static let ICON_CMENU_END_TAG: Swift.String
  @objc public static let ICON_CMENU_START_TAG: Swift.String
  @objc public static let ICON_BACK: Swift.String
  @objc public static let ICON_CLEAR: Swift.String
  @objc public static let NEXT_ICON: Swift.String
  @objc public static let ICON_SINGLE_PAGE_VIEW: Swift.String
  @objc public static let ICON_TWO_PAGE_VIEW: Swift.String
  @objc public static let NOTE_AUDIO_ICON: Swift.String
  @objc public static let NOTE_IMAGE_ICON: Swift.String
  @objc public static let NOTE_TEXT_ICON: Swift.String
  @objc public static let NOTE_VIDEO_ICON: Swift.String
  @objc public static let DELETE_BOOK_ICON: Swift.String
  @objc public static let SYNC_ICON: Swift.String
  @objc public static let ANALYTICS_ICON: Swift.String
  @objc public static let MYDATA_ICON01: Swift.String
  @objc public static let ICON_FIT_TO_ACTUAL: Swift.String
  @objc public static let VIDEO_PLAYER_CLOSE_ICON: Swift.String
  @objc public static let STATISTIC_CLOSE_ICON: Swift.String
  @objc public static let STATISTIC_LAUNCH_ICON: Swift.String
  @objc public static let VIDEO_PLAYER_DRAG_HANDLE_ICON: Swift.String
  @objc public static let CLOSE_ICON: Swift.String
  @objc public static let ADD_ICON: Swift.String
  @objc public static let ICON_MOVE_SHELF_UP: Swift.String
  @objc public static let ICON_MOVE_SHELF_DOWN: Swift.String
  @objc public static let ICON_CHECK_SHARE: Swift.String
  @objc public static let EDIT_MENU_ICON: Swift.String
  @objc public static let BRUSH_ICON: Swift.String
  @objc public static let DONE_ICON: Swift.String
  @objc public static let ERASER_ICON: Swift.String
  @objc public static let CIRCLE_TICK: Swift.String
  @objc public static let EXPAND_POP_ICON: Swift.String
  @objc public static let COLLAPSE_POP_ICON: Swift.String
  @objc public static let HIGHLIGHT_SORT_ICON: Swift.String
  @objc public static let EXPAND_ICON: Swift.String
  @objc public static let ICON_FORWARD: Swift.String
  @objc public static let ICON_BACKWARD: Swift.String
  @objc public static let COLLAPSE_ICON: Swift.String
  @objc public static let ICON_SIGNIN_NEW: Swift.String
  @objc public static let TEACHER_ICON: Swift.String
  @objc public static let STUDENT_ICON: Swift.String
  @objc public static let TEACHER_ANNOTATION_ICON: Swift.String
  @objc public static let CLOUD_UPLOAD_ICON: Swift.String
  @objc public static let MOVE_SHELF_UP_ICON: Swift.String
  @objc public static let MOVE_SHELF_DOWN_ICON: Swift.String
  @objc public static let DELETE_SHELF_ICON: Swift.String
  @objc public static let EBOOK_DOWNLOAD_ICON: Swift.String
  @objc public static let POPOUT_ICON: Swift.String
  @objc public static let MULTIFILE_ICON: Swift.String
  @objc public static let COMMENT_ICON: Swift.String
  @objc public static let HTMLWRAP_ICON: Swift.String
  @objc public static let TOC_MENU_ICON: Swift.String
  @objc public static let BOOK_COVER_ICON: Swift.String
  @objc public static let COLLECTION_COVER_ICON: Swift.String
  @objc public static let LEFT_ARROW_MARK_ICON: Swift.String
  @objc public static let DOWN_ARROW_ICON: Swift.String
  @objc public static let UPLOAD_ICON: Swift.String
  @objc public static let ERASE_ICON: Swift.String
  @objc public static let CLOSE_NOTE_ICON: Swift.String
  @objc public static let NO_RESOURCE_ICON: Swift.String
  @objc public static let DOWNLOAD_BOOK_ICON: Swift.String
  @objc public static let INFO_ICON: Swift.String
  @objc public static let ACCESS_CODE_ICON: Swift.String
  @objc public static let SLIDE_SHOW_ICON: Swift.String
  @objc public static let KITABOO_LOGO_ICON: Swift.String
  @objc public static let TEXT_SETTINGS_ICON: Swift.String
  @objc public static let BACK_CIRCLE_ICON: Swift.String
  @objc public static let NEXT_CIRCLE_ICON: Swift.String
  @objc public static let CHAPTER_NEXT_ICON: Swift.String
  @objc public static let CHAPTER_PREV_ICON: Swift.String
  @objc public static let COLOR_PICKER_ICON: Swift.String
  @objc public static let IMPORTANT_ICON: Swift.String
  @objc public static let ARCHIVE_ICON: Swift.String
  @objc public static let KITABOO_TEXT_LOGO_ICON: Swift.String
  @objc public static let STUDENT_TEACHER_ICON: Swift.String
  @objc public static let PREVIEW_ICON: Swift.String
  @objc public static let SEND_ARROW_ICON: Swift.String
  @objc public static let PAGE_SESSION_ICON: Swift.String
  @objc public static let TOTAL_READING_SESSION_ICON: Swift.String
  @objc public static let READING_TIME_ICON: Swift.String
  @objc public static let PREVIEW_HIDE_ICON: Swift.String
  @objc public static let ICON_SHARE: Swift.String
  @objc public static let DRAG_AND_DROP_SEQUENCING_VERTICAL_ICON: Swift.String
  @objc public static let ICON_COMMENT: Swift.String
  @objc public static let PAGE_CURL_ICON: Swift.String
  @objc public static let PAGE_TRANSITION_ICON: Swift.String
  @objc public static let ICON_ACCORDION_ACTIVITY: Swift.String
  @objc public static let ICON_ACCORDION_TEXT_AND_GRAPHIC: Swift.String
  @objc public static let BEAT_THE_CLOCK_ICON: Swift.String
  @objc public static let BULLET_IMAGE_LR_ICON: Swift.String
  @objc public static let CAROUSEL_ICON: Swift.String
  @objc public static let ICON_CASE_STUDY_WITH_TABS_TF_AND_MCQ_IN_T: Swift.String
  @objc public static let CATEGORISE_BOTTOM_ICON: Swift.String
  @objc public static let CATEGORISE_RIGHT_ICON: Swift.String
  @objc public static let ICON_CLICK_TO_REVEAL_BULLETED_TEXT: Swift.String
  @objc public static let ICON_CLICK_TO_REVEAL_TEXT_ON_TOP: Swift.String
  @objc public static let ICON_CLICK_TO_REVEAL_TEXT_IMAGE_GRID_WITH_POPUP: Swift.String
  @objc public static let ICON_CLICK_TO_REVEAL_HORIZONTAL_TEXT_IMAGE_GRID_WITH_POPUP: Swift.String
  @objc public static let CONCENTRATION_ICON: Swift.String
  @objc public static let CROSSWORD_ICON: Swift.String
  @objc public static let ICON_DD_HOT_SPOT_70_CHARS: Swift.String
  @objc public static let ICON_DD_HOT_SPOT_150_CHARS: Swift.String
  @objc public static let DECISION_TREE_ICON: Swift.String
  @objc public static let ICON_DRAG_AND_DROP_SEQUENCING_TIMELINE: Swift.String
  @objc public static let ICON_DRAG_AND_DROP_SORTING: Swift.String
  @objc public static let ICON_FILL_IN_THE_BLANK_DROP_DOWN: Swift.String
  @objc public static let ICON_FILL_IN_THE_BLANK_INPUT_TYPE: Swift.String
  @objc public static let ICON_FLASH_CARDS_MCQ: Swift.String
  @objc public static let ICON_FLASH_CARDS: Swift.String
  @objc public static let ICON_GENERIC: Swift.String
  @objc public static let ICON_HANGMAN: Swift.String
  @objc public static let ICON_HOTSPOT_CLICK_TO_REVEAL: Swift.String
  @objc public static let ICON_IMAGE_ON_RIGHT_TEXT_ON_LEFT: Swift.String
  @objc public static let ICON_IMAGE_ON_TOP_TEXT_ON_BOTTOM: Swift.String
  @objc public static let ICON_IMAGE_ON_BOTTOM_TEXT_ON_TOP: Swift.String
  @objc public static let ICON_IMAGES_AT_TOP_RIGHT_BOTTOM_LEFT: Swift.String
  @objc public static let ICON_MATCH_THE_PAIRS_VERTICAL: Swift.String
  @objc public static let ICON_JOURNAL: Swift.String
  @objc public static let ICON_JUMBLED_WORDS_MHOL: Swift.String
  @objc public static let ICON_IMAGES_ON_RIGHT_AND_TEXT_ON_LEFT: Swift.String
  @objc public static let ICON_LAYOUT_FOUR: Swift.String
  @objc public static let ICON_LAYOUT_ONE: Swift.String
  @objc public static let ICON_LAYOUT_THREE: Swift.String
  @objc public static let ICON_LAYOUT_TWO: Swift.String
  @objc public static let ICON_MATCH_THE_PAIRS_DRAW_LINES: Swift.String
  @objc public static let TRUE_OR_FALSE_ICON: Swift.String
  @objc public static let WORDS_SEARCH_ICON: Swift.String
  @objc public static let ICON_VIDEO_2: Swift.String
  @objc public static let ICON_VIDEO_WITH_INTERACTIVITY: Swift.String
  @objc public static let ICON_TABBED_TABLE: Swift.String
  @objc public static let ICON_MULTIPLE_CHOICE_SINGLE_SELECT: Swift.String
  @objc public static let ICON_TEXT_CENTER_INLINE: Swift.String
  @objc public static let ICON_MULTIPLE_CHOICE_MULTIPLE_SELECT: Swift.String
  @objc public static let ICON_MATCH_THE_PAIRS: Swift.String
  @objc public static let ICON_OVERFLOW: Swift.String
  @objc public static let ICON_GALLERY_2: Swift.String
  @objc public static let ICON_IMAGE_2: Swift.String
  @objc public static let ICON_MIC: Swift.String
  @objc public static let ICON_VIDEO_3: Swift.String
  @objc public static let ICON_BACK_ARROW_BUTTON: Swift.String
  @objc public static let ICON_SURVEY: Swift.String
  @objc public static let ICON_GLOSSARY: Swift.String
  @objc public static let ICON_JUMP_TO_BOOK: Swift.String
  @objc public static let ICON_PORTO_REFRESH: Swift.String
  @objc public static let ICON_IMAGE_ZOOM: Swift.String
  @objc public static let ICON_MINIMIZE: Swift.String
  @objc public static let ICON_DRAG: Swift.String
  @objc public static let ICON_NAME_EDIT: Swift.String
  @objc public static let ICON_PROTRACTOR: Swift.String
  @objc public static let READ_TO_ME_LET_ME_READ: Swift.String
  @objc public static let READ_TO_ME_READ_TO_ME: Swift.String
  @objc public static let READ_TO_ME_AUTOPLAY: Swift.String
  @objc public static let ICON_EQUATION_EDITOR: Swift.String
  @objc public static let ICON_EQUATION_EDITOR_NEW: Swift.String
  @objc public static let ICON_SETTINGS_BRIGHTNESS: Swift.String
  @objc public static let ICON_MUTE_AUDIO: Swift.String
  @objc public static let ICON_BACK_ARROW: Swift.String
  @objc public static let ICON_NEXT_CHAPTER: Swift.String
  @objc public static let ICON_PREV_CHAPTER: Swift.String
  @objc public static let ICON_FORWARD_AUDIOBOOK: Swift.String
  @objc public static let ICON_BACKWARD_AUDIOBOOK: Swift.String
  @objc public static let ICON_BOOKMARK_AUDIOBOOK: Swift.String
  @objc public static let ICON_BOOKMARK_ADDED_AUDIOBOOK: Swift.String
  @objc public static let ICON_DELETE_AUDIOBOOK: Swift.String
  @objc public static let ICON_CIRCULAR_PLAY: Swift.String
  @objc public static let ICON_VIDEO_FULLSCREEN: Swift.String
  @objc public static let ICON_VIDEO_NORMALSCREEN: Swift.String
  @objc public static let ICON_VIDEO_MUTE: Swift.String
  @objc public static let ICON_VIDEO_UMMUTE: Swift.String
  @objc public static let ICON_FORWARD_AUDIOBOOK_30SEC: Swift.String
  @objc public static let ICON_BACKWARD_AUDIOBOOK_30SEC: Swift.String
  @objc public static let ICON_FORWARD_AUDIOBOOK_15SEC: Swift.String
  @objc public static let ICON_BACKWARD_AUDIOBOOK_15SEC: Swift.String
  @objc public static let ICON_SLEEP_MODE: Swift.String
  @objc public static let ICON_RADIO_SELECTED: Swift.String
  @objc public static let ICON_RADIO_UNSELECTED: Swift.String
  @objc public static let ICON_MULTILEVEL_CHAPTER_DROP_DOWN: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class HDIconFontConstants : ObjectiveC.NSObject {
  @objc public static func setFontName(_ fontName: Swift.String)
  @objc public static func getFontName() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class HDReflowableLayoutSettingsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var resetReaderSetting: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDReflowableLayoutSettingsViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension Kitaboo_Reader_SDK.ReaderAnalytics {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Kitaboo_Reader_SDK.ReaderAnalytics>
  @objc @NSManaged dynamic public var analyticsData: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bookID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSync: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userID: Swift.String? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
open class HDAVAssetTaskDetails : ObjectiveC.NSObject {
  @objc open var assetM3U8Name: Swift.String?
  @objc open var aggregateTask: AVFoundation.AVAggregateAssetDownloadTask?
  @objc open var assetDownloadedURLPath: Foundation.URL?
  @objc open var assetURL: Foundation.URL?
  @objc open var avURLAsset: AVFoundation.AVURLAsset?
  @objc open var taskLoadedDuration: Swift.Float
  @objc open var taskTotalDuration: Swift.Float
  @objc open var taskProgress: Swift.Float
  open var assetIsDownloaded: Swift.Bool?
  @objc open var taskDownloadState: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 11.0, *)
@objc(HDAVAssetDownloadDetails) open class HDAVAssetDownloadDetails : Kitaboo_Reader_SDK.HDBookDownloadDetails {
  @objc open var assetTaskDetails: [Kitaboo_Reader_SDK.HDAVAssetTaskDetails]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HDMediaBookBookmarkControllerDelegate {
  @objc optional func didTapOnAddBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnDeleteBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnCancelBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO?)
}
@objc @_Concurrency.MainActor @preconcurrency open class HDMediaBookBookmarkController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency open var _bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO?
  @objc @_Concurrency.MainActor @preconcurrency open var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @objc @_Concurrency.MainActor @preconcurrency weak open var delegate: (any Kitaboo_Reader_SDK.HDMediaBookBookmarkControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?, bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func addBookMarkAlert()
  @objc deinit
}
@objc public protocol AudioSyncControllerDelegate {
  @objc optional func didJumpToText(withFrame frame: CoreFoundation.CGRect, pageIdentifier: Swift.String)
  @objc optional func didJumpToSentence(withWordFrames wordFrames: [Any], pageIdentifier: Swift.String)
  @objc optional func didFailedAudioSync(_ error: any Swift.Error)
  @objc optional func didJumpToText(withWordId wordId: Swift.String, pageIdentifier: Swift.String)
  @objc optional func audioSyncDidComplete()
  @objc optional func audioSyncDidStop()
  @objc optional func audioSyncDidPause()
  @objc optional func audioSyncDidComplete(forPageIdentifier pageIdentifier: Swift.String)
  @objc optional func updateProgressSliderbarAndElapsedTime()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class AudioSyncController : ObjectiveC.NSObject, UIKit.UIGestureRecognizerDelegate, AVFAudio.AVAudioPlayerDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.AudioSyncControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(links: [Any], delegate: any Kitaboo_Reader_SDK.AudioSyncControllerDelegate, book: Kitaboo_Reader_SDK.KFBookVO, playerUIEnabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public init(links: [Any], delegate: any Kitaboo_Reader_SDK.AudioSyncControllerDelegate, book: Kitaboo_Reader_SDK.KitabooBookVO, playerUIEnabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public init(links: [Any], delegate: any Kitaboo_Reader_SDK.AudioSyncControllerDelegate, book: Kitaboo_Reader_SDK.KitabooBookVO, pageId: Swift.String, playerUIEnabled: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func playPauseAction()
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func start()
  @_Concurrency.MainActor @preconcurrency public func resume()
  @objc @_Concurrency.MainActor @preconcurrency public func pause()
  @_Concurrency.MainActor @preconcurrency public func stop()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func audioPlayingForPageIdentifier() -> Swift.String?
  @_Concurrency.MainActor @preconcurrency public func isPlaying() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func changeAudioPlayingSpeed(_ speed: Swift.Float)
  @_Concurrency.MainActor @preconcurrency public func playAudio(fromWordId wordId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func playAudioFromWordRect(_ wordRect: CoreFoundation.CGRect, andWordText wordText: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func getAudioPlayer() -> AVFAudio.AVAudioPlayer?
  @_Concurrency.MainActor @preconcurrency public func moveToNextAudioSync()
  @_Concurrency.MainActor @preconcurrency public func moveToPrevAudioSync()
  @objc @_Concurrency.MainActor @preconcurrency public func updateProgressBarValue()
  @_Concurrency.MainActor @preconcurrency @objc public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(SDKBookInfo) public class SDKBookInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc public enum WatermarkPosition : ObjectiveC.NSInteger {
  case topLeft = 0
  case topCenter
  case topRight
  case bottomLeft
  case bottomCenter
  case bottomRight
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class WatermarkHolderView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency open func showWatermark()
  @objc @_Concurrency.MainActor @preconcurrency open func hideWatermark()
  @objc @_Concurrency.MainActor @preconcurrency open func setWatermarkHolderViewPosition(_ position: Kitaboo_Reader_SDK.WatermarkPosition)
  @objc @_Concurrency.MainActor @preconcurrency open func getWatermarkHolderViewPosition() -> Kitaboo_Reader_SDK.WatermarkPosition
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class UGCConstants : ObjectiveC.NSObject {
  @objc public static let TYPE_HIGHLIGHT: Swift.Int
  @objc public static let TYPE_PENTOOL: Swift.Int
  @objc public static let TYPE_BOOKMARK: Swift.Int
  @objc public static let TYPE_FIB: Swift.Int
  @objc public static let TYPE_PROTRACTOR: Swift.Int
  @objc public static let USER_ID_KEY: Swift.String
  @objc public static let DELETED_KEY: Swift.String
  @objc public static let IS_SYNCED_KEY: Swift.String
  @objc public static let IS_SUBMITTED_KEY: Swift.String
  @objc public static let BOOK_GUIID_KEY: Swift.String
  @objc public static let CHAPTER_NUMBER_KEY: Swift.String
  @objc public static let CHAPTER_TITLE_KEY: Swift.String
  @objc public static let PAGE_ID_KEY: Swift.String
  @objc public static let COLOUR_CODE_KEY: Swift.String
  @objc public static let SERVER_ID_KEY: Swift.String
  @objc public static let DATETIME_KEY: Swift.String
  @objc public static let DISPLAY_NUM_KEY: Swift.String
  @objc public static let PEN_TYPE_KEY: Swift.String
  @objc public static let BOOKMARK_UNIQUE_KEY: Swift.String
  @objc public static let BOOKMARK_TEXT_KEY: Swift.String
  @objc public static let HAS_NOTE_KEY: Swift.String
  @objc public static let IS_IMPORTANT_KEY: Swift.String
  @objc public static let NOTE_TYPE_KEY: Swift.String
  @objc public static let IS_SHARED: Swift.String
  @objc public static let NOTE_TEXT_KEY: Swift.String
  @objc public static let NOTE_COMMENTS_KEY: Swift.String
  @objc public static let HIGHLIGHTED_TEXT: Swift.String
  @objc public static let CREATOR_NAME: Swift.String
  @objc public static let START_LINE_KEY: Swift.String
  @objc public static let END_LINE_KEY: Swift.String
  @objc public static let NOTEX_POS_KEY: Swift.String
  @objc public static let NOTEY_POS_KEY: Swift.String
  @objc public static let CREATED_BY: Swift.String
  @objc public static let CREATOR_ID: Swift.String
  @objc public static let COLLAB_CREATOR_FIRST_NAME: Swift.String
  @objc public static let COLLAB_CREATOR_LAST_NAME: Swift.String
  @objc public static let COLLAB_CREATOR_USERNAME: Swift.String
  @objc public static let IS_ANSWERED: Swift.String
  @objc public static let ACTION_TAKEN: Swift.String
  @objc public static let SHARED_WITH_USERS: Swift.String
  @objc public static let CREATION_TIME: Swift.String
  @objc public static let IS_COLLAB_SUBMITTED: Swift.String
  @objc public static let IS_RECEIVED: Swift.String
  @objc public static let NOTE_SHARED: Swift.String
  @objc public static let PEN_CORDINATES: Swift.String
  @objc public static let PEN_THICKNESS: Swift.String
  @objc public static let PEN_TOOL_DATA: Swift.String
  @objc public static let LOCALID: Swift.String
  @objc public static let CREATED_ON: Swift.String
  @objc public static let ID: Swift.String
  @objc public static let UGC_DATA: Swift.String
  @objc public static let STATUS: Swift.String
  @objc public static let PAGE_ID: Swift.String
  @objc public static let LOCAL_ID: Swift.String
  @objc public static let TYPE: Swift.String
  @objc public static let METADATA: Swift.String
  @objc public static let IMPORTANT: Swift.String
  @objc public static let New: Swift.String
  @objc public static let Update: Swift.String
  @objc public static let Delete: Swift.String
  @objc public static let CHAPTER_NAME: Swift.String
  @objc public static let CHAPTER_ID: Swift.String
  @objc public static let DELETED: Swift.String
  @objc public static let STARTWORD_INDEX: Swift.String
  @objc public static let ENDWORD_INDEX: Swift.String
  @objc public static let ISIMPORTANT: Swift.String
  @objc public static let X_POSITION: Swift.String
  @objc public static let Y_POSITION: Swift.String
  @objc public static let TEXT: Swift.String
  @objc public static let COMMENTS: Swift.String
  @objc public static let USER_ID: Swift.String
  @objc public static let DISPLAY_NAME: Swift.String
  @objc public static let DATE: Swift.String
  @objc public static let LINE_COLOR: Swift.String
  @objc public static let LINE_WIDTH: Swift.String
  @objc public static let LINE_STYLE: Swift.String
  @objc public static let PATH_POINTS: Swift.String
  @objc public static let LINK_ID: Swift.String
  @objc public static let REVIEW: Swift.String
  @objc public static let IS_SYNCED: Swift.String
  @objc public static let SERVER_SUBMITTED_KEY: Swift.String
  @objc public static let PEN_TYPE: Swift.String
  @objc public static let PROTRACTOR_TOOL_DATA: Swift.String
  @objc public static let PAGE_IDENTIFIER: Swift.String
  @objc public static let UPDATE_BADGE_NOTIFICATION: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ThumbnailDelegate {
  @objc func didSelectThumbnailPageNo(_ pageNo: Swift.String)
  @objc func didSelectActionToCloseThumbnail()
  @objc func didClickPreviousHistoryButtonWithCurrentPageNumber()
  @objc func didClickNextHistoryButtonWithCurrentPageNumber()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class ThumbnailViewController : UIKit.UIViewController, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UIGestureRecognizerDelegate, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
}
@available(iOS 11.0, *)
@objc(HDAVAssetDownloaderManagerDelegate) public protocol HDAVAssetDownloaderManagerDelegate {
  @objc optional func didPauseAllAVAssetDownloads()
  @objc optional func didDeleteDownloadedAVAsset(bookID: Swift.String)
  @objc optional func didDownloadRequestStateUpdateForAVAsset(_ bookDownloadDetail: Kitaboo_Reader_SDK.HDAVAssetDownloadDetails, bookID: Swift.String)
  @objc optional func didDownloadRequestFailForAVAsset(_ error: Foundation.NSError, bookDownloadDetail: Kitaboo_Reader_SDK.HDAVAssetDownloadDetails, bookID: Swift.String)
}
@_inheritsConvenienceInitializers @available(iOS 11.0, *)
@objc(HDAVAssetDownloaderManager) public class HDAVAssetDownloaderManager : ObjectiveC.NSObject {
  @objc public class func shared() -> Kitaboo_Reader_SDK.HDAVAssetDownloaderManager
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 11.0, *)
extension Kitaboo_Reader_SDK.HDAVAssetDownloaderManager {
  @objc dynamic public func downloadAVAsset(_ bookId: Swift.String, bookDownloadURLs: [Foundation.URL], delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate)
  @objc dynamic public func pauseAVAsset(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate)
  @objc dynamic public func resumeAVAsset(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate)
  @objc dynamic public func setDelegateForAVAsset(delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate, bookID: Swift.String)
  @objc dynamic public func retryAVAssetDownload(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate)
  @objc dynamic public func getAVAssetDetails(_ bookID: Swift.String) -> Kitaboo_Reader_SDK.HDAVAssetDownloadDetails?
  @objc dynamic public func getAllAVAssetDetails() -> Swift.Array<Kitaboo_Reader_SDK.HDAVAssetDownloadDetails>?
  @objc dynamic public func pauseAllAVAsset(delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate)
  @objc dynamic public func inProgressAVAssetDownloadCount() -> Swift.Int
  @objc dynamic public func cancelAVAsset(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate)
  @objc dynamic public func deleteAVAsset(_ bookId: Swift.String, delegate: any Kitaboo_Reader_SDK.HDAVAssetDownloaderManagerDelegate)
  @objc dynamic public func isAVAssetDownloaded(_ bookId: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KitabooAnalyticsAdapter : ObjectiveC.NSObject {
  @objc deinit
}
public enum kTextSearchResultType : Swift.Int {
  case kTextSearchResultTypePage
  case kTextSearchResultTypeWord
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum kTextSearchCaseType : Swift.Int {
  case kCaseInsensitiveSearch
  case kCaseSensitiveSearch
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol TextSearchControllerDelegate {
  @objc optional func didSelectSearchText(_ searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @objc optional func didSelectActionForCloseSearch()
  @objc optional func didSearchTextChanged()
  @objc optional func didCompleteSearchDecryption()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TextSearchController : UIKit.UIViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var _delegate: (any Kitaboo_Reader_SDK.TextSearchControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(book: Kitaboo_Reader_SDK.KitabooBookVO, searchText: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init(book: Kitaboo_Reader_SDK.KitabooBookVO)
  @_Concurrency.MainActor @preconcurrency public init(book: Kitaboo_Reader_SDK.KitabooBookVO, searchText: Swift.String, searchResultType: Kitaboo_Reader_SDK.kTextSearchResultType)
  @_Concurrency.MainActor @preconcurrency public init(book: Kitaboo_Reader_SDK.KitabooBookVO, searchText: Swift.String, searchResultType: Kitaboo_Reader_SDK.kTextSearchResultType, searchCaseType: Kitaboo_Reader_SDK.kTextSearchCaseType)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func setSearchTextViewBackgroundColor(_ backgroundColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setSearchTextBorderColor(_ borderColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func isSearchResultAvailable() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func getSearchResultForText(_ searchText: Swift.String, withOffset offset: Swift.Int, withBatchSize batchSize: Swift.Int) -> [Kitaboo_Reader_SDK.TextSearchResult]
  @_Concurrency.MainActor @preconcurrency public func getSearchResultForText(_ searchText: Swift.String) -> [Kitaboo_Reader_SDK.TextSearchResult]
  @_Concurrency.MainActor @preconcurrency public func getSearchResultForText(_ searchText: Swift.String, forFont font: UIKit.UIFont, withOffset offset: Swift.Int, withBatchSize batchSize: Swift.Int) -> [Kitaboo_Reader_SDK.TextSearchResult]
  @_Concurrency.MainActor @preconcurrency public func getSearchResultForText(_ searchText: Swift.String, forFont font: UIKit.UIFont) -> [Kitaboo_Reader_SDK.TextSearchResult]
  @_Concurrency.MainActor @preconcurrency public func getSearchResultForText(_ searchText: Swift.String, withPageNo pageNo: Swift.String, withFont font: UIKit.UIFont, withOffset offset: Swift.Int, withBatchSize batchSize: Swift.Int) -> [Any]
  @_Concurrency.MainActor @preconcurrency public func getSearchResultForText(_ searchText: Swift.String, withPageNo pageNo: Swift.String, withFont font: UIKit.UIFont) -> [Kitaboo_Reader_SDK.TextSearchResult]
  @_Concurrency.MainActor @preconcurrency public func getNextSearchResultForText(_ searchText: Swift.String, withCurrentPageNo pageNo: Swift.String, withFont font: UIKit.UIFont) -> [Kitaboo_Reader_SDK.TextSearchResult]
  @_Concurrency.MainActor @preconcurrency public func getPreviousSearchResultForText(_ searchText: Swift.String, withCurrentPageNo pageNo: Swift.String, withFont font: UIKit.UIFont) -> [Kitaboo_Reader_SDK.TextSearchResult]
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class UGCLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor @preconcurrency public var ugcUUID: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var isNote: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var isSticky: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var isMultiNote: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var isTeacherReviewNote: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var startWordID: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public var endWorkID: Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KitabooServiceInterface) open class KitabooServiceInterface : ObjectiveC.NSObject {
  @objc public init(baseURLString: Swift.String, clientID: Swift.String)
  @objc public init(baseURLString: Swift.String, clientID: Swift.String, isMultisessionEnabled: Swift.Bool)
  @objc public func authenticateWithUserName(_ userName: Swift.String, password: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func authenticateWithUserNameAndEncryptedPassword(_ userName: Swift.String, encryptedPassword: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func registerAccessCodeUser(_ firstName: Swift.String, lastName: Swift.String, email: Swift.String, userName: Swift.String, password: Swift.String, accessCode: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func authenticateGoogleClassRoomUserWithTokenSchema(_ tokenSchema: [Swift.String : Any], successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func refreshUserTokenWithToken(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func registerDeviceToken(_ userToken: Swift.String, apnsToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func deRegisterDeviceToken(_ userToken: Swift.String, apnsToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func getNotificationList(userToken: Swift.String, userId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func deleteNotificationList(userToken: Swift.String, userId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func markReadNotificationList(userToken: Swift.String, userId: Swift.String, messageIds: [Swift.String], markAll: Swift.Bool, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func getUserInfo(_ userToken: Swift.String, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func renewUserTokenWithToken(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func fetchUGCOperation(_ userToken: Swift.String, bookId: Swift.String, timestamp: Swift.String, bookVersion: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func fetchUGC(_ userToken: Swift.String, bookId: Swift.String, timestamp: Swift.String, bookVersion: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func saveUGCData(_ userToken: Swift.String, bookId: Swift.String, ugcData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func getKalturaSessionURL(_ userToken: Swift.String, entryID: Swift.String, type: ObjectiveC.NSInteger, successHandler: @escaping (_ data: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func saveUGCDataOperation(_ userToken: Swift.String, bookId: Swift.String, ugcData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func saveUGCDataOperation(_ userToken: Swift.String, bookId: Swift.String, ugcData: Foundation.Data, metaDataObject metaData: Kitaboo_Reader_SDK.KitabooServiceMetaData?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func saveColllabData(_ userToken: Swift.String, collabData: Foundation.Data, bookId: Swift.String, metaDataObject metaData: Kitaboo_Reader_SDK.KitabooServiceMetaData?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func saveColllabDataForPagination(_ userToken: Swift.String, collabData: Foundation.Data, bookId: Swift.String, metaDataObject metaData: Kitaboo_Reader_SDK.KitabooServiceMetaData?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>, _ successedcollabData: Foundation.Data) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func validateAccessCode(_userToken: Swift.String, withAccessCode accessCode: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func changePasswordForUserWith(_ userToken: Swift.String, username: Swift.String, password: Swift.String, toNewPassword newPassword: Swift.String, successHandler: @escaping () -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func changePasswordForUserWith(_ userToken: Swift.String, username: Swift.String, encryptedPassword: Swift.String, toEncryptedNewPassword encryptedNewPassword: Swift.String, successHandler: @escaping () -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func getLocalizationFileUrl(client_id: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func resetPasswordWith(username: Swift.String, successHandler: @escaping () -> (), failureHandler: @escaping ((any Swift.Error)?) -> ())
  @objc public func fetchBookClassInfo(_ userToken: Swift.String, bookIds: [Swift.String], successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func downloadAllBooks(_ userToken: Swift.String, withState state: Swift.String, withBookList bookList: [Swift.String : [Any]], successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func deleteAllBooks(_ userToken: Swift.String, withBookList bookList: [Swift.String : [Any]], successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func saveSessionHistory(_ userToken: Swift.String, withSessionHistory SessionHistory: [Swift.String : [[Swift.String : Any]]], successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>, _ sessionHistoryData: [Swift.String : [[Swift.String : Any]]]) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func refreshBookList(_ userToken: Swift.String, withBookIdAndType bookIdAndTypeDict: [Swift.String : Any], withTimeStamp timeStamp: Swift.String?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func markFavourite(_ userToken: Swift.String, withFavouriteBook book: [Swift.String : Any], successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func unmarkFavourite(_ userToken: Swift.String, withFavouriteBook book: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func getTOCList(_ serviceUrl: Swift.String, userToken: Swift.String, withBook book: Swift.String, assetType: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>, _ strCookie: Swift.String) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func getTOCListDataFromURL(_ serviceUrl: Swift.String, userToken: Swift.String, withBook book: Swift.String, assetType: Swift.String, successHandler: @escaping (_ json: Swift.String, _ statusCode: Swift.Int) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchFavourite(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchBookList(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchBookListForCategory(_ userToken: Swift.String, withCategoryName categoryName: Swift.String, categoryId: Swift.String? = nil, withStartIndex startIndex: Foundation.NSNumber?, withEndIndex endIndex: Foundation.NSNumber?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchCategoryList(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchBooksForCollection(_ userToken: Swift.String, withCategoryName categoryName: Swift.String, categoryId: Swift.String? = nil, withCollectionName collectionName: Swift.String, withStartIndex startIndex: Foundation.NSNumber?, withEndIndex endIndex: Foundation.NSNumber?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchRecentlyViewedBooks(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchUserSettings(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func fetchCollabShare(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchCollabUGC(_ userToken: Swift.String, bookId: Swift.String, bookVersion: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchCollabUGC(_ userToken: Swift.String, bookId: Swift.String, timestamp: Swift.String, bookVersion: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchTeacherAnnotations(_ userToken: Swift.String, bookId: Swift.String, bookVersion: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchStudentAnnotations(_ userToken: Swift.String, bookId: Swift.String, learnerId: Swift.String, bookVersion: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func saveColllabData(_ userToken: Swift.String, collabData: Foundation.Data, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func saveHighlightData(_ userToken: Swift.String, highlightData: Foundation.Data, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @discardableResult
  @objc public func saveTrackingData(_ userToken: Swift.String, bookId: Swift.String, analyticsData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func getAnalyticsData(_ userToken: Swift.String, bookId: Swift.String, classId: Foundation.NSNumber, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func elasticSearch(_ userToken: Swift.String, searchData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func newElasticSearch(_ microServiceUrl: Swift.String, userToken: Swift.String, searchData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func getBookshelfStateData(_ microServiceUrl: Swift.String, userToken: Swift.String, feedBackData: Foundation.Data?, type: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @discardableResult
  @objc public func bookLevelSearch(_ microServiceUrl: Swift.String, userToken: Swift.String, searchData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func updateUserDetailsWith(_ userToken: Swift.String, profilePhotoData: Foundation.Data, coverPhotoData: Foundation.Data, firstName: Swift.String?, lastName: Swift.String?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func acceptRejectCollab(_ userToken: Swift.String, collabData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func downloadBookURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func downloadMediaBookURLWith(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>, Foundation.HTTPURLResponse) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func downloadMediaBookURLServerlessWith(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>, Foundation.HTTPURLResponse) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func downloadBookOnlineURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, timeStamp: Swift.Int64, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func downloadBookOnlineServerlessURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, timeStamp: Swift.Int64, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>, _ response: Foundation.HTTPURLResponse) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func authenticateHLSPackageWith(_ packageId: Swift.Int64, baseURL: Swift.String, userToken: Swift.String, timeStamp: Swift.Int64, successHandler: @escaping (Foundation.HTTPURLResponse) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func releaseBookURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func consumeBookURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @discardableResult
  @objc public func saveTeacherAnnotation(_ userToken: Swift.String, annotation: Foundation.Data, bookId: Swift.String, learnerId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func submitAnotation(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func saveSCORMData(_ userToken: Swift.String, bookId: Swift.String, scormData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func fetchScromData(_ userToken: Swift.String, classID: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func getBookDetails(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func getBookDetailsWithID(_ bookId: Swift.String, userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func forceUpdate(_ appVersion: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func packageURLWith(_ userToken: Swift.String, bookId: Swift.Int, formatType: Swift.String, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func fetchReadingSpeedInformation(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchLastPageAccessed(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func saveLastPageAccessed(_ userToken: Swift.String, bookId: Swift.String, lastPageData: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchFurthestPage(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func saveFurthestPageData(_ userToken: Swift.String, furthestPageData: Foundation.Data, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchBookListForCategorySecured(_ userToken: Swift.String, withCategoryName categoryName: Swift.String, categoryId: Swift.String? = nil, withStartIndex startIndex: Foundation.NSNumber?, withEndIndex endIndex: Foundation.NSNumber?, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchBooksForCollectionSecured(_ userToken: Swift.String, withCategoryName categoryName: Swift.String, categoryId: Swift.String? = nil, withCollectionName collectionName: Swift.String, withStartIndex startIndex: Foundation.NSNumber?, withEndIndex endIndex: Foundation.NSNumber?, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func getBookDetailsSecured(_ userToken: Swift.String, bookId: Swift.String, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchRecentlyViewedBooksSecured(_ userToken: Swift.String, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchFavouriteSecured(_ userToken: Swift.String, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func refreshBookListSecured(_ userToken: Swift.String, withBookIdAndType bookIdAndTypeDict: [Swift.String : Any], withTimeStamp timeStamp: Swift.String?, currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func refreshCategoryListSecured(_ userToken: Swift.String, categoryIdList: [Swift.String : Any], currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func downloadAllBooksSecured(_ userToken: Swift.String, withState state: Swift.String, withBookList bookList: [Swift.String : [Any]], currentDate: Foundation.Date? = nil, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchBookListForCategoryV1(_ userToken: Swift.String, withCategoryName categoryName: Swift.String, categoryId: Swift.String? = nil, withStartIndex startIndex: Foundation.NSNumber?, withEndIndex endIndex: Foundation.NSNumber?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchCategoryListV1(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func fetchPrefferedLanguage(_ userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func savePrefferedLanguage(_ userToken: Swift.String, languauge: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @discardableResult
  @objc public func fetchBookTOC(_ userToken: Swift.String, bookId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @discardableResult
  @objc public func fetchStudentMarkupReport(_ userToken: Swift.String, bookId: Swift.String, classId: Swift.String, chapters: Swift.String, emailID: Swift.String, userIds: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: Foundation.NSError) -> ()) -> Kitaboo_Reader_SDK.NetworkDataTaskOperation
  @objc public func getScreenshotCount(userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func updateScreenshotCount(userToken: Swift.String, screenshotCount: Swift.Int, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func fetchAllDeviceSession(userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func deleteSession(userToken: Swift.String, uuId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func deleteAllSession(userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func refreshUserTokenWithDate(_ userToken: Swift.String, currentDate: Foundation.Date?, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func fetchUserPartnerDetails(userToken: Swift.String, startIndex: Swift.String, endIndex: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func switchPartner(userToken: Swift.String, partnerReferenceId: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func getImmersiveReaderToken(userToken: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func getUserPrintData(userToken: Swift.String, bookID: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func saveUserPrintData(_ userToken: Swift.String, lastPageData: Foundation.NSMutableDictionary, bookID: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc public func getCustomePDFPages(_ userToken: Swift.String, pagesData: Foundation.NSMutableDictionary, bookID: Swift.String, successHandler: @escaping (_ json: Swift.Dictionary<Swift.String, Any>) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class HDMoviePlayerController : MediaPlayer.MPMoviePlayerController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency public var movieBackgroundView: UIKit.UIView
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isFullscreen: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var contentURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setFullscreen(_ fullscreen: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func play()
}
@objc @_inheritsConvenienceInitializers open class SharedUserInfo : ObjectiveC.NSObject {
  open var fullName: Swift.String?
  open var userId: Foundation.NSNumber
  open var isShareSelected: Swift.Bool
  open var isReceiveSelected: Swift.Bool
  open var isShared: Swift.Bool
  open var isNoteShared: Swift.Bool
  open var isReceived: Swift.Bool
  open func deselectShare()
  open func deselectReceive()
  open func setShared()
  open func setReceived()
  open func checkWhetherUserIsPresentInList(_ array: [Foundation.NSNumber]) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc(LinkDropDownViewControllerDelegate) public protocol LinkDropDownViewControllerDelegate {
  @objc func didSelectDropDownItem(WithText selectedText: Swift.String, forDropDown dropDown: UIKit.UIButton)
  @objc func didSelectActionToCloseDropDown()
}
@objc(LinkDropDownViewController) @_Concurrency.MainActor @preconcurrency open class LinkDropDownViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.LinkDropDownViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public init(WithDropDownData dropDownItemsArray: Swift.Array<Swift.String>, withDropDown dropDown: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc deinit
}
extension Kitaboo_Reader_SDK.LinkDropDownViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
@_inheritsConvenienceInitializers @objc public class TextHighlightViewColor : ObjectiveC.NSObject {
  @objc public static let shared: Kitaboo_Reader_SDK.TextHighlightViewColor
  @objc public func dictionaryForColors() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RendererViewControllerDelegate {
  @objc optional func didFailToReadTTS()
  @objc optional func didPauseTTS()
  @objc optional func didPlayTTS()
  @objc optional func didJumpToSentenceWithWordFramesForTTS(frames: [Any], pageIdentifier: Swift.String)
  @objc optional func didChangeSpeedRate(rate: CoreFoundation.CGFloat)
  @objc optional func currentPageNumberForTTS(pageNumber: Foundation.NSNumber)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, willLoadPageWithPageNumber number: Foundation.NSNumber, withDisplayNumber displayNum: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, willUnloadPageWithPageNumber number: Foundation.NSNumber, withDisplayNumber displayNum: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didLoadPageWithPageNumber number: Foundation.NSNumber, withDisplayNumber displayNum: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didPageLoadingFailedForPageNumber number: Foundation.NSNumber, withError error: Foundation.NSError)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didBookLoadingFailedWithError error: Foundation.NSError)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didBookLoadedSuccessfullyWithBook bookVO: Kitaboo_Reader_SDK.KitabooBookVO)
  @objc optional func didPageBeginScroll(pageNumber: Foundation.NSNumber)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didPageBeginScroll pageNumber: Foundation.NSNumber)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didZoomInPage pageNumbers: [Any])
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didZoomOutPage pageNumbers: [Any])
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didSingleTapOnPage pageNumber: Foundation.NSNumber)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didPinchOnPage isPinchIn: Swift.Bool)
  @objc optional func initialDisplayNumber(rendererViewController: Kitaboo_Reader_SDK.RendererViewController) -> Swift.String
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didHighlightTextWithHighlightSelectionRect highlightSelectionRect: CoreFoundation.CGRect, onPageNo pageNo: ObjectiveC.NSInteger)
  @objc optional func didHighlighComplete(with highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func didTapOnNoteHighligh(highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func didTapOnTeacherComment(fibArray: [Any])
  @objc optional func didTapOnInstantFeedBack(fibView: UIKit.UIView)
  @objc optional func noteIconViewForHighlight(highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO) -> Kitaboo_Reader_SDK.UGCLabel
  @objc optional func didUpdateFibArray(fibArray: [Any])
  @objc optional func didTextAnnotationCompleteWithTextAnnotation(textAnnotationVO: Kitaboo_Reader_SDK.SDKTextAnnotationVO, withNewSDKTextAnnotationVO newSDKTextAnnotationVO: Kitaboo_Reader_SDK.SDKTextAnnotationVO)
  @objc optional func didTextAnnotationBeginEditing(textView: UIKit.UITextView)
  @objc optional func textAnnotationShouldBeginEditing() -> Swift.Bool
  @objc optional func didTextAnnotationValueChanged(textView: UIKit.UITextView)
  @objc optional func colorForTextSelectionView() -> UIKit.UIColor
  @objc optional func didChangeHighlightSelection()
  @objc optional func didStickyNoteAllowedTwoPagePanning() -> Swift.Bool
  @objc optional func zoomScalePercentageForBook(bookVO: Kitaboo_Reader_SDK.KitabooBookVO) -> Swift.Double
  @objc optional func deleteProtractorWithProtractorVO(protractorVO: Kitaboo_Reader_SDK.SDKProtractorVO)
  @objc optional func didSelectProtractorWithProtractorVO(protractorVO: Kitaboo_Reader_SDK.SDKProtractorVO)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didRendererChangedAvailabilityForActionState state: Kitaboo_Reader_SDK.RendererAvailabilityForActionState, forPageNumber number: Foundation.NSNumber, withDisplayNumber displayNum: Swift.String)
  @objc optional func bookLoadingCompletedWithContentSize(contentSize: ObjectiveC.NSInteger)
  @objc optional func bookCFIsLoadingCompleted(TotalNumberOfCFIs: ObjectiveC.NSInteger)
  @objc optional func didBookChaptersProcessSuccessfully(chaptersIndex: ObjectiveC.NSInteger, withChapterContentSize contentSize: ObjectiveC.NSInteger, isCoverPage coverPage: Swift.Bool)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didChangeContentPosition contentOffset: CoreFoundation.CGFloat, forChapter chapterIndex: ObjectiveC.NSInteger, withContentSize contentSize: CoreFoundation.CGFloat, isCoverPage coverPage: Swift.Bool)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didChangeReflowableBookPage pageNumber: Swift.String, forChapter chapterIndex: ObjectiveC.NSInteger, withTotalPagesInChapter totalChapterPages: Swift.String, withTotalPagesInBook totalBookPages: Swift.String, isCoverPage coverPage: Swift.Bool)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, willLoadCFI cfiArray: [Any], withPageNumber number: Foundation.NSNumber, withDisplayNumber displayNum: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, willUnloadCFI cfiArray: [Any], withPageNumber number: Foundation.NSNumber, withDisplayNumber displayNum: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didChangeBookCFI bookCFI: Swift.String, withPositionIdentifier positionIdentifier: Swift.String, withPageNumber pageNumber: Foundation.NSNumber)
  @objc optional func rendererViewControllerDidPageNavigationCompleted()
  @objc optional func didChangePageIdentifier(pageOrCFI: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didUpdateFurthestPage furthestPageData: Swift.String)
  @objc optional func didOpenEpubElementModal()
  @objc optional func didCloseEpubElementModal()
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didUpdateBookmarkVOFrom bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO, to updatedBookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO?)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didEndScrollingWithContentOffset offset: CoreFoundation.CGPoint, withPageNumber pageNumber: Foundation.NSNumber)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didTapOnWordWithWordId wordId: Swift.String, withWordText wordText: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didTapOnWordWithWordRect wordRect: CoreFoundation.CGRect, withWordText wordText: Swift.String)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didTapOnWordWithWordRect wordRect: CoreFoundation.CGRect, withWordText wordText: Swift.String, andPage pageNumber: Foundation.NSNumber)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didTapOnResource resource: Kitaboo_Reader_SDK.EPUBResource)
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didChangeFirstVisibleWordWithWord wordDictionary: Foundation.NSDictionary)
  @objc optional func didTapOnMarkupHitArea(_ markupHitAreaLabel: Kitaboo_Reader_SDK.MarkupHitAreaLabel)
  @objc optional func fontNameForBook(_ book: Kitaboo_Reader_SDK.KitabooBookVO) -> Swift.String
  @objc optional func fontFilePathForBook(_ book: Kitaboo_Reader_SDK.KitabooBookVO) -> Swift.String
  @objc optional func rendererViewController(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController, didCompleteSearchDecryptionForBookPath bookPath: Swift.String)
  @objc optional func getReaderFontSetting(_ rendererViewController: Kitaboo_Reader_SDK.RendererViewController) -> Kitaboo_Reader_SDK.ReaderFontSetting?
  @objc optional func shouldWaitForChapterLoadForCFIPerMiliSeconds() -> CoreFoundation.CGFloat
  @objc optional func isAutoPageScrollingDisableInAudioSync() -> Swift.Bool
  @objc optional func isPageBreakEnable(_ isPageBreakEnable: Swift.Bool)
}
@objc public protocol KitabooWebPlayerDelegate {
  @objc optional func webPLayerDidClosed()
  @objc optional func webPlayerDidFailedWithError(_ error: any Swift.Error)
  @objc optional func webPlayerWillClose(withScormData scormData: Swift.String, activityName: Swift.String, scormID: Swift.String, pageID: Swift.String)
  @objc optional func webView(_ webView: WebKit.WKWebView, createKitabooPlayerWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction) -> WebKit.WKWebView?
}
@objc @_Concurrency.MainActor @preconcurrency open class KitabooWebPlayer : UIKit.UIViewController, UIKit.UIAlertViewDelegate, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.KitabooWebPlayerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var webView: WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency public var targetURL: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var themeColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency public init(urlRequest: Foundation.URLRequest, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency public init(scormPackageURL: Swift.String, scormID: Swift.String, scormData: Swift.String, isDoneButtonVisible: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Foundation.URL, linkVO: Kitaboo_Reader_SDK.KFLinkVO?, bookVO: Kitaboo_Reader_SDK.KFBookVO?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency public func setThemeColorToView(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setDoneButtonTitle(_ title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setDoneButtonTitleColor(_ titleColor: UIKit.UIColor?)
  @_Concurrency.MainActor @preconcurrency public func updateScormStyle()
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func closePlayer()
  @_Concurrency.MainActor @preconcurrency public func closePlayer(completionHandler: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
@_hasMissingDesignatedInitializers @objc open class BookShelfThemeFor_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let kitaboo6_0: Kitaboo_Reader_SDK.Kitaboo6_0_V6_0?
  @objc final public let signin: Kitaboo_Reader_SDK.Signin_V6_0?
  @objc final public let bookshelf: Kitaboo_Reader_SDK.WelcomeBookshelf_V6_0?
  @objc final public let reader: Kitaboo_Reader_SDK.WelcomeReader_V6_0?
  @objc final public let audioVideoBookPlayer: Kitaboo_Reader_SDK.WelcomeAudioVideoBookPlayer_V6_0?
  @objc final public let darkMode: Kitaboo_Reader_SDK.DarkMode_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class WelcomeAudioVideoBookPlayer_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let toppanel: Kitaboo_Reader_SDK.Toppanel_V6_0?
  @objc final public let sidepanel: Kitaboo_Reader_SDK.Sidepanel_V6_0?
  @objc final public let audioBookCover: Kitaboo_Reader_SDK.AudioBookCover_V6_0?
  @objc final public let audioVideoSlider: Kitaboo_Reader_SDK.AudioVideoSlider_V6_0?
  @objc final public let allPopups: Kitaboo_Reader_SDK.AllPopups_V6_0?
  @objc final public let toastmessage: Kitaboo_Reader_SDK.Toastmessage_V6_0?
  @objc final public let videoPlayer: Kitaboo_Reader_SDK.VideoPlayer_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AllPopups_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let overlayPanel: Kitaboo_Reader_SDK.OverlayPanel_V6_V6_0?
  @objc final public let popup: Kitaboo_Reader_SDK.AllPopupsPopup_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class OverlayPanel_V6_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, opacity: Swift.String?, backgroundHTML: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AllPopupsPopup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let border: Swift.String?, titleTextColor: Swift.String?, hintTextColor: Swift.String?, inputTextColor: Swift.String?
  @objc final public let lineColor: Swift.String?, selectedLineColour: Swift.String?, timeTextColor: Swift.String?, speedTextColor: Swift.String?
  @objc final public let selectedSpeedTextColor: Swift.String?, selectedSleepTextColor: Swift.String?, checkIconColor: Swift.String?
  @objc final public let actionButton: Kitaboo_Reader_SDK.ActionButton_V6_V6_0?
  @objc final public let descriptionTextColor: Swift.String?
  @objc final public let deleteButton: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ActionButton_V6_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let main: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?
  @objc final public let cancel: Kitaboo_Reader_SDK.Cancel_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Cancel_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let borderColor: Swift.String?, textColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class DeSelectedButton_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let textColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AudioBookCover_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let shadowColor: Swift.String?, opacity: Swift.String?, boxShadow: Swift.String?, rgba: Swift.String?
  @objc final public let backgroundColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AudioVideoSlider_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let sliderColor: Swift.String?, chapterIconColor: Swift.String?, sliderFilledColor: Swift.String?
  @objc final public let slideController: Kitaboo_Reader_SDK.SlideController_V6_0?
  @objc final public let defaultTimetextColor: Swift.String?, currentTimetextColor: Swift.String?
  @objc final public let chapterTitleColor: Swift.String?
  @objc final public let chapterCountTextColor: Swift.String?
  @objc final public let navigationArrowColor: Swift.String?
  @objc final public let disabledNavigationArrowColor: Swift.String?
  @objc final public let iconColor: Swift.String?
  @objc final public let selectedIconColor: Swift.String?
  @objc final public let selectedIconBg: Swift.String?
  @objc final public let chapterThumbnailProgressBarColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SlideController_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let controllerColor: Swift.String?, opacity: Swift.String?, backgroundHTML: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Sidepanel_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, tabBg: Swift.String?
  @objc final public let tabBorder: Swift.String?, tabTextColor: Swift.String?, selectedTabBorder: Swift.String?, selectedTextColor: Swift.String?
  @objc final public let selectedChapter: Kitaboo_Reader_SDK.SelectedChapter_V6_0?
  @objc final public let titleColor: Swift.String?, descriptionColor: Swift.String?, timeColor: Swift.String?, iconsColor: Swift.String?
  @objc final public let deleteIconColor: Swift.String?, dividerColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SelectedChapter_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, titleColor: Swift.String?, chapterTimeColor: Swift.String?, iconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Toastmessage_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let backgroundColor: Swift.String?, color: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Toppanel_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let iconsColor: Swift.String?, bookTitleTextColor: Swift.String?, bottomLine: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class VideoPlayer_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let videoControls: Kitaboo_Reader_SDK.VideoControls_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class VideoControls_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let playPauseIconBackgroundColor: Swift.String?, iconColor: Swift.String?, playerBackground: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class WelcomeBookshelf_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let header: Swift.String?, searchOutline: Swift.String?, searchText: Swift.String?, icons: Swift.String?, Header_icons: Swift.String?
  @objc final public let horizontalDivider: Swift.String?, background: Swift.String?, titleText: Swift.String?, contentTitle: Swift.String?
  @objc final public let viewAllText: Swift.String?, type: Swift.String?, progressBar: Swift.String?, progressBackground: Swift.String?
  @objc final public let cardProgressbarFillBgcolor: Swift.String?, cardProgressbarFillBuffercolor: Swift.String?
  @objc final public let bookshelfSortby: Kitaboo_Reader_SDK.BookshelfSortby_V6_0?
  @objc final public let bookshelfInfoPopup: Kitaboo_Reader_SDK.BookshelfInfoPopup_V6_0?
  @objc final public let bottomBar: Kitaboo_Reader_SDK.BottomBar_V6_0?
  @objc final public let categoryLeftPanel: Kitaboo_Reader_SDK.CategoryLeftPanel_V6_0?
  @objc final public let categoryRightShelf: Kitaboo_Reader_SDK.CategoryRightShelf_V6_0?
  @objc final public let recentShelf: Kitaboo_Reader_SDK.RecentShelf_V6_0?
  @objc final public let popup: Kitaboo_Reader_SDK.Popup_V6_0?
  @objc final public let aboutThis: Kitaboo_Reader_SDK.AboutThis_V6_0?
  @objc final public let profile: Kitaboo_Reader_SDK.BookshelfProfile_V6_0?
  @objc final public let search: Kitaboo_Reader_SDK.BookshelfSearch_V6_V6_0?
  @objc final public let aboutUs: Kitaboo_Reader_SDK.AboutUs_V6_0?
  @objc final public let analytics: Kitaboo_Reader_SDK.Analytics_V6_V6_0?
  @objc final public let footer: Kitaboo_Reader_SDK.Footer_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AboutThis_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let header: Swift.String?, background: Swift.String?, horizontalDivider: Swift.String?, readProgressBar: Swift.String?
  @objc final public let chapterNumber: Swift.String?, collectionSingleSelect: Swift.String?, favouriteNonselected: Swift.String?, favouriteSelected: Swift.String?
  @objc final public let favouriteBackground: Swift.String?, readNowBackground: Swift.String?, readNowText: Swift.String?, analytics: Swift.String?
  @objc final public let analyticsOutline: Swift.String?, analyticsText: Swift.String?, title: Swift.String?, format: Swift.String?
  @objc final public let tabSelected: Swift.String?, tabDeselected: Swift.String?, descriptionV6: Swift.String?, categoryLabel: Swift.String?
  @objc final public let iconsColor: Swift.String?, downloadingButtonProgress: Swift.String?, Selected_Tab_Text: Swift.String?, Selected_collection_background: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AboutUs_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let backgroundColor: Swift.String?, backgroundImage: Swift.String?, closeIconColor: Swift.String?, textColor: Swift.String?, descriptionTextColor: Swift.String?, iconsColor: Swift.String?
  @objc final public let gradientColor: Kitaboo_Reader_SDK.GradientColor_V6_0?
  @objc final public let svg: Kitaboo_Reader_SDK.SVG_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class GradientColor_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let color: Swift.String?
  @objc final public let opacity: [Swift.String]?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SVG_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let opacity: Swift.String?, color: Swift.String?, backgroundHTML: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Analytics_V6_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let headerBackground: Swift.String?, backArrowHeader: Swift.String?, horizontalDivider: Swift.String?, background: Swift.String?
  @objc final public let title: Swift.String?, format: Swift.String?, icons: Swift.String?, divider: Swift.String?
  @objc final public let sectionBackground: Swift.String?, sectionSelected: Swift.String?, sectionNonselected: Swift.String?, boxShadow: Swift.String?
  @objc final public let cardText: Swift.String?, tabSelected: Swift.String?, dropdownIconColor: Swift.String?, classLabel: Swift.String?
  @objc final public let cardProgressbarFillBgcolor: Swift.String?, cardProgressbarFillBuffercolor: Swift.String?, back_arrow: Swift.String?, header: Swift.String?, selected_Tab_Background: Swift.String?, selected_Tab_Left_Border: Swift.String?, selected_Tab_Icon: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class BookshelfInfoPopup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, contentTitle: Swift.String?, divider: Swift.String?, optionText: Swift.String?
  @objc final public let optionIcon: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class BookshelfSortby_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let titleText: Swift.String?, sectionHeader: Swift.String?, sectionBackground: Swift.String?, sectionOptionText: Swift.String?
  @objc final public let selectedTextColour: Swift.String?, selectTextTick: Swift.String?, background: Swift.String?, mouseHover: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class BottomBar_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let iconsColor: Swift.String?, selectedIconColor: Swift.String?, recentIconColour: Swift.String?, selectedRecentIcon: Swift.String?
  @objc final public let selectedRecentButtonBg: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class CategoryLeftPanel_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, verticalDivider: Swift.String?, categoriesTextColor: Swift.String?, categoriesTextSelectedColorLine: Swift.String?, Categories_text_selected_color: Swift.String?, Categories_selected_icon_color: Swift.String?, Search_Categories_input_border: Swift.String?, Search_Categories_input_color: Swift.String?, Search_Categories_icon_color: Swift.String?
  @objc final public let categoriesTextSelectedBar: Swift.String?, title: Swift.String?, close: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class CategoryRightShelf_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, hamburgerMenu: Swift.String?, categoriesTextColor: Swift.String?, viewAll: Swift.String?
  @objc final public let readProgressBar: Swift.String?, coverEmptyBackgroound: Swift.String?, title: Swift.String?, format: Swift.String?
  @objc final public let moreIcon: Swift.String?, tooltipBackground: Swift.String?, tooltipText: Swift.String?, arrowColorDisabled: Swift.String?
  @objc final public let arrowColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Footer_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let boxShadow: Swift.String?, boarder: Swift.String?, text: Swift.String?, icon: Swift.String?
  @objc final public let active: Swift.String?
  @objc final public let color: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Popup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, header: Swift.String?, contentTitle: Swift.String?, divider: Swift.String?
  @objc final public let optionTextIcon: Swift.String?, outlineTextButton: Swift.String?, fillButton: Swift.String?, fillButtonTextIcon: Swift.String?
  @objc final public let deleteButton: Swift.String?, deleteButtonTextIcon: Swift.String?, selectTextTick: Swift.String?, sectionClassHeader: Swift.String?
  @objc final public let nonSelect: Swift.String?, boxShadow: Swift.String?, bookmarkPopupInstructionText: Swift.String?, sortByBackground: Swift.String?
  @objc final public let titleAuthorPublishedDate: Swift.String?, innerBackground: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class BookshelfProfile_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let title: Swift.String?, leftBackground: Swift.String?, label: Swift.String?, sectionBackground: Swift.String?
  @objc final public let selectedSectionText: Swift.String?, sectionHeaderPersonalinfoGeneralLegal: Swift.String?, sectionCardBackground: Swift.String?, profilerightBackground: Swift.String?
  @objc final public let contentTitle: Swift.String?, inputOutline: Swift.String?, inputText: Swift.String?, inputTextLabel: Swift.String?
  @objc final public let editProfile: Swift.String?, editIcon: Swift.String?, profileOutline: Swift.String?, saveDisabled: Swift.String?
  @objc final public let saveEnabled: Swift.String?, saveText: Swift.String?, cancelDisabled: Swift.String?, cancelOutlineText: Swift.String?, Cancel_Outline: Swift.String?
  @objc final public let cancelBackground: Swift.String?, errorMessage: Swift.String?, signOut: Swift.String?, aboutusCard: Swift.String?
  @objc final public let emailidColor: Swift.String?, divider: Swift.String?, iconColor: Swift.String?, selectedLanguage: Swift.String?, Cancel_Text: Swift.String?
  @objc final public let langaugeArrow: Swift.String?, topbar_background: Swift.String?, back_icon_color: Swift.String?, Selected_tab_icon: Swift.String?, Selected_tab_left_border: Swift.String?
  @objc final public let shareFeedback: Kitaboo_Reader_SDK.ShareFeedback_V6_0?
  @objc final public let signoutButton: Kitaboo_Reader_SDK.SignoutButton_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class RecentShelf_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, categoriesTextColor: Swift.String?, viewAll: Swift.String?, readProgressBar: Swift.String?
  @objc final public let title: Swift.String?, format: Swift.String?, moreIcon: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class BookshelfSearch_V6_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let headerBackground: Swift.String?, searchOutline: Swift.String?, searchHintTextLabel: Swift.String?, searchTextLabel: Swift.String?
  @objc final public let searchIconColour: Swift.String?, iconsColor: Swift.String?, searchResult: Swift.String?, title: Swift.String?
  @objc final public let horizontalDivider: Swift.String?, elasticSearchIcon: Swift.String?, thumbnailSelectionBackground: Swift.String?, descriptionV6: Swift.String?
  @objc final public let searchedWord: Swift.String?, downloadShowButton: Swift.String?, buttonText: Swift.String?, cancelButtonTextOutline: Swift.String?
  @objc final public let tabSelected: Swift.String?, tabDeselected: Swift.String?, checkboxbackground: Swift.String?, contentTypeFormat: Swift.String?
  @objc final public let selectCategoryText: Swift.String?
  @objc final public let Search_mobile_bgColor: Swift.String?, Search_mobile_border: Swift.String?, Sortby_mobile_icon_color: Swift.String?, Selected_Tab_Text: Swift.String?, Search_history_icon_color: Swift.String?, Search_history_text_color: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class DarkMode_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let signIn: Kitaboo_Reader_SDK.SignIn_V6_0?
  @objc final public let bookshelf: Kitaboo_Reader_SDK.DarkModeBookshelf_V6_0?
  @objc final public let reader: Kitaboo_Reader_SDK.DarkModeReader_V6_0?
  @objc final public let audioVideoBookPlayer: Kitaboo_Reader_SDK.DarkModeAudioVideoBookPlayer_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class DarkModeAudioVideoBookPlayer_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class DarkModeBookshelf_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let mainBgcolor: Swift.String?, textColor: Swift.String?
  @objc final public let iconColor: Swift.String?
  @objc final public let passwordStrengthCheckColor: Swift.String?, editprofile: Swift.String?, devicename: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class DarkModeReader_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let mainBackgroundColor: Swift.String?, navigationBtn: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SignIn_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let loginLeftBgcolor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Kitaboo6_0_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let fontFace: Swift.String?, clientName: Swift.String?, bookshelfFontfamily: Swift.String?, bookshelfFontfamilySemiBold: Swift.String?, bookshelf_fontfamily_italic: Swift.String?, font_face_Arabic: Swift.String?
  @objc final public let bookshelfFontfamilyMedium: Swift.String?, loginFontfamily: Swift.String?, loginFontfamilyBold: Swift.String?, readerFontfamily: Swift.String?
  @objc final public let readerFontfamilyHeader: Swift.String?, readerFontfamilyMedium: Swift.String?, fontFaceIconColor: Swift.String?, scrollbarShadow: Swift.String?, deselected_checkbox_border: Swift.String?, selected_checkbox_background: Swift.String?, active_icon: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class WelcomeReader_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let main: Kitaboo_Reader_SDK.Main_V6_0?
  @objc final public let tableofcontents: Kitaboo_Reader_SDK.Tableofcontents_V6_0?
  @objc final public let myData: Kitaboo_Reader_SDK.MyData_V6_0?
  @objc final public let bookmark: Kitaboo_Reader_SDK.Bookmark_V6_0?
  @objc final public let search: Kitaboo_Reader_SDK.ReaderSearch_V6_0?
  @objc final public let pentool: Kitaboo_Reader_SDK.Pentool_V6_0?
  @objc final public let thumbnailSlider: Kitaboo_Reader_SDK.ThumbnailSlider_V6_0?
  @objc final public let audioBar: Kitaboo_Reader_SDK.AudioBar_V6_0?
  @objc final public let note: Kitaboo_Reader_SDK.Note_V6_0?
  @objc final public let share: Kitaboo_Reader_SDK.Share_V6_0?
  @objc final public let comments: Kitaboo_Reader_SDK.Comments_V6_0?
  @objc final public let zoom: Kitaboo_Reader_SDK.Zoom_V6_0?
  @objc final public let fontSettings: Kitaboo_Reader_SDK.FontSettings_V6_0?
  @objc final public let teacherSettings: Kitaboo_Reader_SDK.TeacherSettings_V6_0?
  @objc final public let teacherStudentlist: Kitaboo_Reader_SDK.TeacherStudentlist_V6_0?
  @objc final public let highlight: Kitaboo_Reader_SDK.Highlight_V6_V6_0?
  @objc final public let highlightOnScreen: Kitaboo_Reader_SDK.HighlightOnScreen_V6_0?
  @objc final public let profile: Kitaboo_Reader_SDK.ReaderProfile_V6_0?
  @objc final public let reflowableReader: Kitaboo_Reader_SDK.ReflowableReader_V6_0?
  @objc final public let textAnnotation: Kitaboo_Reader_SDK.TextAnnotation_V6_0?
  @objc final public let markup: Kitaboo_Reader_SDK.Markup_V6_0?
  @objc final public let markupGlossary: Kitaboo_Reader_SDK.MarkupGlossary_V6_0?
  @objc final public let imageMarkup: Kitaboo_Reader_SDK.ImageMarkup_V6_0?
  @objc final public let slideshowMarkup: Kitaboo_Reader_SDK.SlideshowMarkup_V6_0?
  @objc final public let audioMarkup: Kitaboo_Reader_SDK.AudioMarkup_V6_0?
  @objc final public let help: Kitaboo_Reader_SDK.Help_V6_0?
  @objc final public let videoMarkup: Kitaboo_Reader_SDK.VideoMarkup_V6_0?
  @objc final public let shareFeedback: Kitaboo_Reader_SDK.ShareFeedback_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AudioBar_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let backgroundColor: Swift.String?, audioDragIcon: Swift.String?
  @objc final public let audioDragBackgroundColor: Swift.String?, playPauseIcon: Swift.String?, muteIcon: Swift.String?, currentTime: Swift.String?
  @objc final public let closeAudio: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AudioMarkup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let iconColor: Swift.String?, iconBackgroundColor: Swift.String?, audioContainerBorderColor: Swift.String?, boxShadow: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Bookmark_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let iconColor: Swift.String?, selectedIconColor: Swift.String?, popupBackground: Swift.String?, popupBorder: Swift.String?
  @objc final public let inputPanelBg: Swift.String?, hintTextColor: Swift.String?, textColor: Swift.String?, buttonBackground: Swift.String?
  @objc final public let buttonTextColor: Swift.String?
  @objc final public let crossIconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Comments_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let backIconColor: Swift.String?
  @objc final public let tabTextColor: Swift.String?
  @objc final public let dividerColor: Swift.String?
  @objc final public let otherMessage: Kitaboo_Reader_SDK.Message_V6_0?, myMessage: Kitaboo_Reader_SDK.Message_V6_0?
  @objc final public let bottomPanel: Kitaboo_Reader_SDK.BottomPanel_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class BottomPanel_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let borderColor: Swift.String?, hintTextColor: Swift.String?, textColor: Swift.String?, iconColorDisabled: Swift.String?
  @objc final public let iconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Message_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, borderColor: Swift.String?, nameColor: Swift.String?, descriptionColor: Swift.String?
  @objc final public let timeTextColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class FontSettings_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let overlayPanel: Kitaboo_Reader_SDK.OverlayPanel_V6_V6_0?
  @objc final public let popupBackground: Swift.String?
  @objc final public let popupBorder: Swift.String?, tabBorder: Swift.String?, tabTextColor: Swift.String?, selectedTabBorder: Swift.String?
  @objc final public let selectedTextColor: Swift.String?, resetColor: Swift.String?
  @objc final public let font: Kitaboo_Reader_SDK.Font_V6_0?
  @objc final public let other: Kitaboo_Reader_SDK.Other_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Font_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let textColor: Swift.String?
  @objc final public let dividerColor: Swift.String?, pointerBg: Swift.String?
  @objc final public let iconColor: Swift.String?
  @objc final public let boxBorderColor: Swift.String?
  @objc final public let selectedIconBg: Swift.String?
  @objc final public let selectedIconBorder: Swift.String?, dropdownBg: Swift.String?, dropdownTextColor: Swift.String?, moreIconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Other_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let textColor: Swift.String?, iconColor: Swift.String?
  @objc final public let selectedIconColor: Swift.String?
  @objc final public let brightness: Kitaboo_Reader_SDK.Brightness_V6_0?
  @objc final public let mode: Kitaboo_Reader_SDK.Mode_V6_0?
  @objc final public let scrollView: Kitaboo_Reader_SDK.ScrollView_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Brightness_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let sliderColor: Swift.String?, sliderSelectedColor: Swift.String?, iconFaded: Swift.String?, iconBright: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Mode_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let selectedTabBorder: Swift.String?
  @objc final public let day: Kitaboo_Reader_SDK.Day_V6_0?, night: Kitaboo_Reader_SDK.Day_V6_0?, sepia: Kitaboo_Reader_SDK.Day_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Day_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let tabBg: Swift.String?, textColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ScrollView_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let tabBg: Swift.String?, textColor: Swift.String?, selectedTabBg: Swift.String?
  @objc final public let selectedTextColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Help_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let overlayPanel: Kitaboo_Reader_SDK.OverlayPanel_V6_V6_0?
  @objc final public let textColor: Swift.String?
  @objc final public let descriptionTextColor: Swift.String?
  @objc final public let lineColor: Swift.String?
  @objc final public let pointerColor: Swift.String?
  @objc final public let iconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Highlight_V6_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popup: Kitaboo_Reader_SDK.HighlightPopup_V6_0?
  @objc final public let iconColor: Swift.String?, selectedBorderColor: Swift.String?
  @objc final public let highlightColor: [Swift.String]?
  @objc final public let highlightColorHTML: Kitaboo_Reader_SDK.HighlightColorHTML_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class HighlightColorHTML_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let orange: Swift.String?, pink: Swift.String?, purple: Swift.String?, green: Swift.String?
  @objc final public let blue: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class HighlightPopup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, border: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class HighlightOnScreen_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let highlightColor: [Swift.String]?
  @objc final public let highlightColorHTML: Kitaboo_Reader_SDK.ColorHTML_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ColorHTML_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let yellow: Swift.String?, red: Swift.String?, purple: Swift.String?, green: Swift.String?
  @objc final public let blue: Swift.String?
  @objc final public let black: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ImageMarkup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let topBarBackground: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Main_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let canvasBackground: Swift.String?
  @objc final public let navigationArrows: Swift.String?
  @objc final public let toolbar: Kitaboo_Reader_SDK.MainToolbar_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class MainToolbar_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let top: Kitaboo_Reader_SDK.Top_V6_0?
  @objc final public let sideBottom: Kitaboo_Reader_SDK.SideBottom_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SideBottom_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, iconsColor: Swift.String?, shadow: Swift.String?
  @objc final public let selectedIconColor: Swift.String?
  @objc final public let selectedIconBg: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Top_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, iconsColor: Swift.String?, shadow: Swift.String?
  @objc final public let selectedIconColor: Swift.String?
  @objc final public let selectedIconBg: Swift.String?, titleTextColor: Swift.String?, navigationArrowColor: Swift.String?, profileBorder: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Markup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let markupIconColor: Swift.String?
  @objc final public let bookMarkupIconBorderColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class MarkupGlossary_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let linkLineColor: Swift.String?, popupBackground: Swift.String?
  @objc final public let iconBorderColor: Swift.String?, iconColor: Swift.String?
  @objc final public let titleColor: Swift.String?, languageTextColor: Swift.String?, descriptionTextColor: Swift.String?, synonymTextColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class MyData_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let overlayPanel: Kitaboo_Reader_SDK.OverlayPanel_V6_V6_0?
  @objc final public let popupBackground: Swift.String?
  @objc final public let popupBorder: Swift.String?
  @objc final public let tabBg: Swift.String?
  @objc final public let tabBorder: Swift.String?, tabTextColor: Swift.String?, selectedTabBorder: Swift.String?, selectedTextColor: Swift.String?
  @objc final public let selectedButton: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, deSelectedButton: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?
  @objc final public let iconColor: Swift.String?
  @objc final public let disabledIcon: Kitaboo_Reader_SDK.DisabledIcon_V6_0?
  @objc final public let textColor: Swift.String?, metadataColor: Swift.String?, contextualtextColor: Swift.String?, descriptionColor: Swift.String?
  @objc final public let subButton: Kitaboo_Reader_SDK.SubButton_V6_0?
  @objc final public let filterPopup: Kitaboo_Reader_SDK.FilterPopup_V6_0?
  @objc final public let settings: Kitaboo_Reader_SDK.SettingsV6_V6_0?
  @objc final public let notificationCircleColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class DisabledIcon_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let iconColor: Swift.String?, opacity: Swift.String?, backgroundHTML: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class FilterPopup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let borderColor: Swift.String?, allBoxBorderColor: Swift.String?, boxBorderColor: Swift.String?, checkColor: Swift.String?
  @objc final public let textColor: Swift.String?, arrowColor: Swift.String?, actionTextColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SettingsV6_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, titleColor: Swift.String?, iconColor: Swift.String?, boxBorderColor: Swift.String?
  @objc final public let sectionTitleColor: Swift.String?, textColor: Swift.String?, checkColor: Swift.String?
  @objc final public let actionButton: Kitaboo_Reader_SDK.ActionButton_V6_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SubButton_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let textIconColor: Swift.String?, disabledTextIconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Note_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?
  @objc final public let popupBorder: Swift.String?, titleColor: Swift.String?, backIconColor: Swift.String?, selectedIconBorder: Swift.String?
  @objc final public let contextualtextColor: Swift.String?, hintTextColor: Swift.String?, descriptionColor: Swift.String?, actionButtonColor: Swift.String?
  @objc final public let actionButtonColorDisabled: Kitaboo_Reader_SDK.OverlayPanel_V6_V6_0?
  @objc final public let metadataColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Pentool_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let toolbar: Kitaboo_Reader_SDK.PentoolToolbar_V6_0?
  @objc final public let pen: Kitaboo_Reader_SDK.Pen_V6_0?
  @objc final public let penColor: [Swift.String]?
  @objc final public let penColorHTML: Kitaboo_Reader_SDK.ColorHTML_V6_0?
  @objc final public let thickness: Kitaboo_Reader_SDK.Thickness_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Pen_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?, popupBorder: Swift.String?, shadow: Swift.String?, selectedBorderColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Thickness_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?, popupBorder: Swift.String?, shadow: Swift.String?, sliderColor: Swift.String?
  @objc final public let sliderFilledColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class PentoolToolbar_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, iconsColor: Swift.String?
  @objc final public let disabledIcon: Kitaboo_Reader_SDK.DisabledIcon_V6_0?
  @objc final public let selectedIconBackground: Swift.String?
  @objc final public let selectedIconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ReaderProfile_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let profileBorder: Swift.String?
  @objc final public let popupBackground: Swift.String?
  @objc final public let textColor: Swift.String?, actionTextColor: Swift.String?
  @objc final public let signout: Kitaboo_Reader_SDK.Signout_V6_0?
  @objc final public let linkColorSelected: Swift.String?, profileTextColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Signout_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let iconsColor: Swift.String?, textColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ReflowableReader_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let dayMode: Kitaboo_Reader_SDK.DayModeClass_V6_0?, sepiaMode: Kitaboo_Reader_SDK.DayModeClass_V6_0?, nightMode: Kitaboo_Reader_SDK.DayModeClass_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class DayModeClass_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let canvasBackground: Swift.String?, defaultTextColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ReaderSearch_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?
  @objc final public let inputPanelBg: Swift.String?
  @objc final public let popupBorder: Swift.String?, mainIconColor: Swift.String?, hintTextColor: Swift.String?, titleColor: Swift.String?
  @objc final public let tabBorder: Swift.String?, selectedTextColor: Swift.String?, selectedBgColor: Swift.String?, seperationBackground: Swift.String?
  @objc final public let crossIconColor: Swift.String?, descriptionColor: Swift.String?, subtextColor: Swift.String?, selectionTextColorBg: Swift.String?
  @objc final public let selectedTextColorBg: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Share_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let sharePopupBackground: Swift.String?, iconColor: Swift.String?
  @objc final public let shareSettings: Kitaboo_Reader_SDK.ShareSettings_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ShareSettings_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let sectionTitleColor: Swift.String?, boxBorderColor: Swift.String?, allBoxBorderColor: Swift.String?, checkColor: Swift.String?
  @objc final public let bottomBackground: Swift.String?, textColor: Swift.String?, mainActionColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SignoutButton_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, icons_color: Swift.String?, text_color: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ShareFeedback_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let emojiBackground: Swift.String?, feedbackRespBorder: Swift.String?, activeFeedbackBackground: Swift.String?, existingFeedbackBackground: Swift.String?
  @objc final public let editFeedbackBtnColor: Swift.String?, deleteFeedbackBtnColor: Swift.String?, topbarDECColor: Swift.String?, topbarProfileColor: Swift.String?
  @objc final public let dividerBackground: Swift.String?, feedbackQtnColor: Swift.String?, feedbackImproveColor: Swift.String?, feedbackRespColor: Swift.String?
  @objc final public let submitBackground: Swift.String?, editFeedbackColor: Swift.String?, deleteCancelBorder: Swift.String?, deleteOkBackground: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SlideshowMarkup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let boxShadow: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Tableofcontents_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let overlayPanel: Kitaboo_Reader_SDK.OverlayPanel_V6_V6_0?
  @objc final public let popupBackground: Swift.String?, popupBorder: Swift.String?, tabBg: Swift.String?, tabBorder: Swift.String?
  @objc final public let tabBorderWrapper: Swift.String?, tabTextColor: Swift.String?, selectedTabBorder: Swift.String?, selectedTextColor: Swift.String?
  @objc final public let chlabelFontweight: Swift.String?
  @objc final public let selectedToc: Kitaboo_Reader_SDK.SelectedToc_V6_0?
  @objc final public let titleColor: Swift.String?, descriptionColor: Swift.String?, pagenoColor: Swift.String?, iconsColor: Swift.String?
  @objc final public let moreIconColor: Swift.String?, dividerColor: Swift.String?
  @objc final public let closeSlider: Kitaboo_Reader_SDK.CloseSlider_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class CloseSlider_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let iconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class SelectedToc_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, divider: Swift.String?, titleColor: Swift.String?, descriptionColor: Swift.String?
  @objc final public let arrowColor: Swift.String?, iconColor: Swift.String?, sideTabBackground: Swift.String?, levelBackground: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class TeacherSettings_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?, popupBorder: Swift.String?, titleColor: Swift.String?, mainIconColor: Swift.String?
  @objc final public let textColor: Swift.String?
  @objc final public let selectedIconColor: Swift.String?
  @objc final public let selectedIconBg: Swift.String?, pen1Color: Swift.String?, pen2Color: Swift.String?, boxBorderColor: Swift.String?
  @objc final public let checkColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class TeacherStudentlist_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?, popupBorder: Swift.String?, shadow: Swift.String?, titleColor: Swift.String?
  @objc final public let hintTextColor: Swift.String?, tabBorder: Swift.String?, tabSelectedBar: Swift.String?, tabTextColor: Swift.String?
  @objc final public let nameColor: Swift.String?, dataAddedColor: Swift.String?, nodataAddedColor: Swift.String?
  @objc final public let refresh: Kitaboo_Reader_SDK.Refresh_V6_0?
  @objc final public let selectedColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Refresh_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let boxBorderColor: Swift.String?, buttonTextColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class TextAnnotation_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?
  @objc final public let lineColor: Swift.String?, iconsColor: Swift.String?
  @objc final public let disabledIcon: Kitaboo_Reader_SDK.DisabledIcon_V6_0?
  @objc final public let selectedIconBg: Swift.String?
  @objc final public let selectedIconColor: Swift.String?
  @objc final public let alignPopup: Kitaboo_Reader_SDK.AlignPopup_V6_0?
  @objc final public let colorPopup: Kitaboo_Reader_SDK.ColorPopup_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class AlignPopup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, iconColor: Swift.String?, selectedBorderColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ColorPopup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let background: Swift.String?, selectedBorderColor: Swift.String?
  @objc final public let color1: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, color2: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, color3: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, color4: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?
  @objc final public let color5: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, color6: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, color7: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, color8: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?
  @objc final public let color9: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?, color10: Kitaboo_Reader_SDK.DeSelectedButton_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ThumbnailSlider_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?, sliderColor: Swift.String?, chapterIconColor: Swift.String?, sliderFilledColor: Swift.String?
  @objc final public let defaultThumbnailColor: Swift.String?, selectedThumbnailColor: Swift.String?
  @objc final public let thumbnailTextColor: Swift.String?
  @objc final public let selectedTitleColor: Swift.String?, titleColor: Swift.String?, iconColor: Swift.String?, textColor: Swift.String?
  @objc final public let pageSubmittedBorderColor: Swift.String?, pageNotSubmittedBorderColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class VideoMarkup_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let plyr: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Zoom_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let popupBackground: Swift.String?, sliderColor: Swift.String?, sliderFilledColor: Swift.String?, iconColor: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class Signin_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let leftBackground: Swift.String?, signinBackground: Swift.String?, horizontalDivider: Swift.String?, tabSelected: Swift.String?
  @objc final public let tabDeselected: Swift.String?, inputOutline: Swift.String?, inputLabel: Swift.String?, inputUsernamepassword: Swift.String?
  @objc final public let signinText: Swift.String?, signinTextDisabled: Swift.String?, signinDisabled: Swift.String?, signinEnabled: Swift.String?
  @objc final public let remebermeRecoverPassword: Swift.String?, errorMessage: Swift.String?, downloadappText: Swift.String?, autofillbackground: Swift.String?
  @objc final public let leftHeadingTextcolor: Swift.String?, spinner: Swift.String?, termconditiontext: Swift.String?, linkText: Swift.String?
  @objc final public let validationtext: Swift.String?
  @objc final public let Selected_Tab_Text: Swift.String?
  @objc final public let Signin_Remeberme: Swift.String?
  @objc final public let Signin_Remeberme_checkbox_bgColor: Swift.String?
  @objc final public let Signin_RecoverPassword: Swift.String?, freetrial_text: Swift.String?, freetrial_btn_border: Swift.String?, Signup_Input_border: Swift.String?, Signup_Input_Focus_border: Swift.String?
  @objc final public let forgotPassword: Kitaboo_Reader_SDK.ForgotPassword_V6_0?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class ForgotPassword_V6_0 : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let leftBackground: Swift.String?, signinBackground: Swift.String?, signinDisabled: Swift.String?, signinEnabled: Swift.String?
  @objc final public let cancelDisabled: Swift.String?, cancelOutline: Swift.String?, errorMessage: Swift.String?, Invalid_email_input_border: Swift.String?, Cancel_Text: Swift.String?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class TextSelectionHandle : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class TextSelectionView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var isStartSelectionView: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var selectionHandleViewColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var holderView: Kitaboo_Reader_SDK.TextSelectionHandle?
  @objc @_Concurrency.MainActor @preconcurrency public var lineID: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, isStartSelectionView: Swift.Bool, selectionHandleColor: UIKit.UIColor?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func getCompleteFrame() -> CoreFoundation.CGRect
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TextSearchResult : ObjectiveC.NSObject {
  public var searchResultAttributedString: Foundation.NSAttributedString?
  public var href: Swift.String
  public var pageIndex: Swift.String
  public var displayNumber: Swift.String
  public var searchedWord: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HDVoiceRecognizeManagerDelegate {
  @objc func voiceRecognizerAuthState(authState: Speech.SFSpeechRecognizerAuthorizationStatus)
  @objc func didStopVocieRecognizing()
  @objc func recognizerNotAvailable()
}
@_inheritsConvenienceInitializers @objc(HDVoiceRecognizeManager) open class HDVoiceRecognizeManager : ObjectiveC.NSObject, Speech.SFSpeechRecognizerDelegate {
  @objc weak open var delegate: (any Kitaboo_Reader_SDK.HDVoiceRecognizeManagerDelegate)?
  @objc open var result: ((Swift.String?, (any Swift.Error)?) -> Swift.Void)?
  @objc open var voiceSearchButton: UIKit.UIButton!
  @objc open var themeColor: UIKit.UIColor?
  @objc open var autoStopVoiceRecognizingTime: Swift.Int
  @objc open var languageCode: Swift.String
  @objc open func startRecognize()
  @objc open func requestPermission()
  @objc open func cancelRecognization()
  @objc override dynamic public init()
  @objc deinit
}
public protocol ShareSettingsControllerDelegate : AnyObject {
  func didClickOnShareSettingsCancelButton()
  func didClickOnShareSettingsSaveButton(bookClassInfoVO: Kitaboo_Reader_SDK.SDKBookClassInfoVO)
  func didClickOnNoteShareSettingsSaveButton(highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ShareSettingsController : UIKit.UIViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, Kitaboo_Reader_SDK.HDDropDownDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func didSelectItem(name: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objc public class Constants : ObjectiveC.NSObject {
  @objc public static func CGRectInflateRect(_ rect: CoreFoundation.CGRect, _ px: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
  @objc public static func isRTL() -> Swift.Bool
  @objc public static let SYSTEM_VERSION_EQUAL_TO: (_ v: Swift.String) -> Swift.Bool
  @objc public static let SYSTEM_VERSION_GREATER_THAN: (_ v: Swift.String) -> Swift.Bool
  @objc public static let SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO: (_ v: Swift.String) -> Swift.Bool
  @objc public static let SYSTEM_VERSION_LESS_THAN: (_ v: Swift.String) -> Swift.Bool
  public static func valueForKeyPath(dictionary: Foundation.NSMutableDictionary, keyPath: Swift.String) -> Any?
  @objc public static let SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO: (_ v: Swift.String) -> Swift.Bool
  @objc public static let ICON_FONT_SIZE: CoreFoundation.CGFloat
  @objc public static let ICON_FONT_SIZE_STATISTIC_CELL: CoreFoundation.CGFloat
  @objc public static let CLOSE_ICON_FONT_SIZE_STATISTIC_CELL: CoreFoundation.CGFloat
  @objc public static let BACK_TO_BOOKSHELF_BUTTON: Swift.Int
  @objc public static let TOC_BUTTON: Swift.Int
  @objc public static let MYDATA_BUTTON: Swift.Int
  @objc public static let PENTOOL_BUTTON: Swift.Int
  @objc public static let SUBMIT_BUTTON: Swift.Int
  @objc public static let REVIEW_BUTTON: Swift.Int
  @objc public static let STICKY_NOTE_BUTTON: Swift.Int
  @objc public static let PHONE_SEARCH_BUTTON: Swift.Int
  @objc public static let READ_ALOUD_BUTTON: Swift.Int
  @objc public static let CLEAR_DATA_BUTTON: Swift.Int
  @objc public static let POP_OVER_BUTTON: Swift.Int
  @objc public static let PROTRACTOR_BUTTON: Swift.Int
  @objc public static let HIGHLIGHT_VIEW_UNDERLINE_HEIGHT: CoreFoundation.CGFloat
  @objc public static let OAUTH_CONSUMER_KEY: Swift.String
  @objc public static let OAUTH_SECRET_KEY: Swift.String
  @objc public static let TEACHER_KEY: Swift.String
  @objc public static let STUDENTS_KEY: Swift.String
  @objc public static let COPY_PREPACKAGE_BOOKS: Swift.String
  @objc public static let SHOW_HELP_SCREEN_KEY: Swift.String
  @objc public static let SHOW_HELP_SCREEN_BUTTON_KEY: Swift.String
  @objc public static let USE_BOOKSHELF_TEMPLATE_KEY: Swift.String
  @objc public static let BOOKSHELF_TEMPLATES_KEY: Swift.String
  @objc public static let ENABLE_BOOKMARK_FEATURE_KEY: Swift.String
  @objc public static let KLANGUAGE_LOCALIZATION_UPDATED: Swift.String
  @objc public static let USE_BOOKPLAYER_TEMPLATE_KEY: Swift.String
  @objc public static let BOOKPLAYER_TEMPLATES_KEY: Swift.String
  @objc public static let LOGIN_TIME: Swift.String
  @objc public static let LOGIN_TIME_DATE_FORMATTER: Swift.String
  @objc public static let LAST_PROFILE_PICTURE_KEY: Swift.String
  @objc public static let AUTO_READ_ALOUD: Swift.String
  @objc public static let iOSDecryptedResources: Swift.String
  @objc public static let relowableLaunchImageHeight: Swift.Int
  @objc public static let relowableLaunchImageBottom: Swift.Int
  @objc public static let topBottomMargin: Swift.Int
  @objc public static let leftRightMargin: Swift.Int
  @objc public static let READER_ACCESSIBILITY_FILE_NAME: Swift.String
  @objc public static let COMMENT_MAX_CHAR_LIMIT: Swift.Int
  @objc public static let NOTE_MAX_CHAR_LIMIT: Swift.Int
  @objc public static let NEW_UI_HIGHLIGHT_COLOR: Swift.String
  @objc public static let TIME_FORMAT: Swift.String
  @objc public static let MYDATA_DATE_FORMAT: Swift.String
  @objc public static let FONT_SIZE_FACTOR: Swift.Float
  @objc public static let NOTIFICATION_BOOK_CLASS_INFO_FETCHED: Swift.String
  @objc public enum ClientURLType : Swift.Int {
    case none
    case forgotPassword
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
public let EQUATION_EDITOR_IDENTIFYING_KEY: Swift.String
public let SAPLING_LEARNING_OPTIONS: Swift.String
public let EQUATION_EDITOR_IDENTIFYING_VALUE: Swift.String
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class HDReflowableLayoutSettingController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate, UIKit.UIPickerViewDelegate, UIKit.UIPickerViewDataSource {
  @objc @_Concurrency.MainActor @preconcurrency public var resetReaderSetting: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var fontFamilyDidChange: ((Swift.String) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var fontSizeDidChange: ((CoreFoundation.CGFloat) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var didEnablePagination: ((Swift.Bool) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var didChangeReaderMode: ((Swift.Int) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var didChangeTextAliginment: ((Swift.Int) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var didChangeLineSpacing: ((Swift.Int) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var didChangeMargin: ((Swift.Int) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var willDismissController: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var fontFamilyArray: Foundation.NSArray
  @objc @_Concurrency.MainActor @preconcurrency public var backgroundThemeColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency public var borderColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var themeColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var textColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency public var titleTextColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var buttonTitleColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var buttonBorderColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var selectedButtonTitleColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var selectedButtonBorderColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var resetButtonTitleColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var sliderThumbColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var sliderTrackTintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var scrollSwitchTintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var fontFamilyThemeColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var separationLineColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency public var customFontName: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency public func enableFontFamilyView(_ isEnable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableFontSizeView(_ isEnable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableAlignmentView(_ isEnable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableLineSpacingView(_ isEnable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableMarginView(_ isEnable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableReaderModeView(_ isEnable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func enableScrollModeView(_ isEnable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setCustomFontNameForLayout(fontName: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func setBackgroundColorForView(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setThemeColorToView(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setTextAlignmentOptions(_ options: Foundation.NSArray)
  @objc @_Concurrency.MainActor @preconcurrency public func setLineSpacingOptions(_ options: Foundation.NSArray)
  @objc @_Concurrency.MainActor @preconcurrency public func setReaderMarginOptions(_ options: Foundation.NSArray)
  @objc @_Concurrency.MainActor @preconcurrency public func setReaderModeOptions(_ options: Foundation.NSArray)
  @objc @_Concurrency.MainActor @preconcurrency public func setFontSize(_ currentFontSize: ObjectiveC.NSInteger)
  @objc @_Concurrency.MainActor @preconcurrency public func setPaginationEnable(_ enabled: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setReaderModeEnable(_ modeType: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentTextAlignment(_ alignmentType: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentFontFamily(_ fontName: Foundation.NSString)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentLineSpacing(_ lineSpacing: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentMargin(_ margin: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDReflowableLayoutSettingController {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, viewForRow row: Swift.Int, forComponent component: Swift.Int, reusing view: UIKit.UIView?) -> UIKit.UIView
}
@_inheritsConvenienceInitializers @objc open class HDKitabooCryptographyManager : ObjectiveC.NSObject {
  @objc public static let sharedInstanceSharedObject: Kitaboo_Reader_SDK.HDKitabooCryptographyManager
  @objc public class func sharedInstance() -> Self
  @objc public func getEncryptedString(_ decryptedString: Swift.String?) -> Swift.String?
  @objc public func getDecryptedString(_ encryptedString: Swift.String?) -> Swift.String?
  @objc public func getEncryptedData(_ decryptedData: Foundation.Data?) -> Foundation.Data?
  @objc public func getDecryptedData(_ encryptedData: Foundation.Data?) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
@objc extension UIKit.UIImage {
  @objc public static func delayCentisecondsForImageAtIndex(_ source: ImageIO.CGImageSource, _ i: _Builtin_stddef.size_t) -> Swift.Int
  @objc public static func createImagesAndDelays(_ source: ImageIO.CGImageSource, _ count: _Builtin_stddef.size_t, _ imagesOut: Swift.UnsafeMutablePointer<CoreGraphics.CGImage?>, _ delayCentisecondsOut: Swift.UnsafeMutablePointer<Swift.Int>)
  @objc public static func sum(_ count: _Builtin_stddef.size_t, _ values: Swift.UnsafePointer<Swift.Int>) -> Swift.Int
  @objc public static func pairGCD(_ a: Swift.Int, _ b: Swift.Int) -> Swift.Int
  @objc public static func vectorGCD(_ count: _Builtin_stddef.size_t, _ values: Swift.UnsafePointer<Swift.Int>) -> Swift.Int
  @objc public static func frameArray(_ count: _Builtin_stddef.size_t, _ images: Swift.UnsafePointer<CoreGraphics.CGImage?>, _ delayCentiseconds: Swift.UnsafePointer<Swift.Int>, _ totalDurationCentiseconds: Swift.Int) -> [UIKit.UIImage]
  @objc public static func animatedImageWithAnimatedGIFImageSource(_ source: ImageIO.CGImageSource) -> UIKit.UIImage?
  @objc public static func animatedImageWithAnimatedGIFReleasingImageSource(_ source: ImageIO.CGImageSource?) -> UIKit.UIImage?
  @objc dynamic public class func animatedImage(withAnimatedGIFData data: Foundation.Data) -> UIKit.UIImage?
  @objc dynamic public class func animatedImage(withAnimatedGIFURL url: Foundation.URL) -> UIKit.UIImage?
}
public protocol HDAVTOCPlayerControllerDelegate : ObjectiveC.NSObjectProtocol {
  func videoTOCPlayerDidStopPlaying()
  func videoTOCPlayerDidFinishPlaying()
  func videoTOCPlayerDidPausePlaying()
  func videoTOCPlayerDidEnterFullScreen()
}
@objc @_Concurrency.MainActor @preconcurrency open class HDAVTOCPlayerController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDAVTOCPlayerControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(tocPlayerVideoPath avPath: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setTOCData(_ data: [Any]?, withTitle title: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(KitabooServiceMetaData) open class KitabooServiceMetaData : ObjectiveC.NSObject {
  @objc open var initialisedValue: Swift.String
  @objc open var actionType: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AccessibilityHelper : ObjectiveC.NSObject {
  @objc public static var readerAccessibilityBundle: Foundation.Bundle?
  @objc public static var appAccessibilityBundle: Foundation.Bundle?
  @objc public static var language: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setAccessibility(ForElementID elementID: Swift.String, WithFile file: Swift.String, argument text: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setAccessibility(ForElementID elementID: Swift.String, WithFile file: Swift.String, argument text: Swift.String, value val: Swift.String, altText alttxt: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setAccessibility(ForElementID elementID: Swift.String, WithFile file: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setAccessibility(elementID: Swift.String, WithFile file: Swift.String, withArgument text: Swift.String = "", withValue desc: Swift.String = "", altText alttxt: Swift.String = "")
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func disableAccessibilityOn(view: UIKit.UIView)
}
@_hasMissingDesignatedInitializers public class HSBookCFIParser {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency open class HDEmptyViewForMedia : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PenDrawingObject : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol KitabooDocumentPlayerDelegate : AnyObject {
  func documentPlayerDidClosed()
}
@objc @_Concurrency.MainActor @preconcurrency open class KitabooDocumentPlayer : UIKit.UIViewController, UIKit.UIPrintInteractionControllerDelegate, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.KitabooDocumentPlayerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var themeColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency public static var isExternalResource: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public class func setIsExternalResource(isExternalResource: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc public func printInteractionController(_ printInteractionController: UIKit.UIPrintInteractionController, choosePaper paperList: [UIKit.UIPrintPaper]) -> UIKit.UIPrintPaper
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didRotate(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PdfLineExtractVO : ObjectiveC.NSObject {
  @objc public var lineID: Swift.Int
  @objc public var lineY: Swift.Float
  @objc public var lineX: Swift.Float
  @objc public var paraID: Swift.Int
  @objc public var extractWords: [Kitaboo_Reader_SDK.PdfWordExtractVO]
  @objc public var lineText: Swift.String
  @objc public var transformedFrame: CoreFoundation.CGRect
  @objc public var highlightedRect: CoreFoundation.CGRect
  @objc public var savedHighlightedRect: CoreFoundation.CGRect
  @objc public func addExtractedWord(_ word: Kitaboo_Reader_SDK.PdfWordExtractVO)
  @objc public func getFrameOnCropBox() -> CoreFoundation.CGRect
  @objc public func getStartWordId() -> Swift.Int
  @objc public func getEndWordId() -> Swift.Int
  @objc public func getClosestWordToPosition(_ xPosition: Swift.Float) -> Kitaboo_Reader_SDK.PdfWordExtractVO?
  @objc public func getWordThatContainsPoint(_ point: CoreFoundation.CGPoint) -> Kitaboo_Reader_SDK.PdfWordExtractVO?
  @objc public func getClosestWordToRect(_ frame: CoreFoundation.CGRect) -> Kitaboo_Reader_SDK.PdfWordExtractVO?
  @objc public func getWordByWordID(_ wordId: Swift.Int) -> Kitaboo_Reader_SDK.PdfWordExtractVO?
  @objc public func getSelectionRectForMinX(_ min: CoreFoundation.CGPoint, andMax max: CoreFoundation.CGPoint, withStartLineID startlineID: Swift.Int, andEndLineID endLineID: Swift.Int) -> CoreFoundation.CGRect
  @objc public func getSelectionTextForMinX(_ min: CoreFoundation.CGPoint, andMax max: CoreFoundation.CGPoint, withStartLineID startlineID: Swift.Int, andEndLineID endLineID: Swift.Int) -> Swift.String
  @objc public func getHighlightForRect(_ selectedRect: CoreFoundation.CGRect, withBGColor color: UIKit.UIColor) -> UIKit.UIView
  @objc public func getSelectedHighlightedViewForRect(_ selectedRect: CoreFoundation.CGRect, withBGColor color: UIKit.UIColor) -> Kitaboo_Reader_SDK.UGCLabel
  @objc public func checkPointWithinSelectionLine(_ point: CoreFoundation.CGPoint) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc(HDElasticSearchRequest) open class HDElasticSearchRequest : ObjectiveC.NSObject {
  @objc open var elasticSearchText: Swift.String?
  @objc open var elasticSearchOn: Swift.String?
  @objc open var elasticSearchType: Swift.String?
  @objc open var totalBookIDs: Swift.Array<Any>?
  @objc open var elasticSearchFields: Swift.Array<Any>?
  @objc open var elasticSearchAdvancedFilter: Swift.Dictionary<Swift.String, Any>?
  @objc open var elasticSearchFrom: Swift.String?
  @objc open var elasticSearchSize: Swift.String?
  @objc public init(searchText: Swift.String, searchOn: Swift.String, searchType: Swift.String, bookIds: Swift.Array<Any>, searchField: Swift.Array<Any>?, advancedFilter: Swift.Dictionary<Swift.String, Any>?, from: Swift.String, size: Swift.String)
  @objc deinit
}
@objc public protocol BookMarkViewDelegate {
  @objc func didTapOnBookMark(_ bookmarkView: Kitaboo_Reader_SDK.BookMarkView)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency open class BookMarkView : UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.BookMarkViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var pageNumber: Foundation.NSNumber
  @_Concurrency.MainActor @preconcurrency public var bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(bookmarkIcon: Swift.String, selectedBookmarkIcon: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(bookmarkIcon: Swift.String, selectedBookmarkIcon: Swift.String, bookmarkSize: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(bookmarkSize: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor @preconcurrency public func setBookmarkColorForNormalState(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setBookmarkColorForSelectedState(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func updateBookmarkIcon()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class NoteLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor @preconcurrency public var ugcUUID: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class HDMediaBookParser : ObjectiveC.NSObject {
  @objc open var bookParsingCompleted: ((Kitaboo_Reader_SDK.HDMediaBookModel) -> ())?
  @objc open var bookParsingFailed: ((any Swift.Error) -> ())?
  @objc open func parseTOCTimeIndexJsonForAudio(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel, tocjsonPath: Swift.String? = nil, timeIndexPath: Swift.String? = nil)
  @objc open func parseTOCTimeIndexJsonForVideo(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel, tocjsonPath: Swift.String? = nil, timeIndexPath: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public let kRefreshData: Swift.String
public let kFontSizeChangeKey: Swift.String
public let kReaderModeChangeKey: Swift.String
public let kPaginationChangeKey: Swift.String
public let kTextAlignmentChangeKey: Swift.String
public let kFontFamilyChangeKey: Swift.String
public let kLineSpacingChangeKey: Swift.String
public let kMarginChangeKey: Swift.String
public let kDayModeBGColor: Swift.String
public let kSepiaModeBGColor: Swift.String
public let kNightModeBGColor: Swift.String
public let kDayModeLoaderColor: Swift.String
public let kNightModeLoaderColor: Swift.String
public let kSepiaModeLoaderColor: Swift.String
public let kReaderThemeHeaderColor: Swift.String
public let kReaderThemeColor: Swift.String
public let kGlossary: Swift.String
public let kLoadPopup: Swift.String
public let kHighlightTapped: Swift.String
public let knoteTapped: Swift.String
public let kSelectionStart: Swift.String
public let kSelectionChange: Swift.String
public let kMathLoad: Swift.String
public let kClearSelection: Swift.String
public let kWordClicked: Swift.String
public let kDayModeYellowColor: Swift.String
public let kDayModeRedColor: Swift.String
public let kDayModeIconSelectionColor: Swift.String
public let kDayModeIconColor: Swift.String
public let kDayModeBackgroundColor: Swift.String
public let kNightModeYellowColor: Swift.String
public let kNightModeRedColor: Swift.String
public let kNightModeIconSelectionColor: Swift.String
public let kNightModeIconColor: Swift.String
public let kNightModeBackgroundColor: Swift.String
public let kEndOfChapter: Swift.String
public let kPreviousChapter: Swift.String
public let kNextChapter: Swift.String
public let kHeaderFooterBackground: Swift.String
public let kHeaderFooterTextColorDayMode: Swift.String
public let kHeaderFooterLabelBackgroundNightMode: Swift.String
public let kHTML: Swift.String
public let kHTM: Swift.String
public let kXHTML: Swift.String
public let kHTML_HTM_MIME_TYPE: Swift.String
public let kXHTML_MIME_TYPE: Swift.String
public let kUTF_8: Swift.String
@objc public enum FONT_SIZE : Swift.Int {
  case DEFAULT_FONT = 0
  case SMALL_FONT = 1
  case MEDIUM_FONT = 2
  case LARGE_FONT = 3
  case X_LARGE_FONT = 4
  case XX_LARGE_FONT = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum READER_MODE : Swift.Int {
  case DAY_MODE = 0
  case SEPIA_MODE = 1
  case NIGHT_MODE = 2
  case DEFAULT_MODE = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TEXT_ALIGNMENT : Swift.Int {
  case LEFT_ALIGNMENT = 0
  case CENTER_ALIGNMENT = 1
  case RIGHT_ALIGNMENT = 2
  case JUSTIFY_ALIGNMENT = 3
  case DEFAULT_ALIGNMENT = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TEXT_LINESPACING : Swift.Int {
  case DEFAULT_LINESPACING = 0
  case SMALL_LINESPACING = 1
  case MEDIUM_LINESPACING = 2
  case LARGE_LINESPACING = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum READER_MARGIN : Swift.Int {
  case DEFAULT_MARGIN = 0
  case SMALL_MARGIN = 1
  case MEDIUM_MARGIN = 2
  case LARGE_MARGIN = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PageSequence : Swift.Int {
  case CURRENT_PAGE = 0
  case PREVIOUS_PAGE = 1
  case NEXT_PAGE = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ScrollDirection : Swift.Int {
  case SCROLL_NONE = 0
  case SCROLL_DOWN = 1
  case SCROLL_UP = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HighlightColor : Swift.Int {
  case YELLOW_COLOR = 0
  case RED_COLOR = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class HSXHTMLTOCParser : ObjectiveC.NSObject, Foundation.XMLParserDelegate {
  @objc public var tocs: [Kitaboo_Reader_SDK.EPUBToc]
  @objc public var tocPageList: [Kitaboo_Reader_SDK.EPUBTOCPage]
  @objc public var _isbn: Swift.String
  @objc weak public var _delegate: (any Kitaboo_Reader_SDK.HSOPFParserDelegate)?
  @objc public init(book: Kitaboo_Reader_SDK.EPUBBookVO)
  @objc public func parse(filePath: Swift.String, error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSError?>)
  @objc public func parseEncryptedTOC(filePath: Swift.String, error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSError?>)
  @objc public func parserDidStartDocument(_ parser: Foundation.XMLParser)
  @objc public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc public func parser(_ parser: Foundation.XMLParser, foundCDATA CDATABlock: Foundation.Data)
  @objc public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
  @objc deinit
}
@objc public enum DRAWING_MODE : Swift.Int {
  case normal
  case review
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PenMode : Swift.Int {
  case drawing
  case selection
  case markupTap
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class HSWebkitManager : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency public func getWebViewWithSize(webViewFrame: CoreFoundation.CGRect) -> Kitaboo_Reader_SDK.HDWKWebView
  @_Concurrency.MainActor @preconcurrency public func addScriptTo(config: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc public enum CurrentState : Swift.Int {
  case PLAYING = 0, PAUSE, CANCELLED, LOADED, UNKNOWN, LOADING
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class HDMediaBookModel : ObjectiveC.NSObject {
  @objc open var mediaBookId: Swift.String?
  @objc open var mediaBookPath: Swift.String?
  @objc open var mediaBookTitle: Swift.String?
  @objc open var mediaNarrationSpeedRate: Swift.Float
  @objc open var thumbnailURL: Swift.String?
  @objc open var thumbnailPath: Swift.String?
  @objc open var mediaCurrentState: Kitaboo_Reader_SDK.CurrentState
  @objc open var totalTime: Swift.Int
  @objc open var currentTime: Swift.Int
  @objc open var currentChapter: Kitaboo_Reader_SDK.HDMediaBookChapterVO?
  @objc open var chapters: Swift.Array<Kitaboo_Reader_SDK.HDMediaBookChapterVO>?
  @objc open var transcripts: Swift.Array<Kitaboo_Reader_SDK.HDMediaBookTranscriptVO>?
  @objc open var timeIndexVOArray: Swift.Array<Kitaboo_Reader_SDK.HDMediaBookTimeIndexVO>?
  @objc open var mediaBookEncryptionType: Swift.String?
  @objc open var mediaBookISBN: Swift.String?
  @objc open var mediaSupportedAudios: [Swift.String]?
  @objc open var mediaSupportedSubtitles: [Swift.String]?
  @objc open var mediaSupportedResolutions: [Swift.String]?
  @objc open var mediaBookAdditonalInfo: [Swift.String : Swift.String]?
  @objc open var author: Swift.String?
  @objc open var readBy: Swift.String?
  @objc open var publisher: Swift.String?
  @objc open var inLanguage: Swift.String?
  @objc open var accessibilitySummary: Swift.String?
  @objc open var multiAudioPackage: Swift.Bool
  @objc open var multiLevelChapter: Swift.Bool
  @objc open var mediaDuration: Swift.Int
  @objc open var cookies: [Swift.String : Any]?
  @objc open var mediaBookAllChaptersArray: [Kitaboo_Reader_SDK.HDMediaBookChapterVO] {
    @objc get
    @objc set
  }
  @objc open var volumn: Swift.Float
  @objc open var isMute: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class HDReflowableReaderConfiguration {
  public static let sharedInstance: Kitaboo_Reader_SDK.HDReflowableReaderConfiguration
  public func setReaderFontSetting(_ defaultFontSetting: Kitaboo_Reader_SDK.ReaderFontSetting)
  public func setReflowableReaderMode(_ readerMode: Kitaboo_Reader_SDK.READER_MODE)
  public func setReflowableFontSize(_ fontSize: Kitaboo_Reader_SDK.FONT_SIZE)
  public func setReflowableTextAlignment(_ textAlignment: Kitaboo_Reader_SDK.TEXT_ALIGNMENT)
  public func setReflowableBrightnessValue(_ brightnessValue: CoreFoundation.CGFloat)
  public func setReflowablePagination(_ pagination: Swift.Bool)
  public func setReflowableLineSpacing(_ lineSpacing: Kitaboo_Reader_SDK.TEXT_LINESPACING)
  public func setReflowableMargin(_ margin: Kitaboo_Reader_SDK.READER_MARGIN)
  public func setReflowableFontFamily(_ fontFamily: Swift.String)
  public func getReflowableReaderMode() -> Kitaboo_Reader_SDK.READER_MODE
  public func getReflowableTextAlignment() -> Kitaboo_Reader_SDK.TEXT_ALIGNMENT
  public func getReflowableFontSize() -> Kitaboo_Reader_SDK.FONT_SIZE
  public func getReflowableLineSpacing() -> Kitaboo_Reader_SDK.TEXT_LINESPACING
  public func getReflowableMargin() -> Kitaboo_Reader_SDK.READER_MARGIN
  public func getReflowableBrightnessValue() -> CoreFoundation.CGFloat
  public func getReflowableFontFamily() -> Swift.String
  public func getReflowablePagination() -> Swift.Bool
  public func reflowableReaderDefaultConfiguration()
  @objc deinit
}
@objc(KitabooUser) open class KitabooUser : ObjectiveC.NSObject {
  @objc public var clientID: Swift.String?
  @objc public var coverPhotoURL: Swift.String?
  @objc public var email: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var firstName: Swift.String?
  @objc public var level: Swift.String?
  @objc public var profilePicURL: Swift.String?
  @objc public var roles: Swift.Array<Any>?
  @objc public var userID: Swift.String?
  @objc public var userToken: Swift.String?
  @objc public var role: Swift.String?
  @objc public var userName: Swift.String?
  @objc public var userLoggedInTime: Swift.String?
  @objc public var serverUserID: Swift.String?
  @objc public var partnerReferenceId: Swift.String?
  public var subscriptionPresent: Swift.Bool?
  @objc public init(userInfo: Swift.Dictionary<Swift.String, Any>, userToken: Swift.String, role: Swift.String)
  @objc public init(userInfo: Swift.Dictionary<Swift.String, Any>, userToken: Swift.String)
  @objc public init(userInfo: Swift.Dictionary<Swift.String, Any>, userToken: Swift.String, userLoggedInTime loggedInTime: Swift.String? = nil)
  @objc public init(userId: Swift.String, userInfo: Swift.Dictionary<Swift.String, Any>, userToken: Swift.String)
  @objc public init(userId: Swift.String, userInfo: Swift.Dictionary<Swift.String, Any>, userToken: Swift.String, userLoggedInTime loggedInTime: Swift.String? = nil)
  @objc public init(userToken: Swift.String, userID: Swift.String, firstName: Swift.String, lastName: Swift.String, email: Swift.String)
  @objc deinit
}
@objc extension UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setTitleForNormalState(_ title: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setTitleForAllState(_ title: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setTitleForSelectedState(_ title: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setTitleColorForNormalState(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setTitleColorForSelectedState(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setTitleColorForDisableState(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setImageForNormalState(_ image: UIKit.UIImage)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setImageForSelectedState(_ image: UIKit.UIImage)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setRoundedCornerWithRadius(_ radius: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setTitleLabelRoundedCornerWithRadius(_ radius: CoreFoundation.CGFloat)
}
@objc public enum SleepAction : Swift.Int {
  case kSleepActionNone = 0, kSleepAction15Min, kSleepAction30Min, kSleepAction45Min, kSleepActionCustom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol HDKitabooSleepTimerControllerDelegate {
  @objc optional func didRemoveSleepTimerView()
  @objc optional func didSetAudioSleepTimer(selectedSleepTime: Foundation.TimeInterval, selectedSleepAction: Kitaboo_Reader_SDK.SleepAction)
  @objc optional func didSetAudioSleepTimerOff()
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class HDKitabooSleepTimerController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDKitabooSleepTimerControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setSourceViewForSleepTimerViewController(_ view: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency public func updateSelectedSleepAction(_ selectedSleepAction: Kitaboo_Reader_SDK.SleepAction)
  @objc @_Concurrency.MainActor @preconcurrency public func updateCustomSelectedTime(time: Foundation.TimeInterval)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class MarkupView : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var pageID: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var linkID: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var xCordinate: Swift.String
  @_Concurrency.MainActor @preconcurrency public var yCordinate: Swift.String
  @_Concurrency.MainActor @preconcurrency public var sdkFIBVO: Kitaboo_Reader_SDK.SDKFIBVO?
  @_Concurrency.MainActor @preconcurrency public func setAsInvisibleMarkup()
  @_Concurrency.MainActor @preconcurrency public func updateForDropDown(withInputText inputText: Swift.String?, withLinkProperties properties: Swift.String?)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objc open class HDMediaBookChapterVO : ObjectiveC.NSObject {
  @objc open var chapterTitle: Swift.String?
  @objc open var chapterDescription: Swift.String?
  @objc open var chapterSeekTime: Swift.Int
  @objc open var chapterThumbnailURL: Swift.String?
  @objc open var chapterThumbnailPath: Swift.String?
  @objc open var url: Swift.String?
  @objc open var urlLastPathComponent: Swift.String?
  @objc open var assetM3U8Name: Swift.String?
  @objc open var children: [Kitaboo_Reader_SDK.HDMediaBookChapterVO]?
  @objc open var chapterStartTimeForBook: Swift.Int
  @objc open var chapterTotalTime: Swift.Int
  @objc open var avAssetTotalTime: Swift.Int
  @objc open var hlsChpaterKeyData: Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
@objc(ProtractorViewControllerDelegate) public protocol ProtractorViewControllerDelegate {
  @objc func didCloseProtractorWith(protractorVO: Kitaboo_Reader_SDK.SDKProtractorVO?)
}
@_inheritsConvenienceInitializers @objc(ProtractorViewController) @_Concurrency.MainActor @preconcurrency open class ProtractorViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.ProtractorViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor @preconcurrency public func setProtractorCanvas(canvas: Kitaboo_Reader_SDK.PenDrawingView)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class HDKitabooFontManager : ObjectiveC.NSObject {
  public static let defaultFontName: Swift.String
  @objc public static func shared() -> Kitaboo_Reader_SDK.HDKitabooFontManager
  @objc public static func setFontName(fontName: Swift.String)
  @objc public static func getFontName() -> Swift.String
  @objc open func registerFont(withFileNameString fileNameString: Swift.String? = nil, bundle: Foundation.Bundle? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
@objc public enum EPUB_FILE_TYPE : Swift.Int16 {
  case ePubFileTypeXhtml = 0
  case ePubFileTypeJpeg = 1
  case ePubFileTypeCss = 2
  case ePubFileTypeOthers = 3
  case ePubFileTypeSmil = 4
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
@objc public enum EPUB_PAGE_DIRECTION : Swift.Int16 {
  case ePubPageDirectionLtr = 0
  case ePubPageDirectionRtl = 1
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
@objc public enum EPUB_LAYOUT : Swift.Int16 {
  case ePUBReflowable = 0
  case ePUBFixedLayout = 1
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
public enum EPUBMarkupLinkType : Swift.Int16 {
  case kEPUBLinkTypeNone
  case kEPUBLinkTypeAudio
  case kEPUBLinkTypeVideo
  case kEPUBLinkTypeImage
  case kEPUBLinkTypeDocument
  case kEPUBLinkTypePageLink
  case kEPUBLinkTypeWebLink
  case kEPUBLinkTypeOther
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class EPUBChapterCFI : ObjectiveC.NSObject {
  public var idref: Swift.String?
  public var href: Swift.String?
  public var chapterCFIArray: [Any]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EPUBFile : ObjectiveC.NSObject {
  public var identifier: Swift.String
  public var properties: Swift.String
  public var href: Swift.String
  public var mediaType: Swift.String
  public var mediaOverlay: Swift.String
  public var fileType: Kitaboo_Reader_SDK.EPUB_FILE_TYPE
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class EPUBChapter : ObjectiveC.NSObject {
  @objc public var idref: Swift.String
  @objc public var chapterName: Swift.String
  @objc public var fileIndex: Swift.Int
  @objc public var href: Swift.String
  public var contentSize: Swift.Int
  public var bookContentSizeTillChapter: Swift.Int
  public var totalNumOfPagesTillChapter: Swift.Int
  public var _audioSyncArray: [Kitaboo_Reader_SDK.EpubAudioSyncVO]
  open func getAudioSyncArray() -> [Kitaboo_Reader_SDK.EpubAudioSyncVO]
  public var isAudioSyncSupported: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EPUBGuide : ObjectiveC.NSObject {
  public var type: Swift.String?
  public var title: Swift.String?
  public var href: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class EPUBPage : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var idref: Swift.String
  @objc public var href: Swift.String
  @objc public var pageNumber: Swift.Int
  @objc public var fileIndex: Swift.Int
  @objc public var isFirstPage: Swift.Bool
  @objc public var isLastPage: Swift.Bool
  @objc override dynamic public init()
  @objc public init(idref: Swift.String, fileIndex: Swift.Int, href: Swift.String, pageNumber: Swift.Int, ugcArray: [Kitaboo_Reader_SDK.UGC]?)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class EPUBResource : ObjectiveC.NSObject {
  @objc public var type: Swift.String
  public var typeId: Swift.String
  public var href: Swift.String
  public var assetPath: Swift.String
  public var resourceName: Swift.String
  public var chapter: Foundation.NSDictionary
  public var epubLinkType: Kitaboo_Reader_SDK.EPUBMarkupLinkType
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EPUBTOCPage : ObjectiveC.NSObject {
  @objc public var displayNumber: Swift.String
  @objc public var src: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EPUBGlossary : ObjectiveC.NSObject {
  @objc public var glossaryId: Swift.String
  @objc public var term: Swift.String
  @objc public var definition: Swift.String
  @objc public var translation: Swift.String
  @objc public var pronunciation: Swift.String
  @objc public var audio: Swift.String
  @objc public var video: Swift.String
  @objc public var image: Swift.String
  @objc public var url: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class EPUBMarkup : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class EpubAudioSyncVO : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class EPUBBookVO : Kitaboo_Reader_SDK.KitabooBookVO {
  @objc public var version: Swift.String
  @objc public var bookTitle: Swift.String
  @objc public var absolutePath: Swift.String
  @objc public var rootPath: Foundation.NSString
  @objc public var coverImageName: Swift.String
  @objc public var guides: [Kitaboo_Reader_SDK.EPUBGuide]
  @objc public var meta: Kitaboo_Reader_SDK.EPUBMeta
  @objc public var files: [Kitaboo_Reader_SDK.EPUBFile]
  @objc public var chapters: [Kitaboo_Reader_SDK.EPUBChapter]
  @objc public var toc: [Kitaboo_Reader_SDK.EPUBToc]
  @objc public var resources: [Kitaboo_Reader_SDK.EPUBResource]
  @objc public var glossary: [Kitaboo_Reader_SDK.EPUBResource]
  @objc public var bookCFIArray: [Swift.String]
  @objc public var tocPageList: [Kitaboo_Reader_SDK.EPUBTOCPage]
  @objc public var _bookCFIs: [Kitaboo_Reader_SDK.EPUBChapterCFI]
  @objc public var isBookContentLoaded: Swift.Bool
  @objc public var isAudioSyncSupported: Swift.Bool
  @objc public var totalNumberOfPages: Swift.Int
  @objc public var isEpubTypeAuthorReflow: Swift.Bool
  @objc public var defaultReaderFontSettings: Kitaboo_Reader_SDK.ReaderFontSetting
  @objc public var userReaderFontSettings: Kitaboo_Reader_SDK.ReaderFontSetting
  @objc public var isThumbnailForReflowableEnabled: Swift.Bool
  override public func getBookContentForTOC() -> [Any]
  override public func getBookResourcesForTOC() -> [Any]
  public var bookCFIs: [Kitaboo_Reader_SDK.EPUBChapterCFI]? {
    get
  }
  override public func getThumbnailData() -> [Any]
  public func isKitabooEpubThumbnailSupported() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EPUBMeta : ObjectiveC.NSObject {
  @objc public var layout: Kitaboo_Reader_SDK.EPUB_LAYOUT
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EPUBToc : ObjectiveC.NSObject {
  @objc public var tocId: Swift.String?
  @objc public var playOrder: Swift.String?
  @objc public var tocLabel: Swift.String
  @objc public var src: Swift.String
  @objc public var nodeLevel: Swift.Int
  @objc public var tocExpanded: Swift.Bool
  @objc public var parentNode: Kitaboo_Reader_SDK.EPUBToc?
  @objc public var subNodes: [Kitaboo_Reader_SDK.EPUBToc]
  @objc public func getBookContentForTOCSubnodes() -> [Any]
  @objc public func getBookContentForTOCSectionSubnodes(_ subNodes: [Kitaboo_Reader_SDK.EPUBToc]) -> [[Swift.String : Any]]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ReaderFontSetting : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var fontFamily: Swift.String
  @objc public var fontSize: Kitaboo_Reader_SDK.FONT_SIZE
  @objc public var textAlignment: Kitaboo_Reader_SDK.TEXT_ALIGNMENT
  @objc public var margin: Kitaboo_Reader_SDK.READER_MARGIN
  @objc public var lineSpacing: Kitaboo_Reader_SDK.TEXT_LINESPACING
  @objc public var readerMode: Kitaboo_Reader_SDK.READER_MODE
  @objc public var scrollEnabled: Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class HDKitabooHLSServiceInterface : ObjectiveC.NSObject {
  public var isServerLessApproach: Swift.Bool
  @objc override dynamic public init()
  @objc public init(_ baseURLString: Swift.String, clientID: Swift.String)
  @objc public init(_ microServicesBaseUrl: Swift.String, clientID: Swift.String, enableCDNCookies enable: Swift.Bool)
  @objc public init(_ baseURLString: Swift.String, microServicesBaseUrl: Swift.String, clientID: Swift.String, enableCDNCookies enable: Swift.Bool, IsKitabooContentServer kitabooContentServer: Swift.Bool)
  @objc open func fetchHLSMediaBookDownloadURL(_ userToken: Swift.String, bookId: Foundation.NSNumber, timeStamp: Foundation.NSNumber, isHLSOnlineStreaming onlineStreaming: Swift.Bool = true, successHandler: @escaping (_ hlsBaseURLPath: Swift.String, _ cookies: [Swift.String : Any]?) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc open func fetchHLSM3U8URLs(_ hlsBaseURL: Swift.String, isHLSAudio: Swift.Bool, hlsMetaDataDownloadablePath downloadablePath: Swift.String?, withAudioThumbnailURL thumbnailURL: Swift.String?, successHandler: @escaping (_ downloadPaths: [Foundation.URL]) -> (), failureHandler: @escaping (_ error: any Swift.Error) -> ())
  @objc deinit
}
@objc public protocol PenDrawingChangeDelegate {
  @objc func didCreatePenDrawing(_ drawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc func didUpdatePenDrawing(_ drawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc func didChangeReviewMode(_ penMode: Kitaboo_Reader_SDK.PenMode)
}
@objc public protocol PenDrawingSelectionChangeDelegate {
  @objc func didChangePenDrawingSelection(_ drawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc func deleteSelectedDrawing()
  @objc func enableUndoRedoButton(_ enable: Swift.Bool)
  @objc func addUndoObjects(_ pendrawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc func deleteUndoObjects(_ pendrawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
  @objc func addRedoObjects(_ pendrawingObject: Kitaboo_Reader_SDK.PenDrawingObject)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency open class PenDrawingView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.PenDrawingChangeDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency weak public var selectionChangeDelegate: (any Kitaboo_Reader_SDK.PenDrawingSelectionChangeDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var pageID: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public var displayNum: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var drawingMode: Kitaboo_Reader_SDK.DRAWING_MODE
  @_Concurrency.MainActor @preconcurrency public var deleteOnSelectionEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class HDThemeVO {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(NetworkDownloadTaskOperation) open class NetworkDownloadTaskOperation : Kitaboo_Reader_SDK.NetworkDataTaskOperation, Foundation.URLSessionDownloadDelegate {
  @objc override dynamic open func cancel()
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc deinit
}
@objc(PrintPageViewDelegate) public protocol PrintPageViewDelegate {
  @objc func didTapOnPrintPageWithPageNumber(_ pageNumber: Foundation.NSNumber?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(PrintPageButton) @_Concurrency.MainActor @preconcurrency open class PrintPageButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any Kitaboo_Reader_SDK.PrintPageViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var pageNumber: Foundation.NSNumber?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SDKHLSDownloadInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Kitaboo_Reader_SDK.SDKBookInfo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Kitaboo_Reader_SDK.SDKBookInfo>
  @objc @NSManaged dynamic public var bookID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isDecrypted: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objc public protocol HDMediaBookTOCController_V6Delegate {
  @objc optional func didTapOnChapterSegment()
  @objc optional func didTapOnTranscriptSegment()
  @objc optional func didTapOnBookmarkSegment()
  @objc optional func didTapOnChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO)
  @objc optional func didTapOnTranscript(_ transcriptVO: Kitaboo_Reader_SDK.HDMediaBookTranscriptVO)
  @objc optional func didTapOnBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnChapterPlayPause(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc optional func didTapOnBookmarkDelete(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnBookmarkEdit(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnSwipeUpDown(_ swipeUp: Swift.Bool)
}
@objc public enum MediaBookTOCFilter_V6 : Swift.Int {
  case CHAPTER = 0, TRANSCRIPT, BOOKMARK
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class HDMediaBookTOCController_V6 : UIKit.UIViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var isAudioBook: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDMediaBookTOCController_V6Delegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var selectedMode: Kitaboo_Reader_SDK.MediaBookTOCFilter_V6
  @objc @_Concurrency.MainActor @preconcurrency public var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @objc @_Concurrency.MainActor @preconcurrency final public let segmentView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open var chapterButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency open var transcriptButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency open var bookmarkButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency open var _dataArray: Foundation.NSArray?
  @_Concurrency.MainActor @preconcurrency open var lineViewTop2Constraint: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor @preconcurrency open var lineView2HeightConstraint: UIKit.NSLayoutConstraint
  @_Concurrency.MainActor @preconcurrency open var btnSwipeUp: UIKit.UIButton
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency public func setData(_ data: Foundation.NSArray?)
  @_Concurrency.MainActor @preconcurrency open func addTheme()
  @_Concurrency.MainActor @preconcurrency open func configureSegmentView()
  @objc @_Concurrency.MainActor @preconcurrency public func addBookMarkFooterView()
  @objc @_Concurrency.MainActor @preconcurrency public func swipeUpDownBtnHiddenOrShow()
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func hideTranscript(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func hideBookmark(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func updateTOCForCurrentChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setPlayPauseState(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc @_Concurrency.MainActor @preconcurrency public func refresh()
  @objc @_Concurrency.MainActor @preconcurrency public func reloadBookmarkSection()
  @objc @_Concurrency.MainActor @preconcurrency public func updateTableBottomConstraint(constraint: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency open func actionForButton(sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor @preconcurrency open func onClickSwipUpDownBtn(sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency open func updateTabelViewCell(_ contentCell: Kitaboo_Reader_SDK.HDMediaBookTOCTableViewCell_V6)
  @_Concurrency.MainActor @preconcurrency open func configureCell(at indexPath: Foundation.IndexPath, for contentCell: Kitaboo_Reader_SDK.HDMediaBookTOCTableViewCell_V6, with chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO, and multiLevelData: Kitaboo_Reader_SDK.HDMultiLevelDataModel? = nil)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDMediaBookTOCController_V6 {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func reloadTable()
}
@_inheritsConvenienceInitializers @objc open class GenerateReportParser : ObjectiveC.NSObject {
  @objc public func parseGenerateReportTOC(_ tocDict: Swift.Dictionary<Swift.String, Any>, _ bookVO: Kitaboo_Reader_SDK.KFBookVO) -> Foundation.NSArray
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HDElasticSearchResult) open class HDElasticSearchResult : ObjectiveC.NSObject {
  @objc open var bookID: Swift.String?
  @objc open var index: Swift.String?
  @objc open var score: Foundation.NSNumber?
  @objc open var bookThumbnailURL: Swift.String?
  @objc open var bookTitle: Swift.String?
  @objc open var bookDescription: Swift.String?
  @objc open var type: Swift.String?
  @objc open var searchCount: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ClientRequest) open class ClientRequest : Kitaboo_Reader_SDK.KitabooRequest {
  @objc deinit
}
@objc public protocol HDAudioBookPlayerViewController_V6Delegate {
  @objc optional func didTapOnBookmark()
  @objc optional func didTapOnPlayPause(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc optional func didTapOnNarrationSpeed(_ button: UIKit.UIButton)
  @objc optional func didTapOnForward()
  @objc optional func didTapOnRewind()
  @objc optional func didTapOnNextChapter()
  @objc optional func didTapOnPreviousChapter()
  @objc optional func didSeekBarValueChanged()
  @objc optional func imageViewForThumbnail(_ thumbnailURL: Swift.String) -> UIKit.UIImageView?
  @objc optional func didTapOnVolumnChangeButton(_ mediaPlayer: Kitaboo_Reader_SDK.HDMediaBookModel)
  @objc optional func didTapOnMuteUnmute(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel)
}
@objc public enum AudioBookPlayerViewStateUpdate_V6 : Swift.Int {
  case kAudioBookUpdatePlayPauseState = 0, kAudioBookUpdateReadingSpeed, kAudioBookUpdateCurrentTime
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class HDAudioBookPlayerViewController_V6 : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var previousChapterButtonLeadingConstant: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var nextChapterButtonTrailingConstant: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency open var rewindButtonLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var forwardTrailingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var bookmarkButtonLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var narrationSpeedButtonTrailingConstraint: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDAudioBookPlayerViewController_V6Delegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var forwardBackwardTimeConstant: Swift.Float
  @objc @_Concurrency.MainActor @preconcurrency public var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @_Concurrency.MainActor @preconcurrency open var _themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO
  @_Concurrency.MainActor @preconcurrency final public let defaultThumbnail: Swift.String
  @_Concurrency.MainActor @preconcurrency open var chapterNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var chapterNumberLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var seekBar: Kitaboo_Reader_SDK.ReflowableCustomSlider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var currentTimeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var totalTimeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var bookmarkButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var forwardButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var rewindButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var playPauseButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var narrationSpeedButton: UIKit.UIButton {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency open func updateChapterViewControlsFont()
  @objc @_Concurrency.MainActor @preconcurrency open func updateConstraints()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency open func setPlayPauseButtonCornerRadius(_ radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func setSeekBarThumbImage(_ image: UIKit.UIImage)
  @_Concurrency.MainActor @preconcurrency open func updateTheme()
  @objc @_Concurrency.MainActor @preconcurrency public func updateAudioThumbnail()
  @objc @_Concurrency.MainActor @preconcurrency public func addSleepTimeView()
  @objc @_Concurrency.MainActor @preconcurrency public func removeSleepTimeView()
  @objc @_Concurrency.MainActor @preconcurrency public func setSleepTimeLabelText(_ text: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func addMediaControlsView()
  @objc @_Concurrency.MainActor @preconcurrency public func updatePlayerView(_ state: Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate_V6, mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel, showLoader: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public func setCurrentChapter(_ chapterVO: Kitaboo_Reader_SDK.HDMediaBookChapterVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func hideBookmark(_ hide: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disableNextChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func disablePreviousChapter(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency open func disableBookmark(_ disable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteAllBookmarks(_ bookmarksVO: [Kitaboo_Reader_SDK.SDKBookmarkVO])
  @objc @_Concurrency.MainActor @preconcurrency public func addBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func deleteBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func getThumbnailContainerView() -> UIKit.UIView?
  @objc @_Concurrency.MainActor @preconcurrency open func updateTimeinHours(_ currentTime: Swift.Double, _ totalTime: Swift.Double)
  @objc @_Concurrency.MainActor @preconcurrency open func bookmarkButtonTapped(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency open func getChapterViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, centerX: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func getSliderViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func getMediaControlViewConstants() -> (width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class KitabooScormWebPlayer : Kitaboo_Reader_SDK.KitabooWebPlayer {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Swift.String, linkvo: Kitaboo_Reader_SDK.KFLinkVO, scormData: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Swift.String, scormID: Swift.String, scormData: Swift.String, pageId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Swift.String, scormID: Swift.String, scormData: Swift.String, isDoneButtonVisible: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Swift.String, scormID: Swift.String, bookTitle: Swift.String, scormData: Swift.String, isDoneButtonVisible: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override public func closePlayer()
  @_Concurrency.MainActor @preconcurrency override public func closePlayer(completionHandler: ((Swift.String?, (any Swift.Error)?) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func getScormActivityData(completionHandler: @escaping (Swift.String, [Swift.String : Any]) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class HDGoogleTextToSpeechServiceManager : ObjectiveC.NSObject, AVFAudio.AVAudioPlayerDelegate {
  @objc public static let shared: Kitaboo_Reader_SDK.HDGoogleTextToSpeechServiceManager
  @objc public var voiceTypeIdentifer: Swift.String
  @objc public var googleAPIKey: Swift.String
  @objc public var languageCode: Swift.String
  @objc public var isMaleVoice: Swift.Bool
  @objc public var isCompletePlaying: Swift.Bool
  @objc public func speak(text: Swift.String, textlanguageCode: Swift.String?, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public func stopPlayer()
  @objc public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDGoogleTextToSpeechServiceManager {
  @objc dynamic public func fetchSupportedVoices(completion: @escaping (_ voiceName: Swift.String?, _ error: Foundation.NSError?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class HDReaderSliderActionBar : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol KitabooYTPlayerDelegate : AnyObject {
  func didCloseYoutubePlayer()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class KitabooYTPlayer : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var isInline: Swift.Bool
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.KitabooYTPlayerDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(linkVo: Kitaboo_Reader_SDK.KFLinkVO)
  @_Concurrency.MainActor @preconcurrency public init(videoURL: Swift.String)
  @_Concurrency.MainActor @preconcurrency public init(videoURL: Swift.String, withRect frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency public func getYoutubeInlinePlayer() -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func close()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class KitabooBookVO : ObjectiveC.NSObject {
  public var bookID: Swift.Int
  public func getBookContentForTOC() -> [Any]
  public func getBookResourcesForTOC() -> [Any]
  public func getThumbnailData() -> [Any]
  public func getBookResourcesForTORSubnodesForRole(_ role: Swift.String, ofStandardType standardType: Swift.String) -> [[Swift.String : Any]]
  @objc override dynamic public init()
  @objc deinit
}
@objc(BookClassSharingConfiguration) open class BookClassSharingConfiguration : ObjectiveC.NSObject {
  @objc public init(sharingList: [Swift.String : Any], type: Swift.String, role: Swift.Int)
  @objc public func isSharingEnable() -> Swift.Bool
  @objc public func isTeacherSharingEnable() -> Swift.Bool
  @objc public func isStudentSharingEnable() -> Swift.Bool
  @objc public func isStudent() -> Swift.Bool
  @objc deinit
}
@objc(PlayerItemDelegate) public protocol PlayerItemDelegate {
  @objc func didPlayerActionBarSelectItem(_ item: Kitaboo_Reader_SDK.PlayerActionBarItem)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(PlayerActionBarItem) @_Concurrency.MainActor @preconcurrency public class PlayerActionBarItem : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var isSelected: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var width: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency public var metaData: [Swift.String : Any]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public func setEnabled(_ enabled: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setSelected(_ selected: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setWidth(_ width: Swift.Double)
  @_Concurrency.MainActor @preconcurrency public func setMetaData(_ metaData: [Swift.String : Any])
  @objc deinit
}
public let KITABOO_ANALYTICS_EVENT: Swift.String
@objc @_inheritsConvenienceInitializers public class AnalyticsManager : ObjectiveC.NSObject {
  public static func getInstance() -> Kitaboo_Reader_SDK.AnalyticsManager
  public func trackEvent(eventName: Swift.String, eventInfo: [Swift.String : Any], uniqueID: Swift.String)
  public func notifyEvent(eventName: Swift.String, eventInfo: [Swift.String : Any]?)
  public func getTrackingJSON() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol AudioPlayerDelegate : AnyObject {
  func audioPlayerFinishPlaying()
  func audioPlayerDidStopped()
  func audioPlayerDidStart()
  func remoteAudioLoadingDidFailed(_ error: any Swift.Error)
  func remoteAudioDidLoad()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class KitabooAudioPlayer : ObjectiveC.NSObject, AVFAudio.AVAudioPlayerDelegate, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.AudioPlayerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var isAudioResourcePlaybackground: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency public init(targetURL: Swift.String, bookPath: Swift.String, isbn: Swift.String, playerUIEnabled: Swift.Bool, encrypted: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public static func setIsExternalResource(isExternalResource: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func retryAudioLoading()
  @_Concurrency.MainActor @preconcurrency public func getPlayerView() -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func start()
  @_Concurrency.MainActor @preconcurrency public func stop()
  @_Concurrency.MainActor @preconcurrency @objc public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
@objc(HDUserResizableTextDelegate) public protocol HDUserResizableTextDelegate : ObjectiveC.NSObjectProtocol {
  @objc func userResizableViewDidBeginEditing(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView)
  @objc func userResizableViewDidEndEditing(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView)
  @objc func userResizableViewDidValueChanged(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView)
  @objc func userResizableViewShouldBeginEditing(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView) -> (Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(HDUserResizableTextView) @_Concurrency.MainActor @preconcurrency open class HDUserResizableTextView : UIKit.UIView, UIKit.UITextViewDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var localID: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor @preconcurrency public var border: UIKit.UIView? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var contentView: UIKit.UIView? {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public var userResizableInset: CoreFoundation.CGFloat? {
    get
    set(newValue)
  }
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDUserResizableTextDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public func adjustFontSizeForTextView(textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, withInset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc @_Concurrency.MainActor @preconcurrency public func showEditingHandles()
  @objc @_Concurrency.MainActor @preconcurrency public func hideEditingHandles()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func enterEditingMode()
}
@objc(SDKError) public enum SDKError : Swift.Int32 {
  case kSDKErrorImageLoadingFailed
  case kSDKErrorBookLoadingFailed
  case kSDKErrorFontFileLoadingFailed
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SDKUtility) public class SDKUtility : ObjectiveC.NSObject {
  @objc public static func getSDKDomain() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class HDMediaTOCBookmarkCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency open var timeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var lblDate: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var dataLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconBtn: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconBookmark: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDTBXML {
  public static func dictionaryWithXMLNode(_ element: Kitaboo_Reader_SDK.TBXMLElement) -> Foundation.NSDictionary
  public static func dictionaryWithXMLData(_ data: Foundation.Data, error: inout (any Swift.Error)?) -> Foundation.NSDictionary?
}
public enum YTVimeoVideoQuality : Swift.Int {
  case YTVimeoVideoQualityLow
  case YTVimeoVideoQualityMedium
  case YTVimeoVideoQualityHigh
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class KitabooVimeoExtractor {
  public class func fetchVideoURL(fromURL videoURL: Swift.String, quality: Kitaboo_Reader_SDK.YTVimeoVideoQuality, completionHandler handler: @escaping (Foundation.URL?, (any Swift.Error)?, Kitaboo_Reader_SDK.YTVimeoVideoQuality) -> Swift.Void)
  @objc deinit
}
extension Kitaboo_Reader_SDK.KitabooVimeoExtractor : Foundation.URLSessionDataDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
}
extension Kitaboo_Reader_SDK.KitabooVimeoExtractor : Foundation.URLSessionTaskDelegate {
  @objc dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc dynamic public var superclass: Swift.AnyClass? {
    @objc get
  }
  @objc dynamic public func `self`() -> Self
  @objc dynamic public func perform(_ aSelector: ObjectiveC.Selector!) -> Swift.Unmanaged<Swift.AnyObject>!
  @objc dynamic public func perform(_ aSelector: ObjectiveC.Selector!, with object: Any!) -> Swift.Unmanaged<Swift.AnyObject>!
  @objc dynamic public func perform(_ aSelector: ObjectiveC.Selector!, with object1: Any!, with object2: Any!) -> Swift.Unmanaged<Swift.AnyObject>!
  @objc dynamic public func isProxy() -> Swift.Bool
  @objc dynamic public func isKind(of aClass: Swift.AnyClass) -> Swift.Bool
  @objc dynamic public func isMember(of aClass: Swift.AnyClass) -> Swift.Bool
  @objc dynamic public func conforms(to aProtocol: ObjectiveC.`Protocol`) -> Swift.Bool
  @objc dynamic public func responds(to aSelector: ObjectiveC.Selector!) -> Swift.Bool
  @objc dynamic public var description: Swift.String {
    @objc get
  }
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
}
@objc public protocol GenerateReportViewControllerDelegate {
  @objc func didTapOnCancelForGenerateReport()
  @objc func didTapOnBackForGenerateReport()
  @objc func didTapOnNextToSendMail(reportData: Swift.Dictionary<Swift.String, Any>)
  @objc func didSelectChapterSegmentForGenerateReport()
  @objc func didSelectStudentSegmentForGenerateReport()
}
@objc public enum GenerateReportFilter : Swift.Int {
  case CHAPTER = 0, STUDENT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class GenerateReportViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.GenerateReportViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var selectedMode: Kitaboo_Reader_SDK.GenerateReportFilter
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public init(themeColor: UIKit.UIColor?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func setData(_ data: Foundation.NSArray)
  @objc @_Concurrency.MainActor @preconcurrency public func setStatusData(_ statusData: Foundation.NSDictionary)
  @_Concurrency.MainActor @preconcurrency public func didTapOnAllStudents()
  @_Concurrency.MainActor @preconcurrency public func didTapOnOnlyAttempted()
  @_Concurrency.MainActor @preconcurrency public func isAnyStudentSelected(isSelected: Swift.Bool)
  @objc deinit
}
@objc public protocol StickyNoteControllerDelegate {
  @objc func didTapOnStickNoteController(_ stickyNoteController: Kitaboo_Reader_SDK.StickyNoteController, at tapPoint: CoreFoundation.CGPoint)
}
@objc @_Concurrency.MainActor @preconcurrency open class StickyNoteController : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, delegate: any Kitaboo_Reader_SDK.StickyNoteControllerDelegate)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc public protocol ImageDownloadTaskDelegate {
  @objc func imageDownloaded(position: Swift.Int)
  @objc func imageDownloadingFailed(error: any Swift.Error)
}
@objc public class ImageDownloadTask : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage?
  @objc public init(position: Swift.Int, urlString: Swift.String, session: Foundation.URLSession, delegate: any Kitaboo_Reader_SDK.ImageDownloadTaskDelegate)
  @objc public func resume()
  @objc public func pause()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HDKitabooMediaBookThemeVO : ObjectiveC.NSObject {
  @objc public var media_toppanel_background: UIKit.UIColor?
  @objc public var media_toppanel_icons_color: UIKit.UIColor?
  @objc public var media_toppanel_bookTitle_text_color: UIKit.UIColor?
  @objc public var media_toppanel_bottom_line: UIKit.UIColor?
  @objc public var media_sidepanel_background: UIKit.UIColor?
  @objc public var media_sidepanel_tab_background: UIKit.UIColor?
  @objc public var media_sidepanel_tab_border: UIKit.UIColor?
  @objc public var media_sidepanel_tab_text_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_tab_border: UIKit.UIColor?
  @objc public var media_sidepanel_selected_text_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_background: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_title_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_Chapter_Time_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_icon_color: UIKit.UIColor?
  @objc public var media_sidepanel_unselected_chapter_title_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_description_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_time_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_icons_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_delete_icon_color: UIKit.UIColor?
  @objc public var media_sidepanel_selected_chapter_divider_color: UIKit.UIColor?
  @objc public var media_audioBookCover_background_color: UIKit.UIColor?
  @objc public var media_audioBookCover_shadow_color: UIKit.UIColor?
  @objc public var media_playerView_slider_color: UIKit.UIColor?
  @objc public var media_playerView_chapter_icon_color: UIKit.UIColor?
  @objc public var media_playerView_slider_filled_color: UIKit.UIColor?
  @objc public var media_playerView_default_timetext_color: UIKit.UIColor?
  @objc public var media_playerView_current_timetext_color: UIKit.UIColor?
  @objc public var media_playerView_chapter_title_color: UIKit.UIColor?
  @objc public var media_playerView_chapter_count_text_color: UIKit.UIColor?
  @objc public var media_playerView_navigation_arrow_color: UIKit.UIColor?
  @objc public var media_playerView_disabled_navigation_arrow_color: UIKit.UIColor?
  @objc public var media_playerView_icon_color: UIKit.UIColor?
  @objc public var media_playerView_selected_icon_color: UIKit.UIColor?
  @objc public var media_playerView_selected_icon_background: UIKit.UIColor?
  @objc public var media_popup_background: UIKit.UIColor?
  @objc public var media_popup_title_text_color: UIKit.UIColor?
  @objc public var media_popup_hint_text_color: UIKit.UIColor?
  @objc public var media_popup_input_text_color: UIKit.UIColor?
  @objc public var media_popup_time_text_color: UIKit.UIColor?
  @objc public var media_popup_speed_text_color: UIKit.UIColor?
  @objc public var media_popup_selected_speed_text_color: UIKit.UIColor?
  @objc public var media_action_button_main_text_color: UIKit.UIColor?
  @objc public var media_action_button_cancel_text_color: UIKit.UIColor?
  @objc public var media_action_button_delete_text_color: UIKit.UIColor?
  @objc public var media_popup_border: UIKit.UIColor?
  @objc public var media_popup_line_color: UIKit.UIColor?
  @objc public var media_popup_check_icon_color: UIKit.UIColor?
  @objc public var media_action_button_main_background_color: UIKit.UIColor?
  @objc public var media_action_button_cancel_border_color: UIKit.UIColor?
  @objc public var video_player_background: UIKit.UIColor?
  @objc public var video_player_icon_color: UIKit.UIColor?
  @objc public var video_player_text_color: UIKit.UIColor?
  @objc public var video_player_Play_icon_color: UIKit.UIColor?
  @objc public var video_player_Play_icon_overlay_background: UIKit.UIColor?
  @objc override dynamic public init()
  @objc public func updateThemeFromJsonPath(_ themeJsonPath: Swift.String?)
  @objc deinit
}
@objc public protocol Kitaboo3dPlayerViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func kitaboo3dPlayerDidClosed()
  @objc optional func kitaboo3dPlayerFullscreenButtonTapped(isFullScreen: Swift.Bool, linkVo: Kitaboo_Reader_SDK.KFLinkVO)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class Kitaboo3dPlayerViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, UIKit.UIGestureRecognizerDelegate, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency public var bookVO: Kitaboo_Reader_SDK.KFBookVO?
  @_Concurrency.MainActor @preconcurrency public var linkVO: Kitaboo_Reader_SDK.KFLinkVO?
  @_Concurrency.MainActor @preconcurrency public var videoPath: Swift.String?
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.Kitaboo3dPlayerViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public func initData(videoPath: Swift.String?, with bookVO: Kitaboo_Reader_SDK.KFBookVO?, with linkVO: Kitaboo_Reader_SDK.KFLinkVO?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor @preconcurrency public func play()
  @objc @_Concurrency.MainActor @preconcurrency public func getInlineVideoPlayer() -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didRotate(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class ReadingTimeManager : ObjectiveC.NSObject {
  public init(bookPath: Swift.String)
  @objc public func parseCFIJSON(fromFilePath filePath: Swift.String) -> Any?
  public func setDefaultAverageTimePerPage(_ averageTime: Swift.Double)
  public func getTimeLeftForPage(_ pageIdentifier: Swift.String, withAverageTimePerPage averageTime: Swift.Double) -> Swift.Int
  public func isCFIDataAvailable() -> Swift.Bool
  @objc deinit
}
@objc public enum MEDIA_PLAYER : Swift.Int {
  case audio
  case image
  case video
  case web
  case slideshow
  case inlineVideo
  case youtube
  case inlineYoutube
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TOOL_TYPE : Swift.Int {
  case none = 0
  case toc
  case myData
  case search
  case pen
  case analytics
  case review
  case submit
  case thumbnails
  case inline
  case stickyNote
  case note
  case postit
  case tsView
  case reviewListing
  case media
  case noTool
  case kalturaWait
  case highlight
  case readToMe
  case protractor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HIGHLIGHT_VIEW_TYPE : Swift.Int {
  case normal = 0
  case underline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AUDIO_SYNC_TYPE : Swift.Int {
  case normal = 0
  case underline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class HSSearchParser : ObjectiveC.NSObject {
  @objc public func parseSearchJSON(fromFilePath filePath: Swift.String) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HDMediaBookBookmarkController_V6Delegate {
  @objc optional func didTapOnAddBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnDeleteBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func didTapOnCancelBookmark(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO?)
}
@objc @_Concurrency.MainActor @preconcurrency open class HDMediaBookBookmarkController_V6 : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency open var _bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO?
  @objc @_Concurrency.MainActor @preconcurrency open var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @objc @_Concurrency.MainActor @preconcurrency weak open var delegate: (any Kitaboo_Reader_SDK.HDMediaBookBookmarkController_V6Delegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?, bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func addBookMarkAlert()
  @objc deinit
}
extension Kitaboo_Reader_SDK.HDMediaBookBookmarkController_V6 : UIKit.UITextFieldDelegate {
}
public enum TBXMLErrorCodes : Swift.Int {
  case D_TBXML_SUCCESS
  case D_TBXML_DATA_NIL
  case D_TBXML_DECODE_FAILURE
  case D_TBXML_MEMORY_ALLOC_FAILURE
  case D_TBXML_FILE_NOT_FOUND_IN_BUNDLE
  case D_TBXML_ELEMENT_IS_NIL
  case D_TBXML_ELEMENT_NAME_IS_NIL
  case D_TBXML_ELEMENT_NOT_FOUND
  case D_TBXML_ELEMENT_TEXT_IS_NIL
  case D_TBXML_ATTRIBUTE_IS_NIL
  case D_TBXML_ATTRIBUTE_NAME_IS_NIL
  case D_TBXML_ATTRIBUTE_NOT_FOUND
  case D_TBXML_PARAM_NAME_IS_NIL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TBXMLAttribute {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TBXMLElement {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TBXMLElementBuffer {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TBXMLAttributeBuffer {
  @objc deinit
}
open class HDTBXML {
  public init()
  convenience public init(xmlString aXMLString: Swift.String) throws
  convenience public init(xmlData aData: Foundation.Data) throws
  convenience public init(xmlFile aXMLFile: Swift.String) throws
  convenience public init(xmlFile aXMLFile: Swift.String, fileExtension aFileExtension: Swift.String) throws
  @objc deinit
}
@objc(KitabooLogType) public enum KitabooLogType : Swift.Int32 {
  case Error, Information, Warning
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc(KitabooLogProtocol) public protocol KitabooLogProtocol {
  @objc static func log(type: Kitaboo_Reader_SDK.KitabooLogType, className: Swift.AnyClass, message: Swift.String, verboseMesage: Swift.String)
}
@_inheritsConvenienceInitializers @objc(ProtractorSelectionButton) @_Concurrency.MainActor @preconcurrency open class ProtractorSelectionButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency open var penToolUUID: Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class GenerateReportTOCVO : ObjectiveC.NSObject {
  @objc open var chapterTitle: Swift.String?
  @objc open var chapterID: Swift.String?
  @objc open var nodeID: Swift.String?
  @objc open var type: Swift.String?
  @objc open var isSelected: Swift.Bool
  @objc open var isExpanded: Swift.Bool
  @objc open var isSubNode: Swift.Bool
  @objc open var subnodeLevel: Swift.Int
  @objc open var folioNumberArray: Swift.Array<Swift.String>?
  @objc open var subnodes: Swift.Array<Kitaboo_Reader_SDK.GenerateReportTOCVO>?
  @objc override dynamic public init()
  @objc deinit
}
@objc(HDPDFCreator) open class HDPDFCreator : ObjectiveC.NSObject {
  @objc public init(highlights: [Swift.AnyObject])
  @objc public func createPDF(completion: @escaping (Foundation.Data) -> ())
  @objc deinit
}
@objc public class HighlightedTextFetcher : ObjectiveC.NSObject {
  @objc public static var MAX_TEXT_LENGTH: Swift.Int
  @objc public init(dbPath: Swift.String)
  @objc public func fetchText(startWord: Swift.Int, endWord: Swift.Int, length: Swift.Int) -> Swift.String?
  @objc deinit
}
@objc public protocol HDFIBDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didUpdateSDKFIBVO(_ sdkFIBVO: Kitaboo_Reader_SDK.SDKFIBVO)
  @objc optional func didSelectSubmittedFIB(_ sdkFIBVO: Kitaboo_Reader_SDK.SDKFIBVO, withKFLinkVO linkVO: Kitaboo_Reader_SDK.KFLinkVO, withSourceView sourceView: UIKit.UIView)
  @objc optional func shouldAllowEditing(for linkVO: Kitaboo_Reader_SDK.KFLinkVO) -> Swift.Bool
  @objc func fibDidBeginEditing(_ hdFIBVO: Kitaboo_Reader_SDK.HDFIB)
  @objc func keyboardDidShow(for hdFIBView: Kitaboo_Reader_SDK.HDFIB, withKeyboardFrame keyboardRect: CoreFoundation.CGRect)
  @objc func fibDidEndEditing(_ hdFIBVO: Kitaboo_Reader_SDK.HDFIB)
  @objc func keyboardDidHide(for hdFIBView: Kitaboo_Reader_SDK.HDFIB, withKeyboardFrame keyboardRect: CoreFoundation.CGRect)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class HDFIB : UIKit.UIView, UIKit.UITextViewDelegate, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency public var isDefaultKeyboardDisabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Kitaboo_Reader_SDK.HDFIBDelegate)?
  @_Concurrency.MainActor @preconcurrency public var sdkFIBVO: Kitaboo_Reader_SDK.SDKFIBVO?
  @_Concurrency.MainActor @preconcurrency public var linkVo: Kitaboo_Reader_SDK.KFLinkVO
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency convenience public init(linkVO: Kitaboo_Reader_SDK.KFLinkVO, sdkFIBVO: Kitaboo_Reader_SDK.SDKFIBVO?, isTeacher: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func removeObserverForKeyboardNotification()
  @_Concurrency.MainActor @preconcurrency public func focusToTextField()
  @_Concurrency.MainActor @preconcurrency public func hideTextForSubmitedMath()
}
extension Kitaboo_Reader_SDK.SDKBookClassInfo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Kitaboo_Reader_SDK.SDKBookClassInfo>
  @objc @NSManaged dynamic public var bookGuid: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bookIsbn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bookTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classId: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var instructors: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var learners: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var receiveList: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var roleID: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shareList: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sharingSetting: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var thumbnailUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalPages: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(BookSyncInfo) public class BookSyncInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class MoviePlayerController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate, AVKit.AVPlayerViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func play()
  @_Concurrency.MainActor @preconcurrency public func pause()
  @_Concurrency.MainActor @preconcurrency public func isAudioMute(_ doMute: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func stop()
  @_Concurrency.MainActor @preconcurrency public func playForward(withTime time: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func playBackward(withTime time: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func skipPlayback(by skipRate: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willBeginFullScreenPresentationWithAnimationCoordinator coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
@_inheritsConvenienceInitializers @objc public class SDKBookClassInfoVO : ObjectiveC.NSObject {
  public var classId: Foundation.NSNumber?
  public var classTitle: Swift.String
  public var learners: [[Swift.String : Any]]
  public var receiveList: [Foundation.NSNumber]
  public var shareList: [Foundation.NSNumber]
  public var userId: Foundation.NSNumber?
  public var roleID: Foundation.NSNumber?
  public var shareHighlightConfiguration: Kitaboo_Reader_SDK.BookClassSharingConfiguration?
  @objc override dynamic public init()
  public init(bookClassInfoDic: [Swift.String : Any], index: Swift.Int, userID: Foundation.NSNumber)
  public func getUserListArray(_ userList: [Any]?, forUser userID: Foundation.NSNumber, andWithIndex index: Swift.Int) -> [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class MyDataViewController : UIKit.UIViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var traitCollection: UIKit.UITraitCollection {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ReaderAnalytics) public class ReaderAnalytics : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc public protocol HDReflowableLayoutControllerDelegate {
  @objc optional func didEnablePagination(_ enabled: Swift.Bool)
  @objc optional func didEnableNightMode(_ enabled: Swift.Bool)
  @objc optional func didChangeFontValue(_ fontValue: Swift.Int)
  @objc optional func didTapOnView()
  @objc optional func didTapOnReaderMode(_ mode: Kitaboo_Reader_SDK.READER_MODE)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class VerticalThumbnailCell : UIKit.UICollectionViewCell {
  @IBOutlet @objc @_Concurrency.MainActor @preconcurrency public var thumbnailImage: UIKit.UIImageView!
  @IBOutlet @objc @_Concurrency.MainActor @preconcurrency public var pageIndex: UIKit.UILabel!
  @objc @_Concurrency.MainActor @preconcurrency public var pageSuperView: UIKit.UIView?
  @objc @_Concurrency.MainActor @preconcurrency public var _isSelected: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JSONSerializer {
  public static func setIgnorePropertyList(_ propertyList: [Swift.String])
  public enum JSONSerializerError : Swift.Error {
    case jsonIsNotDictionary
    case jsonIsNotArray
    case jsonIsNotValid
    public static func == (a: Kitaboo_Reader_SDK.JSONSerializer.JSONSerializerError, b: Kitaboo_Reader_SDK.JSONSerializer.JSONSerializerError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func toDictionary(_ jsonString: Swift.String) throws -> Foundation.NSDictionary
  public static func toArray(_ jsonString: Swift.String) throws -> Foundation.NSArray
  public static func toJson(_ object: Any, prettify: Swift.Bool = false, keyMapping: [Swift.String : Swift.String] = [:]) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class MarkupHitAreaLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public var pageID: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var linkID: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var iconView: Kitaboo_Reader_SDK.MarkupView?
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objc(KitabooDebugLog) open class KitabooDebugLog : ObjectiveC.NSObject, Kitaboo_Reader_SDK.KitabooLogProtocol {
  @objc public static func log(type: Kitaboo_Reader_SDK.KitabooLogType, className: Swift.AnyClass, message: Swift.String, verboseMesage: Swift.String)
  @objc public static func enableLogs(isenabled: Swift.Bool)
  @objc public static func enableVerbose(isenabled: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class HDMediaBookTOCTableViewCell_V6 : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency open var timeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var lblDate: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var dataLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconBtn: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconBookmark: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconBtnWidth: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var iconBtnHeight: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var dataLabelLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var timeLabelLeadingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var iconBtnTrailingConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?, isAudio: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc(TaskStatus) public enum TaskStatus : Swift.Int {
  case unknown, gettingInfo, started, downloading, paused, cancelled, finished, failed
  public func description() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(HDBookDownloadDetails) open class HDBookDownloadDetails : ObjectiveC.NSObject {
  @objc open var bookUniqueID: Swift.String!
  @objc open var bookDownloadURL: Swift.String!
  @objc open var bookDownloadState: Swift.String
  @objc open var bookDownloadSize: Swift.Float
  @objc open var bookDownloadSizeBytes: Swift.Float
  @objc open var bookDownloadUnit: Swift.String!
  @objc open var downloadedBookSize: Swift.Float
  @objc open var downloadedBookSizeBytes: Swift.Float
  @objc open var downloadedBookUnit: Swift.String!
  @objc open var progress: Swift.Float
  @objc open var task: Foundation.URLSessionDownloadTask?
  @objc open var bookDownloadInitiatedTime: Foundation.Date?
  @objc open var bookDownloadDestinationPath: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PdfWordExtractVO : ObjectiveC.NSObject {
  @objc public var paraID: Swift.Int
  @objc public var lineID: Swift.Int
  @objc public var lineY: Swift.Float
  @objc public var lineH: Swift.Float
  @objc public var wordID: Swift.Int
  @objc public var wordX: Swift.Float
  @objc public var wordW: Swift.Float
  @objc public var charWidths: [Any]?
  @objc public var wordText: Swift.String
  @objc public var frameOnCropBox: CoreFoundation.CGRect
  @objc public var transformedFrame: CoreFoundation.CGRect
  @objc public var highlightedView: UIKit.UIView?
  @objc public var savedHighlightedView: UIKit.UIView?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LocalizationHelper) open class LocalizationHelper : ObjectiveC.NSObject {
  @objc public static var readerLanguageBundle: Foundation.Bundle?
  @objc public static func localizedString(key: Swift.String) -> Swift.String
  @objc public static func localizedString(key: Swift.String, tableName: Swift.String, bundle: Foundation.Bundle) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String {
  public static func getLocalizedStringForDateString(date: Swift.String, format: Swift.String) -> Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class HDWKWebView : WebKit.WKWebView {
  @objc @_Concurrency.MainActor @preconcurrency public var isFixedLayout: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var chapter: Kitaboo_Reader_SDK.EPUBChapter?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration = WKWebViewConfiguration())
  @objc @_Concurrency.MainActor @preconcurrency public func enablePagination(isPaginationEnabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func reset()
  @objc deinit
}
@objc open class FolioReaderAudioPlayer : ObjectiveC.NSObject {
  @objc public var didPauseTTS: () -> Swift.Void
  @objc public var didPlayTTS: () -> Swift.Void
  @objc public var errorHandler: () -> Swift.Void
  @objc public var playNextTTSForPDF: () -> Swift.Void
  @objc public var playPreviousTTSForPDF: () -> Swift.Void
  @objc public var pdfRectForHighlight: ([Any]?) -> Swift.Void
  @objc public var clickedWordErrorHandler: (CoreFoundation.CGRect, Swift.String) -> Swift.Void
  @objc public var currentRateHandle: (CoreFoundation.CGFloat) -> Swift.Void
  @objc public var currentWebView: Kitaboo_Reader_SDK.HDWKWebView
  @objc public init(withBook: Kitaboo_Reader_SDK.KitabooBookVO, webview: Kitaboo_Reader_SDK.HDWKWebView?)
  @objc public func changeBookDetails(withBook: Kitaboo_Reader_SDK.KitabooBookVO, webview: Kitaboo_Reader_SDK.HDWKWebView?)
  @objc deinit
  @objc public func stop(immediate: Swift.Bool = false)
  @objc public func pause()
  @objc public func togglePlay()
  @objc public func resume()
  @objc public func play()
  @objc public func playNextSentenceInTTS()
  @objc public func playPreviousSentenceInTTS()
  @objc public func setTTSVolume(volume: Swift.Float)
  @objc public func setTTSSpeed(rate: Swift.Float)
  @objc public func isPlaying() -> Swift.Bool
  @objc public func setPage(sentences: [[Kitaboo_Reader_SDK.PdfWordExtractVO]])
  @objc public func resetCurrentIndex()
  @objc public func checkForWordInSentences(wordRect: CoreFoundation.CGRect, withWordText: Swift.String, pageSentences: [[Kitaboo_Reader_SDK.PdfWordExtractVO]]) -> Swift.Bool
  @objc public func playPDFTTSFromPoint(wordRect: CoreFoundation.CGRect, withWordText: Swift.String, withPageNumber: Swift.Int)
}
extension Kitaboo_Reader_SDK.FolioReaderAudioPlayer : AVFAudio.AVSpeechSynthesizerDelegate {
  @objc dynamic public func speechSynthesizer(_ synthesizer: AVFAudio.AVSpeechSynthesizer, didCancel utterance: AVFAudio.AVSpeechUtterance)
  @objc dynamic public func speechSynthesizer(_ synthesizer: AVFAudio.AVSpeechSynthesizer, didFinish utterance: AVFAudio.AVSpeechUtterance)
}
extension Kitaboo_Reader_SDK.FolioReaderAudioPlayer : AVFAudio.AVAudioPlayerDelegate {
  @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class KitabooPageController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate, Kitaboo_Reader_SDK.TextHighlightViewDelegate, Kitaboo_Reader_SDK.HDUserResizableTextDelegate, Kitaboo_Reader_SDK.RendererProtocol {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func removePageViewImage()
  @_Concurrency.MainActor @preconcurrency @objc public func addInstructionPopup(_ instructionPopupController: UIKit.UIViewController, atSourceView sourceView: UIKit.UIView, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func openHighlightView(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, onPageNo pageNo: Swift.Int, atCoordinates coordinates: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func colorForTextSelectionView() -> UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency @objc public func openHighlightView(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, onPageNo pageNo: Swift.Int, atCoordinates coordinates: CoreFoundation.CGPoint, withHighlightedTextRect highlightedTextRect: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func removeHighlightView()
  @_Concurrency.MainActor @preconcurrency @objc public func deleteSelectedHighlight(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
  @_Concurrency.MainActor @preconcurrency @objc public func highlight(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String, withIsImportant isImportant: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func getHighlightForSelectedText(withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String) -> Kitaboo_Reader_SDK.SDKHighlightVO
  @_Concurrency.MainActor @preconcurrency @objc public func getSelectedText() -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc public func drawHighlights(_ highlights: [Kitaboo_Reader_SDK.SDKHighlightVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func postNote(withHighlightVO highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @_Concurrency.MainActor @preconcurrency @objc public func deleteNote(withHighlightVO highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @_Concurrency.MainActor @preconcurrency @objc public func setPenDrawingModeEnabled(_ enabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func setTeacherReviewDragBoxModeEnabled(_ enabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func setPenDrawingModeEnabled(_ enabled: Swift.Bool, withReviewModeEnable reviewModeEnabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func didEndPan(at targetFrame: CoreFoundation.CGRect, viewsDifference startViewEndViewDifference: CoreFoundation.CGFloat, presentStart: CoreFoundation.CGFloat, presentEnd: CoreFoundation.CGFloat, previousStart: CoreFoundation.CGFloat, previousEnd: CoreFoundation.CGFloat, startingTextSelectionPointY: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc public func didClickOnSaveButton()
  @_Concurrency.MainActor @preconcurrency @objc public func didTapOutside()
  @_Concurrency.MainActor @preconcurrency @objc public func didClickOnNoteButton()
  @_Concurrency.MainActor @preconcurrency @objc public func performSearch(for searchString: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func didClickONDeleteNoteButton()
  @_Concurrency.MainActor @preconcurrency @objc public func drawTextAnnotation(_ annotation: [Kitaboo_Reader_SDK.SDKTextAnnotationVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func userResizableViewShouldBeginEditing(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func userResizableViewDidValueChanged(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView)
  @_Concurrency.MainActor @preconcurrency @objc public func userResizableViewDidBeginEditing(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView)
  @_Concurrency.MainActor @preconcurrency @objc public func userResizableViewDidEndEditing(_ userResizableView: Kitaboo_Reader_SDK.HDUserResizableTextView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willRotate(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didRotate(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc public func setBookmarkVO(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @_Concurrency.MainActor @preconcurrency @objc public func getPageImageToPrintForPageNumber(_ pageNo: Swift.Int) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency @objc public func drawPenDrawings(_ penToolArray: [Kitaboo_Reader_SDK.SDKPentoolVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func drawMarkups(_ links: [Kitaboo_Reader_SDK.KFLinkVO], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func drawFIBs(_ fibs: [Any], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addReviewViewOnFib(_ fibVo: Kitaboo_Reader_SDK.SDKFIBVO)
  @_Concurrency.MainActor @preconcurrency @objc public func removeFibReviewViewOnPageNo(_ pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addInLineVideo(_ view: UIKit.UIView, atRect frame: CoreFoundation.CGRect, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func addMultiLinkController(_ viewController: UIKit.UIViewController, atSourceView sourceView: UIKit.UIView, onPageNO pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String, withSelectedWordHighlightColor selectedWordColor: Swift.String, withSearchArray searchResultArray: [Kitaboo_Reader_SDK.TextSearchResult], withSelectedResult searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightTextWithFrame(_ frame: CoreFoundation.CGRect, onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightSentenceWithWordFramesForTTS(_ frames: [Any], onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func highlightSentenceWithWordFrames(_ frames: [Any], onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func updateBackgroundForAudioSyncFrames(withColor color: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func drawProtractorDrawings(_ protractorArray: [Any], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func getFIBViewForLinkId(_ linkID: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc public func addWatermark(_ waterMarkHolderView: Kitaboo_Reader_SDK.WatermarkHolderView, onPageNumber pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func updateUGC(_ UGCs: [Kitaboo_Reader_SDK.UGC], onPageNo pageNo: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func accessibilityScroll(_ direction: UIKit.UIAccessibilityScrollDirection) -> Swift.Bool
}
@objc public enum BookOrientationMode : Swift.Int {
  case dynamic = 0
  case landscapeOnePageOnly
  case landscapeTwoPageOnly
  case portrait
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RendererProtocol {
  @objc optional func openHighlightView(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, onPageNo pageNo: Swift.Int, atCoordinates coordinates: CoreFoundation.CGPoint) -> Swift.Bool
  @objc optional func addBookmarkView(_ bookmarkView: Kitaboo_Reader_SDK.BookMarkView, onPageNO pageNo: Swift.Int)
  @objc optional func highlight(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String, withIsImportant isImportant: Swift.Bool)
  @objc optional func getHighlightForSelectedText(withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String) -> Kitaboo_Reader_SDK.SDKHighlightVO
  @objc optional func getHighlightForSelectedTextEpub(withTextColor textColor: Swift.String, withBackgroundColor backgroundColor: Swift.String, callback: @escaping (Kitaboo_Reader_SDK.SDKHighlightVO) -> Swift.Void)
  @objc optional func getSelectedText() -> Swift.String
  @objc optional func postNote(withHighlightVO highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func deleteNote(withHighlightVO highlightVO: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func removeHighlightView()
  @objc optional func deleteSelectedHighlight(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func navigateToPageNumber(_ pageNo: Swift.String)
  @objc optional func enablePagination(_ enable: Swift.Bool)
  @objc optional func isPaginationEnabled() -> Swift.Bool
  @objc optional func enableNightMode(_ enable: Swift.Bool)
  @objc optional func setReaderMode(_ mode: Kitaboo_Reader_SDK.READER_MODE)
  @objc optional func setTextAlignment(_ textAlignment: Kitaboo_Reader_SDK.TEXT_ALIGNMENT)
  @objc optional func setLineSpacing(_ lineSpacing: Kitaboo_Reader_SDK.TEXT_LINESPACING)
  @objc optional func setMargin(_ margin: Kitaboo_Reader_SDK.READER_MARGIN)
  @objc optional func resetReaderSetting()
  @objc optional func resetReaderFontSetting()
  @objc optional func setFontFamily(_ fontFamily: Swift.String)
  @objc optional func didFontSizeChanged(_ fontSize: Swift.UInt)
  @objc optional func setBrightnessForReflowable(_ brightnessValue: CoreFoundation.CGFloat)
  @objc optional func getBookmarkVOForPageNo(_ pageNo: Swift.Int) -> Kitaboo_Reader_SDK.SDKBookmarkVO?
  @objc optional func setBookmarkVO(_ bookmarkVO: Kitaboo_Reader_SDK.SDKBookmarkVO)
  @objc optional func drawHighlights(_ highlights: [Kitaboo_Reader_SDK.SDKHighlightVO], onPageNo pageNo: Swift.Int)
  @objc optional func addBookmark(_ bookmarks: [Kitaboo_Reader_SDK.SDKBookmarkVO], onPageNo pageNo: Swift.Int)
  @objc optional func getHighlightVOForStickyNoteTouchPoint(_ touchPoint: CoreFoundation.CGPoint) -> Kitaboo_Reader_SDK.SDKHighlightVO?
  @objc optional func setPenDrawingModeEnabled(_ enabled: Swift.Bool)
  @objc optional func setTeacherReviewDragBoxModeEnabled(_ enabled: Swift.Bool)
  @objc optional func setPenDrawingModeEnabled(_ enabled: Swift.Bool, withReviewModeEnable reviewModeEnabled: Swift.Bool)
  @objc optional func getPenDrawingCanvas() -> [Kitaboo_Reader_SDK.PenDrawingView]
  @objc optional func drawPenDrawings(_ penToolArray: [Kitaboo_Reader_SDK.SDKPentoolVO], onPageNo pageNo: Swift.Int)
  @objc optional func getActivePages() -> [Any]
  @objc optional func reloadPages()
  @objc optional func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @objc optional func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String, withSelectedWordHighlightColor selectedWordColor: Swift.String, withSearchArray searchResultArray: [Kitaboo_Reader_SDK.TextSearchResult], withSelectedResult searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @objc optional func isNextSearchResultAvailable() -> Swift.Bool
  @objc optional func isPreviousSearchResultAvailable() -> Swift.Bool
  @objc optional func isLastPreviousSearchResult() -> Swift.Bool
  @objc optional func isLastNextSearchResult() -> Swift.Bool
  @objc optional func moveToNextSelectedSearch()
  @objc optional func moveToPreviousSelectedSearch()
  @objc optional func isNextSearchResultAvailable(for searchResult: Kitaboo_Reader_SDK.TextSearchResult) -> Swift.Bool
  @objc optional func isPreviousSearchResultAvailable(for searchResult: Kitaboo_Reader_SDK.TextSearchResult) -> Swift.Bool
  @objc optional func moveToNextSelectedSearch(for searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @objc optional func moveToPreviousSelectedSearch(for searchResult: Kitaboo_Reader_SDK.TextSearchResult)
  @objc optional func highlightText(_ text: Swift.String, onPageNo pageNo: Swift.Int, withColor color: Swift.String, withParagraph paragraph: Swift.String)
  @objc optional func highlightTextWithFrame(_ frame: CoreFoundation.CGRect, onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @objc optional func highlightSentenceWithWordFrames(_ frames: [Any], onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @objc optional func highlightSentenceWithWordFramesForTTS(_ frames: [Any], onPageNo pageNo: Swift.Int, withColor color: Swift.String)
  @objc optional func updateBackgroundForAudioSyncFrames(withColor color: Swift.String)
  @objc optional func drawMarkups(_ links: [Kitaboo_Reader_SDK.KFLinkVO], onPageNo pageNo: Swift.Int)
  @objc optional func addInLineVideo(_ view: UIKit.UIView, atRect frame: CoreFoundation.CGRect, onPageNO pageNo: Swift.Int)
  @objc optional func addMultiLinkController(_ multiLinkController: UIKit.UIViewController, atSourceView sourceView: UIKit.UIView, onPageNO pageNo: Swift.Int)
  @objc optional func addInstructionPopup(_ instructionPopupController: UIKit.UIViewController, atSourceView sourceView: UIKit.UIView, onPageNO pageNo: Swift.Int)
  @objc optional func drawFIBs(_ fibs: [Any], onPageNo pageNo: Swift.Int)
  @objc optional func addReviewViewOnFib(_ fibVo: Kitaboo_Reader_SDK.SDKFIBVO)
  @objc optional func removeFibReviewViewOnPageNo(_ pageNo: Swift.Int)
  @objc optional func openHighlightView(_ highlightView: Kitaboo_Reader_SDK.HighlightActionView, onPageNo pageNo: Swift.Int, atCoordinates coordinates: CoreFoundation.CGPoint, withHighlightedTextRect highlightedTextRect: CoreFoundation.CGPoint) -> Swift.Bool
  @objc optional func setColorForSharedUGC(_ hexColor: Swift.String)
  @objc optional func setBookOrientationMode(_ bookOrientation: Kitaboo_Reader_SDK.BookOrientationMode)
  @objc optional func getBookOrientationMode() -> Kitaboo_Reader_SDK.BookOrientationMode
  @objc optional func getHighlightVOForStickyNoteWithDefaultPosition() -> Kitaboo_Reader_SDK.SDKHighlightVO?
  @objc optional func getHighlightVOForStickyNoteWithDefaultPositionWithCallBack(_ callback: @escaping (Kitaboo_Reader_SDK.SDKHighlightVO?, (any Swift.Error)?) -> Swift.Void)
  @objc optional func getTextAnnotationVOWithDefaultPosition() -> Kitaboo_Reader_SDK.SDKTextAnnotationVO?
  @objc optional func drawTextAnnotation(_ textAnnotation: [Kitaboo_Reader_SDK.SDKTextAnnotationVO], onPageNo pageNo: Swift.Int)
  @objc optional func addTextAnnotation(_ sdkTextAnnotationVO: Kitaboo_Reader_SDK.SDKTextAnnotationVO)
  @objc optional func exitTextAnnotationMode()
  @objc optional func deleteTextAnnotation()
  @objc optional func removeTextAnnotationModeWithoutSave()
  @objc optional func updateTextAnnotationAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc optional func updateTextAnnotationWithBackground(_ background: UIKit.UIColor, withTextColor textColor: UIKit.UIColor)
  @objc optional func setVerticalMarginForReflowableEpubBook(_ marginValue: Foundation.NSNumber)
  @objc optional func resetZoomScaleToDefault()
  @objc optional func drawProtractorDrawings(_ protractorArray: [Any], onPageNo pageNo: Swift.Int)
  @objc optional func getFIBViewForLinkId(_ linkID: Swift.Int) -> UIKit.UIView?
  @objc optional func addPrintPageView(_ printPageView: Kitaboo_Reader_SDK.PrintPageButton, onPageNO pageNo: Swift.Int)
  @objc optional func getPageImageToPrintForPageNumber(_ pageNo: Swift.Int) -> UIKit.UIImage?
  @objc optional func printPagesWithWatermark(_ watermarkText: Swift.String, withTextColor textColor: Swift.String, forPageNumbers pageNumbers: [Foundation.NSNumber], withCallback callback: @escaping (Any?) -> Swift.Void)
  @objc optional func printPagesWithWatermark(watermark watermarkText: Swift.String, textColor: Swift.String, forCustomPageNumbers customPages: Swift.String, forCurrentPage isCurrentPage: Swift.Bool, callback: @escaping (Any?) -> Swift.Void)
  @objc optional func exitPrintMode()
  @objc optional func addWatermark(_ watermarkHolderView: Kitaboo_Reader_SDK.WatermarkHolderView, onPageNumber pageNo: Swift.Int)
  @objc optional func updateUGC(_ UGCs: [Kitaboo_Reader_SDK.UGC], onPageNo pageNo: Swift.Int)
  @objc optional func disableTwoPageSeperation(_ disableSeperation: Swift.Bool)
  @objc optional func getSelectedTextForEpub(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc optional func enableTeacherReviewModeWithPageArray(_ pageArray: [Swift.String])
  @objc optional func disableTeacherReviewMode()
  @objc optional func addWatermarkImageOnEpub(_ watermarkImagePath: Swift.String, onPageNumber pageNo: Swift.Int)
  @objc optional func set3dVideoModeEnabled(_ enabled: Swift.Bool)
}
@objc public protocol HDMediaBookNarrationSpeedControllerDelegate {
  @objc optional func didNarrationSpeedValueChanges(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @objc optional func didTapOnCancel()
}
@objc @_Concurrency.MainActor @preconcurrency open class HDMediaBookNarrationSpeedController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency open var _mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?
  @objc @_Concurrency.MainActor @preconcurrency weak open var delegate: (any Kitaboo_Reader_SDK.HDMediaBookNarrationSpeedControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(_ mediaBookModel: Kitaboo_Reader_SDK.HDMediaBookModel?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func setTheme(_ themeVO: Kitaboo_Reader_SDK.HDKitabooMediaBookThemeVO?)
  @objc @_Concurrency.MainActor @preconcurrency public func setSpeedOptions(_ array: Foundation.NSArray)
  @objc @_Concurrency.MainActor @preconcurrency public func setSourceViewForNarrationSpeedController(_ view: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func addAlertController()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HSResourceParser : ObjectiveC.NSObject, Foundation.XMLParserDelegate {
  public var resource: Kitaboo_Reader_SDK.EPUBResource?
  public var resources: [Kitaboo_Reader_SDK.EPUBResource]
  public var text: Swift.String
  public var isCDATA: Swift.Bool
  @objc public func parse(_ filePath: Swift.String, error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSError?>?)
  @objc public func parserDidStartDocument(_ parser: Foundation.XMLParser)
  @objc public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc public func parser(_ parser: Foundation.XMLParser, foundCDATA CDATABlock: Foundation.Data)
  @objc public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc public func parser(_ parser: Foundation.XMLParser, validationErrorOccurred validationError: any Swift.Error)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HSNoteControllerDelegate {
  @objc optional func didTapOnCancelNote(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func didTapOnPostNote(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func didTapOnDeleteNote(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func didTapOnShareNote(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
  @objc optional func didTapOnPostNoteComment(_ highlight: Kitaboo_Reader_SDK.SDKHighlightVO)
}
extension Kitaboo_Reader_SDK.AssetType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.AssetType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.RendererAvailabilityForActionState : Swift.Equatable {}
extension Kitaboo_Reader_SDK.RendererAvailabilityForActionState : Swift.Hashable {}
extension Kitaboo_Reader_SDK.RendererAvailabilityForActionState : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.VIDEOTYPE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.VIDEOTYPE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.VIDEOTYPE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.Filter : Swift.Equatable {}
extension Kitaboo_Reader_SDK.Filter : Swift.Hashable {}
extension Kitaboo_Reader_SDK.Filter : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.MarkupLinkType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.MarkupLinkType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.MarkupLinkType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.BookOrientationType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.BookOrientationType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.BookOrientationType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate : Swift.Equatable {}
extension Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate : Swift.Hashable {}
extension Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.MediaBookTOCFilter : Swift.Equatable {}
extension Kitaboo_Reader_SDK.MediaBookTOCFilter : Swift.Hashable {}
extension Kitaboo_Reader_SDK.MediaBookTOCFilter : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.MultiLevelExpandStatus : Swift.Equatable {}
extension Kitaboo_Reader_SDK.MultiLevelExpandStatus : Swift.Hashable {}
extension Kitaboo_Reader_SDK.MultiLevelExpandStatus : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.UGCStatus : Swift.Equatable {}
extension Kitaboo_Reader_SDK.UGCStatus : Swift.Hashable {}
extension Kitaboo_Reader_SDK.UGCStatus : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.TextAnnotationAlignment : Swift.Equatable {}
extension Kitaboo_Reader_SDK.TextAnnotationAlignment : Swift.Hashable {}
extension Kitaboo_Reader_SDK.TextAnnotationAlignment : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.PlayerActionBarAlignment : Swift.Equatable {}
extension Kitaboo_Reader_SDK.PlayerActionBarAlignment : Swift.Hashable {}
extension Kitaboo_Reader_SDK.PlayerActionBarAlignment : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.PlayerActionBarAlignmentMode : Swift.Equatable {}
extension Kitaboo_Reader_SDK.PlayerActionBarAlignmentMode : Swift.Hashable {}
extension Kitaboo_Reader_SDK.PlayerActionBarAlignmentMode : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension Kitaboo_Reader_SDK.HDReachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension Kitaboo_Reader_SDK.HDReachability.NetworkStatus : Swift.Hashable {}
extension Kitaboo_Reader_SDK.HDReachability.Connection : Swift.Equatable {}
extension Kitaboo_Reader_SDK.HDReachability.Connection : Swift.Hashable {}
extension Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate_V6 : Swift.Equatable {}
extension Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate_V6 : Swift.Hashable {}
extension Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate_V6 : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate : Swift.Equatable {}
extension Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate : Swift.Hashable {}
extension Kitaboo_Reader_SDK.VideoPlayerViewStateUpdate : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.GlossaryResourceType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.GlossaryResourceType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.GlossaryResourceType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.AudioSyncController : Swift.Sendable {}
extension Kitaboo_Reader_SDK.WatermarkPosition : Swift.Equatable {}
extension Kitaboo_Reader_SDK.WatermarkPosition : Swift.Hashable {}
extension Kitaboo_Reader_SDK.WatermarkPosition : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.kTextSearchResultType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.kTextSearchResultType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.kTextSearchResultType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.kTextSearchCaseType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.kTextSearchCaseType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.kTextSearchCaseType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.HDMoviePlayerController : Swift.Sendable {}
extension Kitaboo_Reader_SDK.Constants.ClientURLType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.Constants.ClientURLType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.Constants.ClientURLType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.FONT_SIZE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.FONT_SIZE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.FONT_SIZE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.READER_MODE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.READER_MODE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.READER_MODE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.TEXT_ALIGNMENT : Swift.Equatable {}
extension Kitaboo_Reader_SDK.TEXT_ALIGNMENT : Swift.Hashable {}
extension Kitaboo_Reader_SDK.TEXT_ALIGNMENT : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.TEXT_LINESPACING : Swift.Equatable {}
extension Kitaboo_Reader_SDK.TEXT_LINESPACING : Swift.Hashable {}
extension Kitaboo_Reader_SDK.TEXT_LINESPACING : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.READER_MARGIN : Swift.Equatable {}
extension Kitaboo_Reader_SDK.READER_MARGIN : Swift.Hashable {}
extension Kitaboo_Reader_SDK.READER_MARGIN : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.PageSequence : Swift.Equatable {}
extension Kitaboo_Reader_SDK.PageSequence : Swift.Hashable {}
extension Kitaboo_Reader_SDK.PageSequence : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.ScrollDirection : Swift.Equatable {}
extension Kitaboo_Reader_SDK.ScrollDirection : Swift.Hashable {}
extension Kitaboo_Reader_SDK.ScrollDirection : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.HighlightColor : Swift.Equatable {}
extension Kitaboo_Reader_SDK.HighlightColor : Swift.Hashable {}
extension Kitaboo_Reader_SDK.HighlightColor : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.DRAWING_MODE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.DRAWING_MODE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.DRAWING_MODE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.PenMode : Swift.Equatable {}
extension Kitaboo_Reader_SDK.PenMode : Swift.Hashable {}
extension Kitaboo_Reader_SDK.PenMode : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.HSWebkitManager : Swift.Sendable {}
extension Kitaboo_Reader_SDK.CurrentState : Swift.Equatable {}
extension Kitaboo_Reader_SDK.CurrentState : Swift.Hashable {}
extension Kitaboo_Reader_SDK.CurrentState : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.SleepAction : Swift.Equatable {}
extension Kitaboo_Reader_SDK.SleepAction : Swift.Hashable {}
extension Kitaboo_Reader_SDK.SleepAction : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.EPUB_FILE_TYPE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.EPUB_FILE_TYPE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.EPUB_FILE_TYPE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.EPUB_PAGE_DIRECTION : Swift.Equatable {}
extension Kitaboo_Reader_SDK.EPUB_PAGE_DIRECTION : Swift.Hashable {}
extension Kitaboo_Reader_SDK.EPUB_PAGE_DIRECTION : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.EPUB_LAYOUT : Swift.Equatable {}
extension Kitaboo_Reader_SDK.EPUB_LAYOUT : Swift.Hashable {}
extension Kitaboo_Reader_SDK.EPUB_LAYOUT : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.EPUBMarkupLinkType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.EPUBMarkupLinkType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.EPUBMarkupLinkType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.MediaBookTOCFilter_V6 : Swift.Equatable {}
extension Kitaboo_Reader_SDK.MediaBookTOCFilter_V6 : Swift.Hashable {}
extension Kitaboo_Reader_SDK.MediaBookTOCFilter_V6 : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate_V6 : Swift.Equatable {}
extension Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate_V6 : Swift.Hashable {}
extension Kitaboo_Reader_SDK.AudioBookPlayerViewStateUpdate_V6 : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.KitabooAudioPlayer : Swift.Sendable {}
extension Kitaboo_Reader_SDK.SDKError : Swift.Equatable {}
extension Kitaboo_Reader_SDK.SDKError : Swift.Hashable {}
extension Kitaboo_Reader_SDK.SDKError : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.YTVimeoVideoQuality : Swift.Equatable {}
extension Kitaboo_Reader_SDK.YTVimeoVideoQuality : Swift.Hashable {}
extension Kitaboo_Reader_SDK.YTVimeoVideoQuality : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.GenerateReportFilter : Swift.Equatable {}
extension Kitaboo_Reader_SDK.GenerateReportFilter : Swift.Hashable {}
extension Kitaboo_Reader_SDK.GenerateReportFilter : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.MEDIA_PLAYER : Swift.Equatable {}
extension Kitaboo_Reader_SDK.MEDIA_PLAYER : Swift.Hashable {}
extension Kitaboo_Reader_SDK.MEDIA_PLAYER : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.TOOL_TYPE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.TOOL_TYPE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.TOOL_TYPE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.HIGHLIGHT_VIEW_TYPE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.HIGHLIGHT_VIEW_TYPE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.HIGHLIGHT_VIEW_TYPE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.AUDIO_SYNC_TYPE : Swift.Equatable {}
extension Kitaboo_Reader_SDK.AUDIO_SYNC_TYPE : Swift.Hashable {}
extension Kitaboo_Reader_SDK.AUDIO_SYNC_TYPE : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.TBXMLErrorCodes : Swift.Equatable {}
extension Kitaboo_Reader_SDK.TBXMLErrorCodes : Swift.Hashable {}
extension Kitaboo_Reader_SDK.TBXMLErrorCodes : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.KitabooLogType : Swift.Equatable {}
extension Kitaboo_Reader_SDK.KitabooLogType : Swift.Hashable {}
extension Kitaboo_Reader_SDK.KitabooLogType : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.JSONSerializer.JSONSerializerError : Swift.Equatable {}
extension Kitaboo_Reader_SDK.JSONSerializer.JSONSerializerError : Swift.Hashable {}
extension Kitaboo_Reader_SDK.TaskStatus : Swift.Equatable {}
extension Kitaboo_Reader_SDK.TaskStatus : Swift.Hashable {}
extension Kitaboo_Reader_SDK.TaskStatus : Swift.RawRepresentable {}
extension Kitaboo_Reader_SDK.BookOrientationMode : Swift.Equatable {}
extension Kitaboo_Reader_SDK.BookOrientationMode : Swift.Hashable {}
extension Kitaboo_Reader_SDK.BookOrientationMode : Swift.RawRepresentable {}
