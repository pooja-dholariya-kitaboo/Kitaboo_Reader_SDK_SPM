#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef KITABOO_READER_SDK_SWIFT_H
#define KITABOO_READER_SDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import AVFoundation;
@import AVKit;
@import CoreData;
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ImageIO;
@import MediaPlayer;
@import ObjectiveC;
@import Speech;
@import UIKit;
@import WebKit;
@import _Builtin_stddef.size_t;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Kitaboo_Reader_SDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, AUDIO_SYNC_TYPE, open) {
  AUDIO_SYNC_TYPENormal = 0,
  AUDIO_SYNC_TYPEUnderline = 1,
};

@class UILabel;
@class NSURL;
@class NSString;
@class NSMutableDictionary;
@class NSDictionary;

@interface AVPlayerViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, strong) UILabel * _Nullable subtitleLabel;
- (void)addSubtitles;
- (BOOL)openWithFileFromLocal:(NSURL * _Nonnull)filePath error:(NSError * _Nullable * _Nullable)error;
- (void)showWithSubtitles:(NSString * _Nonnull)string;
- (void)showByDictionaryWithDictionaryContent:(NSMutableDictionary * _Nonnull)dictionaryContent;
- (void)addPeriodicNotificationWithParsedPayload:(NSDictionary * _Nonnull)parsedPayload;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14AboutThis_V6_0")
@interface AboutThis_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable header;
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable horizontalDivider;
@property (nonatomic, copy) NSString * _Nullable readProgressBar;
@property (nonatomic, copy) NSString * _Nullable chapterNumber;
@property (nonatomic, copy) NSString * _Nullable collectionSingleSelect;
@property (nonatomic, copy) NSString * _Nullable favouriteNonselected;
@property (nonatomic, copy) NSString * _Nullable favouriteSelected;
@property (nonatomic, copy) NSString * _Nullable favouriteBackground;
@property (nonatomic, copy) NSString * _Nullable readNowBackground;
@property (nonatomic, copy) NSString * _Nullable readNowText;
@property (nonatomic, copy) NSString * _Nullable analytics;
@property (nonatomic, copy) NSString * _Nullable analyticsOutline;
@property (nonatomic, copy) NSString * _Nullable analyticsText;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable format;
@property (nonatomic, copy) NSString * _Nullable tabSelected;
@property (nonatomic, copy) NSString * _Nullable tabDeselected;
@property (nonatomic, copy) NSString * _Nullable descriptionV6;
@property (nonatomic, copy) NSString * _Nullable categoryLabel;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable downloadingButtonProgress;
@property (nonatomic, copy) NSString * _Nullable Selected_Tab_Text;
@property (nonatomic, copy) NSString * _Nullable Selected_collection_background;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GradientColor_V6_0;
@class SVG_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12AboutUs_V6_0")
@interface AboutUs_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
@property (nonatomic, copy) NSString * _Nullable backgroundImage;
@property (nonatomic, copy) NSString * _Nullable closeIconColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable descriptionTextColor;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, strong) GradientColor_V6_0 * _Nullable gradientColor;
@property (nonatomic, strong) SVG_V6_0 * _Nullable svg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19AccessibilityHelper")
@interface AccessibilityHelper : NSObject
/// Used to set the bundle for reader accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable readerAccessibilityBundle;)
+ (NSBundle * _Nullable)readerAccessibilityBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setReaderAccessibilityBundle:(NSBundle * _Nullable)value;
/// Used to set the bundle for app accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable appAccessibilityBundle;)
+ (NSBundle * _Nullable)appAccessibilityBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppAccessibilityBundle:(NSBundle * _Nullable)value;
/// Used to set the language for accessibility files.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable language;)
+ (NSString * _Nullable)language SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguage:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DeSelectedButton_V6_0;
@class Cancel_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20ActionButton_V6_V6_0")
@interface ActionButton_V6_V6_0 : NSObject
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable main;
@property (nonatomic, strong) Cancel_V6_0 * _Nullable cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15AlignPopup_V6_0")
@interface AlignPopup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable selectedBorderColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19AllPopupsPopup_V6_0")
@interface AllPopupsPopup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable border;
@property (nonatomic, copy) NSString * _Nullable titleTextColor;
@property (nonatomic, copy) NSString * _Nullable hintTextColor;
@property (nonatomic, copy) NSString * _Nullable inputTextColor;
@property (nonatomic, copy) NSString * _Nullable lineColor;
@property (nonatomic, copy) NSString * _Nullable selectedLineColour;
@property (nonatomic, copy) NSString * _Nullable timeTextColor;
@property (nonatomic, copy) NSString * _Nullable speedTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedSpeedTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedSleepTextColor;
@property (nonatomic, copy) NSString * _Nullable checkIconColor;
@property (nonatomic, strong) ActionButton_V6_V6_0 * _Nullable actionButton;
@property (nonatomic, copy) NSString * _Nullable descriptionTextColor;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable deleteButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class OverlayPanel_V6_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14AllPopups_V6_0")
@interface AllPopups_V6_0 : NSObject
@property (nonatomic, strong) OverlayPanel_V6_V6_0 * _Nullable overlayPanel;
@property (nonatomic, strong) AllPopupsPopup_V6_0 * _Nullable popup;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that manage analytics.
/// The <code>AnalyticsManager</code> class is responsible for keeping track of analytics data for page, note, highlight, and link.
/// <ul>
///   <li>
///     Superclass: <code>NSObject</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16AnalyticsManager")
@interface AnalyticsManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17Analytics_V6_V6_0")
@interface Analytics_V6_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable headerBackground;
@property (nonatomic, copy) NSString * _Nullable backArrowHeader;
@property (nonatomic, copy) NSString * _Nullable horizontalDivider;
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable format;
@property (nonatomic, copy) NSString * _Nullable icons;
@property (nonatomic, copy) NSString * _Nullable divider;
@property (nonatomic, copy) NSString * _Nullable sectionBackground;
@property (nonatomic, copy) NSString * _Nullable sectionSelected;
@property (nonatomic, copy) NSString * _Nullable sectionNonselected;
@property (nonatomic, copy) NSString * _Nullable boxShadow;
@property (nonatomic, copy) NSString * _Nullable cardText;
@property (nonatomic, copy) NSString * _Nullable tabSelected;
@property (nonatomic, copy) NSString * _Nullable dropdownIconColor;
@property (nonatomic, copy) NSString * _Nullable classLabel;
@property (nonatomic, copy) NSString * _Nullable cardProgressbarFillBgcolor;
@property (nonatomic, copy) NSString * _Nullable cardProgressbarFillBuffercolor;
@property (nonatomic, copy) NSString * _Nullable back_arrow;
@property (nonatomic, copy) NSString * _Nullable header;
@property (nonatomic, copy) NSString * _Nullable selected_Tab_Background;
@property (nonatomic, copy) NSString * _Nullable selected_Tab_Left_Border;
@property (nonatomic, copy) NSString * _Nullable selected_Tab_Icon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13AudioBar_V6_0")
@interface AudioBar_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
@property (nonatomic, copy) NSString * _Nullable audioDragIcon;
@property (nonatomic, copy) NSString * _Nullable audioDragBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable playPauseIcon;
@property (nonatomic, copy) NSString * _Nullable muteIcon;
@property (nonatomic, copy) NSString * _Nullable currentTime;
@property (nonatomic, copy) NSString * _Nullable closeAudio;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19AudioBookCover_V6_0")
@interface AudioBookCover_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable shadowColor;
@property (nonatomic, copy) NSString * _Nullable opacity;
@property (nonatomic, copy) NSString * _Nullable boxShadow;
@property (nonatomic, copy) NSString * _Nullable rgba;
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AudioBookPlayerViewStateUpdate, open) {
  AudioBookPlayerViewStateUpdateKAudioBookUpdatePlayPauseState = 0,
  AudioBookPlayerViewStateUpdateKAudioBookUpdateReadingSpeed = 1,
  AudioBookPlayerViewStateUpdateKAudioBookUpdateCurrentTime = 2,
};

typedef SWIFT_ENUM(NSInteger, AudioBookPlayerViewStateUpdate_V6, open) {
  AudioBookPlayerViewStateUpdate_V6KAudioBookUpdatePlayPauseState = 0,
  AudioBookPlayerViewStateUpdate_V6KAudioBookUpdateReadingSpeed = 1,
  AudioBookPlayerViewStateUpdate_V6KAudioBookUpdateCurrentTime = 2,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16AudioMarkup_V6_0")
@interface AudioMarkup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable iconBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable audioContainerBorderColor;
@property (nonatomic, copy) NSString * _Nullable boxShadow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIGestureRecognizer;
@class AVAudioPlayer;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19AudioSyncController")
@interface AudioSyncController : NSObject <AVAudioPlayerDelegate, UIGestureRecognizerDelegate>
- (void)playPauseAction;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (void)pause;
/// Update the progress bar value.
- (void)updateProgressBarValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK27AudioSyncControllerDelegate_")
@protocol AudioSyncControllerDelegate
@optional
- (void)didJumpToTextWithFrame:(CGRect)frame pageIdentifier:(NSString * _Nonnull)pageIdentifier;
- (void)didJumpToSentenceWithWordFrames:(NSArray * _Nonnull)wordFrames pageIdentifier:(NSString * _Nonnull)pageIdentifier;
- (void)didFailedAudioSync:(NSError * _Nonnull)error;
- (void)didJumpToTextWithWordId:(NSString * _Nonnull)wordId pageIdentifier:(NSString * _Nonnull)pageIdentifier;
- (void)audioSyncDidComplete;
- (void)audioSyncDidStop;
- (void)audioSyncDidPause;
- (void)audioSyncDidCompleteForPageIdentifier:(NSString * _Nonnull)pageIdentifier;
- (void)updateProgressSliderbarAndElapsedTime;
@end

@class SlideController_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21AudioVideoSlider_V6_0")
@interface AudioVideoSlider_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable sliderColor;
@property (nonatomic, copy) NSString * _Nullable chapterIconColor;
@property (nonatomic, copy) NSString * _Nullable sliderFilledColor;
@property (nonatomic, strong) SlideController_V6_0 * _Nullable slideController;
@property (nonatomic, copy) NSString * _Nullable defaultTimetextColor;
@property (nonatomic, copy) NSString * _Nullable currentTimetextColor;
@property (nonatomic, copy) NSString * _Nullable chapterTitleColor;
@property (nonatomic, copy) NSString * _Nullable chapterCountTextColor;
@property (nonatomic, copy) NSString * _Nullable navigationArrowColor;
@property (nonatomic, copy) NSString * _Nullable disabledNavigationArrowColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconBg;
@property (nonatomic, copy) NSString * _Nullable chapterThumbnailProgressBarColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BookClassSharingConfiguration")
@interface BookClassSharingConfiguration : NSObject
- (nonnull instancetype)initWithSharingList:(NSDictionary<NSString *, id> * _Nonnull)sharingList type:(NSString * _Nonnull)type role:(NSInteger)role OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTeacherSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStudentSharingEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStudent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol BookmarkControllerDelegate;
@class UITextField;
@class SDKBookmarkVO;
@class NSCoder;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18BookMarkController")
@interface BookMarkController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) id <BookmarkControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (void)setBackgroundColorForView:(NSString * _Nonnull)color;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)didReceiveMemoryWarning;
- (SDKBookmarkVO * _Nullable)getBookmarkVO SWIFT_WARN_UNUSED_RESULT;
- (void)setBookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BookMarkViewDelegate;
@class NSNumber;
@class UIColor;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12BookMarkView")
@interface BookMarkView : UIButton
@property (nonatomic, strong) id <BookMarkViewDelegate> _Nullable delegate;
@property (nonatomic, strong) NSNumber * _Nonnull pageNumber;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBookmarkIcon:(NSString * _Nonnull)bookmarkIcon selectedBookmarkIcon:(NSString * _Nonnull)selectedBookmarkIcon;
- (nonnull instancetype)initWithBookmarkIcon:(NSString * _Nonnull)bookmarkIcon selectedBookmarkIcon:(NSString * _Nonnull)selectedBookmarkIcon bookmarkSize:(CGSize)bookmarkSize;
- (nonnull instancetype)initWithBookmarkSize:(CGSize)bookmarkSize;
- (void)setBookmarkColorForNormalState:(UIColor * _Nonnull)color;
- (void)setBookmarkColorForSelectedState:(UIColor * _Nonnull)color;
- (void)updateBookmarkIcon;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// The delegate of a BookMarkView object must adopt the BookMarkViewDelegate protocol.
/// The BookMarkViewDelegate Protocol handles all the callbacks of BookMarkView class. The BookMarkViewDelegate protocol defines methods that allow user to perform action when bookmark icon is tapped. All methods of this protocol are optional.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK20BookMarkViewDelegate_")
@protocol BookMarkViewDelegate
/// This method will be called when the user tap on bookmark in page
/// \param bookmarkView BookMarkView object
///
- (void)didTapOnBookMark:(BookMarkView * _Nonnull)bookmarkView;
@end

typedef SWIFT_ENUM(NSInteger, BookOrientationMode, open) {
/// With this Mode, Book will support both orientations.
  BookOrientationModeDynamic = 0,
/// Book will launch in Landscape mode, with one page, this should be set for Landscape Lock book.
  BookOrientationModeLandscapeOnePageOnly = 1,
/// Book will launch in Landscape mode, with two page, this should be set for Landscape Lock book.
  BookOrientationModeLandscapeTwoPageOnly = 2,
/// Book will launch in Portrait mode, with single page, this should be set for Portait Lock book.
  BookOrientationModePortrait = 3,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18BookShelfConstants")
@interface BookShelfConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Connecting;)
+ (NSString * _Nonnull)Connecting SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Preparing;)
+ (NSString * _Nonnull)Preparing SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Loading;)
+ (NSString * _Nonnull)Loading SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STARTED_DOWNLOADING;)
+ (NSString * _Nonnull)STARTED_DOWNLOADING SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FINISHED_DOWNLOADING;)
+ (NSString * _Nonnull)FINISHED_DOWNLOADING SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ERROR_IN_DOWNLOADING;)
+ (NSString * _Nonnull)ERROR_IN_DOWNLOADING SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAUSED_DOWNLOADING;)
+ (NSString * _Nonnull)PAUSED_DOWNLOADING SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NO_NETWORK;)
+ (NSString * _Nonnull)NO_NETWORK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIDE_TOPBAR_BUTTONS;)
+ (NSString * _Nonnull)HIDE_TOPBAR_BUTTONS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_TOPBAR_BUTTONS;)
+ (NSString * _Nonnull)SHOW_TOPBAR_BUTTONS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_REFRESH_BUTTON;)
+ (NSString * _Nonnull)BOOKSHELF_REFRESH_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKPLAYER_BOOKMARK_BUTTON;)
+ (NSString * _Nonnull)BOOKPLAYER_BOOKMARK_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_PAGE_TRANSITION_VIEW;)
+ (NSString * _Nonnull)SHOW_PAGE_TRANSITION_VIEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NO_ACCOUNT_SIGN_UP_ENABLED;)
+ (NSString * _Nonnull)NO_ACCOUNT_SIGN_UP_ENABLED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PEN_TOOL_ENABLED;)
+ (NSString * _Nonnull)PEN_TOOL_ENABLED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PHONE_BOOKPLAYER_SEARCH_ENABLE;)
+ (NSString * _Nonnull)PHONE_BOOKPLAYER_SEARCH_ENABLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TOC_SEGMENT_CTRL;)
+ (NSString * _Nonnull)TOC_SEGMENT_CTRL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_PASSWORD_LOADS_URL;)
+ (NSString * _Nonnull)CHANGE_PASSWORD_LOADS_URL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_PROFILE_PICTURE_ENABLED;)
+ (NSString * _Nonnull)CHANGE_PROFILE_PICTURE_ENABLED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull READ_TO_ME_CLOSE_ICON_ENABLED;)
+ (NSString * _Nonnull)READ_TO_ME_CLOSE_ICON_ENABLED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OPEN_WEBACTIVITY_INSIDEAPP;)
+ (NSString * _Nonnull)OPEN_WEBACTIVITY_INSIDEAPP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SIGNOUT_HELP_BUTTON;)
+ (NSString * _Nonnull)SIGNOUT_HELP_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SIGNOUT_BG_COLOR;)
+ (NSString * _Nonnull)SIGNOUT_BG_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SIGNOUT_PROFILE_SETTINGS_BUTTON;)
+ (NSString * _Nonnull)SIGNOUT_PROFILE_SETTINGS_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SIGNOUT_SIGN_OUT_BUTTON;)
+ (NSString * _Nonnull)SIGNOUT_SIGN_OUT_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FORGOT_PASSWORD_VIEW_CLOSE_BUTTON;)
+ (NSString * _Nonnull)FORGOT_PASSWORD_VIEW_CLOSE_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SIDEBAR_NIB_VIEW;)
+ (NSString * _Nonnull)SIDEBAR_NIB_VIEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SIDEBAR_SEPARATOR_VIEW;)
+ (NSString * _Nonnull)SIDEBAR_SEPARATOR_VIEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SIDEBAR_SELECTED_CELL;)
+ (NSString * _Nonnull)SIDEBAR_SELECTED_CELL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TOPBAR_BG_COLOR;)
+ (NSString * _Nonnull)TOPBAR_BG_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TOPBAR_ACCESSCODE_BTN;)
+ (NSString * _Nonnull)TOPBAR_ACCESSCODE_BTN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOTTOMBAR_SEGMENT_CONTROl;)
+ (NSString * _Nonnull)BOTTOMBAR_SEGMENT_CONTROl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLLECTIONVIEWCELL_SELECTED_COLOR;)
+ (NSString * _Nonnull)COLLECTIONVIEWCELL_SELECTED_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull THUMBNAIL_TITLE_LABEL_ENABLED;)
+ (NSString * _Nonnull)THUMBNAIL_TITLE_LABEL_ENABLED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_VIEW_BG_COLOR;)
+ (NSString * _Nonnull)BOOKSHELF_VIEW_BG_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIGHLIGHT_COLOR0;)
+ (NSString * _Nonnull)HIGHLIGHT_COLOR0 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIGHLIGHT_COLOR1;)
+ (NSString * _Nonnull)HIGHLIGHT_COLOR1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIGHLIGHT_COLOR2;)
+ (NSString * _Nonnull)HIGHLIGHT_COLOR2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIGHLIGHT_COLOR3;)
+ (NSString * _Nonnull)HIGHLIGHT_COLOR3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIGHLIGHT_TYPE;)
+ (NSString * _Nonnull)HIGHLIGHT_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AUDIO_TYPE;)
+ (NSString * _Nonnull)AUDIO_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ACCESS_CODE_MAX_LENGTH;)
+ (NSInteger)ACCESS_CODE_MAX_LENGTH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USER_DEFAULT_CONFIG_DICTIONARY_KEY;)
+ (NSString * _Nonnull)USER_DEFAULT_CONFIG_DICTIONARY_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LMS_STUDENT_ID;)
+ (NSString * _Nonnull)LMS_STUDENT_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LMS_SCHOOL_ID;)
+ (NSString * _Nonnull)LMS_SCHOOL_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LMS_SERVICE_URL;)
+ (NSString * _Nonnull)LMS_SERVICE_URL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LANGUAGE_OPTION;)
+ (NSString * _Nonnull)LANGUAGE_OPTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAGE_TRANSITION;)
+ (NSString * _Nonnull)PAGE_TRANSITION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFIED_APP_INSTALLED;)
+ (NSString * _Nonnull)NOTIFIED_APP_INSTALLED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DOWNLOAD_BUTTON_TAG;)
+ (NSInteger)DOWNLOAD_BUTTON_TAG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PAUSE_BUTTON_TAG;)
+ (NSInteger)PAUSE_BUTTON_TAG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger RESUME_BUTTON_TAG;)
+ (NSInteger)RESUME_BUTTON_TAG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_SCREENS_COMPONENT_COLOR;)
+ (NSString * _Nonnull)BOOKSHELF_SCREENS_COMPONENT_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_SCREENS_ICON_COLOR;)
+ (NSString * _Nonnull)BOOKSHELF_SCREENS_ICON_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_SCREENS_COMPONENT_HIGHLIGHT_COLOR;)
+ (NSString * _Nonnull)BOOKSHELF_SCREENS_COMPONENT_HIGHLIGHT_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_SCREENS_TEXT_PLACEHOLDER_COLOR;)
+ (NSString * _Nonnull)BOOKSHELF_SCREENS_TEXT_PLACEHOLDER_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_SCREENS_TEXT_COLOR;)
+ (NSString * _Nonnull)BOOKSHELF_SCREENS_TEXT_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_SCREENS_DIVIDER_COLOR;)
+ (NSString * _Nonnull)BOOKSHELF_SCREENS_DIVIDER_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AUDIO_SYNC_QUE_COLOR;)
+ (NSString * _Nonnull)AUDIO_SYNC_QUE_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull READ_TO_ME_AUDIO_SYNC_COLOR;)
+ (NSString * _Nonnull)READ_TO_ME_AUDIO_SYNC_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIDE_MARKUP_ICONS_FOR_READTOME;)
+ (NSString * _Nonnull)HIDE_MARKUP_ICONS_FOR_READTOME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_SIGNIN_TEXT_FOR_SIGIN_VIEW;)
+ (NSString * _Nonnull)SHOW_SIGNIN_TEXT_FOR_SIGIN_VIEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MARKUP_ICON_SIZE;)
+ (NSString * _Nonnull)MARKUP_ICON_SIZE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IPAD_PORTRAIT;)
+ (NSString * _Nonnull)IPAD_PORTRAIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IPAD_LANDSCAPE;)
+ (NSString * _Nonnull)IPAD_LANDSCAPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IPHONE_PORTRAIT;)
+ (NSString * _Nonnull)IPHONE_PORTRAIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IPHONE_LANDSCAPE;)
+ (NSString * _Nonnull)IPHONE_LANDSCAPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_PROFILE_EDIT_ICON;)
+ (NSString * _Nonnull)SHOW_PROFILE_EDIT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LAUNCH_SCREEN_LAUNCH_TIME;)
+ (NSString * _Nonnull)LAUNCH_SCREEN_LAUNCH_TIME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_READ_TO_ME_POPUP;)
+ (NSString * _Nonnull)SHOW_READ_TO_ME_POPUP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USE_OAUTH;)
+ (NSString * _Nonnull)USE_OAUTH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_iPHONE_BOOKPLAYER_ASPECTFIT;)
+ (NSString * _Nonnull)SHOW_iPHONE_BOOKPLAYER_ASPECTFIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_THUMBNAIL_ASPECTFIT;)
+ (NSString * _Nonnull)BOOKSHELF_THUMBNAIL_ASPECTFIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CLOSE_AUDIOBAR_AFTER_PLAYING;)
+ (NSString * _Nonnull)CLOSE_AUDIOBAR_AFTER_PLAYING SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull INLINE_VIDEO_ASPECT_FIT;)
+ (NSString * _Nonnull)INLINE_VIDEO_ASPECT_FIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_HELP_SCREEN;)
+ (NSString * _Nonnull)SHOW_HELP_SCREEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NEW_SIGN_IN_VIEW_ENABLED;)
+ (NSString * _Nonnull)NEW_SIGN_IN_VIEW_ENABLED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_PRINT_OPTION;)
+ (NSString * _Nonnull)SHOW_PRINT_OPTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_LAST_NAME_IN_PROFILE_SETTINGS;)
+ (NSString * _Nonnull)SHOW_LAST_NAME_IN_PROFILE_SETTINGS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_PROTRACTOR_TOOL;)
+ (NSString * _Nonnull)SHOW_PROTRACTOR_TOOL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Kitaboo6_0_V6_0;
@class Signin_V6_0;
@class WelcomeBookshelf_V6_0;
@class WelcomeReader_V6_0;
@class WelcomeAudioVideoBookPlayer_V6_0;
@class DarkMode_V6_0;
@class KAI_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22BookShelfThemeFor_V6_0")
@interface BookShelfThemeFor_V6_0 : NSObject
@property (nonatomic, strong) Kitaboo6_0_V6_0 * _Nullable kitaboo6_0;
@property (nonatomic, strong) Signin_V6_0 * _Nullable signin;
@property (nonatomic, strong) WelcomeBookshelf_V6_0 * _Nullable bookshelf;
@property (nonatomic, strong) WelcomeReader_V6_0 * _Nullable reader;
@property (nonatomic, strong) WelcomeAudioVideoBookPlayer_V6_0 * _Nullable audioVideoBookPlayer;
@property (nonatomic, strong) DarkMode_V6_0 * _Nullable darkMode;
@property (nonatomic, strong) KAI_V6_0 * _Nullable kai;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("BookSyncInfo")
@interface BookSyncInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface BookSyncInfo (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, strong) NSNumber * _Nullable bookID;
@property (nonatomic, strong) NSObject * _Nullable bookMetaData;
@property (nonatomic, strong) NSNumber * _Nullable isSynced;
@property (nonatomic, copy) NSString * _Nullable lastSyncDate;
@property (nonatomic, copy) NSString * _Nullable timeStamp;
@property (nonatomic, strong) NSNumber * _Nullable userID;
@end


/// @protocol BookmarkControllerDelegate
/// @brief The delegate of a BookMarkController object must adopt the BookmarkControllerDelegate protocol.
/// @discussion The BookmarkControllerDelegate Protocol handles all the callbacks of BookMarkController class. The BookmarkControllerDelegate protocol defines method that allow user to perform action when bookmark is created/updated.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK26BookmarkControllerDelegate_")
@protocol BookmarkControllerDelegate
- (void)didBookmarkCompleteWith:(SDKBookmarkVO * _Nonnull)bookmarkVO;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13Bookmark_V6_0")
@interface Bookmark_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable inputPanelBg;
@property (nonatomic, copy) NSString * _Nullable hintTextColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable buttonBackground;
@property (nonatomic, copy) NSString * _Nullable buttonTextColor;
@property (nonatomic, copy) NSString * _Nullable crossIconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23BookshelfInfoPopup_V6_0")
@interface BookshelfInfoPopup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable contentTitle;
@property (nonatomic, copy) NSString * _Nullable divider;
@property (nonatomic, copy) NSString * _Nullable optionText;
@property (nonatomic, copy) NSString * _Nullable optionIcon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ShareFeedback_V6_0;
@class SignoutButton_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21BookshelfProfile_V6_0")
@interface BookshelfProfile_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable leftBackground;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic, copy) NSString * _Nullable sectionBackground;
@property (nonatomic, copy) NSString * _Nullable selectedSectionText;
@property (nonatomic, copy) NSString * _Nullable sectionHeaderPersonalinfoGeneralLegal;
@property (nonatomic, copy) NSString * _Nullable sectionCardBackground;
@property (nonatomic, copy) NSString * _Nullable profilerightBackground;
@property (nonatomic, copy) NSString * _Nullable contentTitle;
@property (nonatomic, copy) NSString * _Nullable inputOutline;
@property (nonatomic, copy) NSString * _Nullable inputText;
@property (nonatomic, copy) NSString * _Nullable inputTextLabel;
@property (nonatomic, copy) NSString * _Nullable editProfile;
@property (nonatomic, copy) NSString * _Nullable editIcon;
@property (nonatomic, copy) NSString * _Nullable profileOutline;
@property (nonatomic, copy) NSString * _Nullable saveDisabled;
@property (nonatomic, copy) NSString * _Nullable saveEnabled;
@property (nonatomic, copy) NSString * _Nullable saveText;
@property (nonatomic, copy) NSString * _Nullable cancelDisabled;
@property (nonatomic, copy) NSString * _Nullable cancelOutlineText;
@property (nonatomic, copy) NSString * _Nullable Cancel_Outline;
@property (nonatomic, copy) NSString * _Nullable cancelBackground;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
@property (nonatomic, copy) NSString * _Nullable signOut;
@property (nonatomic, copy) NSString * _Nullable aboutusCard;
@property (nonatomic, copy) NSString * _Nullable emailidColor;
@property (nonatomic, copy) NSString * _Nullable divider;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable selectedLanguage;
@property (nonatomic, copy) NSString * _Nullable Cancel_Text;
@property (nonatomic, copy) NSString * _Nullable langaugeArrow;
@property (nonatomic, copy) NSString * _Nullable topbar_background;
@property (nonatomic, copy) NSString * _Nullable back_icon_color;
@property (nonatomic, copy) NSString * _Nullable Selected_tab_icon;
@property (nonatomic, copy) NSString * _Nullable Selected_tab_left_border;
@property (nonatomic, strong) ShareFeedback_V6_0 * _Nullable shareFeedback;
@property (nonatomic, strong) SignoutButton_V6_0 * _Nullable signoutButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23BookshelfSearch_V6_V6_0")
@interface BookshelfSearch_V6_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable headerBackground;
@property (nonatomic, copy) NSString * _Nullable searchOutline;
@property (nonatomic, copy) NSString * _Nullable searchHintTextLabel;
@property (nonatomic, copy) NSString * _Nullable searchTextLabel;
@property (nonatomic, copy) NSString * _Nullable searchIconColour;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable searchResult;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable horizontalDivider;
@property (nonatomic, copy) NSString * _Nullable elasticSearchIcon;
@property (nonatomic, copy) NSString * _Nullable thumbnailSelectionBackground;
@property (nonatomic, copy) NSString * _Nullable descriptionV6;
@property (nonatomic, copy) NSString * _Nullable searchedWord;
@property (nonatomic, copy) NSString * _Nullable downloadShowButton;
@property (nonatomic, copy) NSString * _Nullable buttonText;
@property (nonatomic, copy) NSString * _Nullable cancelButtonTextOutline;
@property (nonatomic, copy) NSString * _Nullable tabSelected;
@property (nonatomic, copy) NSString * _Nullable tabDeselected;
@property (nonatomic, copy) NSString * _Nullable checkboxbackground;
@property (nonatomic, copy) NSString * _Nullable contentTypeFormat;
@property (nonatomic, copy) NSString * _Nullable selectCategoryText;
@property (nonatomic, copy) NSString * _Nullable Search_mobile_bgColor;
@property (nonatomic, copy) NSString * _Nullable Search_mobile_border;
@property (nonatomic, copy) NSString * _Nullable Sortby_mobile_icon_color;
@property (nonatomic, copy) NSString * _Nullable Selected_Tab_Text;
@property (nonatomic, copy) NSString * _Nullable Search_history_icon_color;
@property (nonatomic, copy) NSString * _Nullable Search_history_text_color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20BookshelfSortby_V6_0")
@interface BookshelfSortby_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable titleText;
@property (nonatomic, copy) NSString * _Nullable sectionHeader;
@property (nonatomic, copy) NSString * _Nullable sectionBackground;
@property (nonatomic, copy) NSString * _Nullable sectionOptionText;
@property (nonatomic, copy) NSString * _Nullable selectedTextColour;
@property (nonatomic, copy) NSString * _Nullable selectTextTick;
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable mouseHover;
@property (nonatomic, copy) NSString * _Nullable panelBackground;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14BottomBar_V6_0")
@interface BottomBar_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, copy) NSString * _Nullable recentIconColour;
@property (nonatomic, copy) NSString * _Nullable selectedRecentIcon;
@property (nonatomic, copy) NSString * _Nullable selectedRecentButtonBg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16BottomPanel_V6_0")
@interface BottomPanel_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable borderColor;
@property (nonatomic, copy) NSString * _Nullable hintTextColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable iconColorDisabled;
@property (nonatomic, copy) NSString * _Nullable iconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15Brightness_V6_0")
@interface Brightness_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable sliderColor;
@property (nonatomic, copy) NSString * _Nullable sliderSelectedColor;
@property (nonatomic, copy) NSString * _Nullable iconFaded;
@property (nonatomic, copy) NSString * _Nullable iconBright;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11Cancel_V6_0")
@interface Cancel_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable borderColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22CategoryLeftPanel_V6_0")
@interface CategoryLeftPanel_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable verticalDivider;
@property (nonatomic, copy) NSString * _Nullable categoriesTextColor;
@property (nonatomic, copy) NSString * _Nullable categoriesTextSelectedColorLine;
@property (nonatomic, copy) NSString * _Nullable Categories_text_selected_color;
@property (nonatomic, copy) NSString * _Nullable Categories_selected_icon_color;
@property (nonatomic, copy) NSString * _Nullable Search_Categories_input_border;
@property (nonatomic, copy) NSString * _Nullable Search_Categories_input_color;
@property (nonatomic, copy) NSString * _Nullable Search_Categories_icon_color;
@property (nonatomic, copy) NSString * _Nullable categoriesTextSelectedBar;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23CategoryRightShelf_V6_0")
@interface CategoryRightShelf_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable hamburgerMenu;
@property (nonatomic, copy) NSString * _Nullable categoriesTextColor;
@property (nonatomic, copy) NSString * _Nullable viewAll;
@property (nonatomic, copy) NSString * _Nullable readProgressBar;
@property (nonatomic, copy) NSString * _Nullable coverEmptyBackgroound;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable format;
@property (nonatomic, copy) NSString * _Nullable moreIcon;
@property (nonatomic, copy) NSString * _Nullable tooltipBackground;
@property (nonatomic, copy) NSString * _Nullable tooltipText;
@property (nonatomic, copy) NSString * _Nullable arrowColorDisabled;
@property (nonatomic, copy) NSString * _Nullable arrowColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLRequest;
@class NSData;
@class KitabooServiceMetaData;

SWIFT_CLASS_NAMED("KitabooRequest")
@interface KitabooRequest : NSObject
- (NSURLRequest * _Nonnull)registerUser:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password accessCode:(NSString * _Nonnull)accessCode SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)validateAccessCodeWithUserToken:(NSString * _Nonnull)userToken withAccessCode:(NSString * _Nonnull)accessCode SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateUserWith:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateUserWith:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password addUUID:(BOOL)addUUID SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateUserWithEncryptedPassword:(NSString * _Nonnull)userName encryptedPassword:(NSString * _Nonnull)encryptedPassword addUUID:(BOOL)addUUID SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateGoogleClassRoomUserWith:(NSDictionary<NSString *, id> * _Nonnull)tokenSchema SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)changePasswordWith:(NSString * _Nonnull)userToken existingPassword:(NSString * _Nonnull)password password:(NSString * _Nonnull)newPassword andUserName:(NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)changePasswordWith:(NSString * _Nonnull)userToken existingEncryptedPassword:(NSString * _Nonnull)password encryptedPassword:(NSString * _Nonnull)newPassword andUserName:(NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)resetPasswordWithUserName:(NSString * _Nonnull)userName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)bookClassInfo:(NSString * _Nonnull)userToken bookIds:(NSArray<NSString *> * _Nonnull)bookIds SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)forceUpdate:(NSString * _Nonnull)appVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)dowloadBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)dowloadBookOnlineURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadMediaBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)dowloadBookOnlineServerlessURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadMediaBookServerlessURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)authenticateHLSPackageWithBaseURL:(NSString * _Nonnull)baseURL userToken:(NSString * _Nonnull)userToken packageId:(int64_t)packageId timeStamp:(int64_t)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)consumeBookWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)releaseBookWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategoryWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategoryV1WithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCategoryListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCategoryListV1WithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBooksForCollectionWithUserToken:(NSString * _Nonnull)userToken categoryName:(NSString * _Nonnull)categoryName collectionName:(NSString * _Nonnull)collectionName startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchRecentlyViewedBooksWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadAllBooksUrlWithUserToken:(NSString * _Nonnull)userToken state:(NSString * _Nonnull)state bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteAllBooksWithUserToken:(NSString * _Nonnull)userToken bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveSessionHistoryWithUserToken:(NSString * _Nonnull)userToken sessionHistory:(NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull)sessionHistory SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshBookListWithUserToken:(NSString * _Nonnull)userToken bookIdAndTypeDict:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict timeStamp:(NSString * _Nullable)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchUserSettingsWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)markFavouriteWithUserToken:(NSString * _Nonnull)userToken favoriteBook:(NSDictionary<NSString *, id> * _Nonnull)favoriteBook SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFavouriteWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)unmarkFavouriteWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchCollabShare:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchTeacherAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchStudentAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId timeStamp:(NSString * _Nonnull)timeStamp bookVersion:(NSString * _Nonnull)bookVersion SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchKalturaURL:(NSString * _Nonnull)userToken entryID:(NSString * _Nonnull)entryID type:(NSInteger)type SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)registerDevice:(NSString * _Nonnull)userToken body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deRegisterDevice:(NSString * _Nonnull)userToken body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getNotifications:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteNotification:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)markReadNotifications:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken ugcData:(NSData * _Nonnull)ugcData bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken ugcData:(NSData * _Nonnull)ugcData bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp metaDataObject:(KitabooServiceMetaData * _Nonnull)metaData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collab:(NSData * _Nonnull)collab bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collab:(NSData * _Nonnull)collab bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp metaDataObject:(KitabooServiceMetaData * _Nonnull)metaData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveHighlightData:(NSString * _Nonnull)userToken highlight:(NSData * _Nonnull)highlight bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveTrackingData:(NSString * _Nonnull)userToken analytics:(NSData * _Nonnull)analytics bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getAnalyticsData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSNumber * _Nonnull)classId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)elasticSearchData:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)newElasticSearchData:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)bookLevelSearchData:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)bookshelfStateData:(NSString * _Nonnull)userToken feedBackData:(NSData * _Nullable)feedBackData type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)updateUserDetails:(NSString * _Nonnull)userToken profileData:(NSData * _Nonnull)profileData coverData:(NSData * _Nonnull)coverData firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)acceptRejectCollab:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveTeacherAnnotations:(NSString * _Nonnull)userToken annotations:(NSData * _Nonnull)annotations bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp learnerId:(NSString * _Nonnull)learnerId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)submitAnotation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timeStamp:(NSString * _Nonnull)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchReadingSpeedInformationWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchLastPageAccessedWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFurthestPageWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveLastPageAccessedWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId lastPageData:(NSString * _Nonnull)lastPageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveFurthestPageDataWithUserToken:(NSString * _Nonnull)userToken furthestPageData:(NSData * _Nonnull)furthestPageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)saveSCORMData:(NSString * _Nonnull)userToken scormData:(NSData * _Nonnull)scormData bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchSCORMData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSString * _Nonnull)classId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchSCORMDataWithoutClass:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetails:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDownload:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId assetType:(NSString * _Nonnull)assetType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getTOCList:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getTOCListData:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetailsWithID:(NSString * _Nonnull)bookId userToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)packageURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getBookDetailsSecured:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchRecentlyViewedBooksSecuredWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBooksForCollectionSecuredWithUserToken:(NSString * _Nonnull)userToken categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId collectionName:(NSString * _Nonnull)collectionName startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookListForCategorySecuredWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nullable)startIndex endIndex:(NSString * _Nullable)endIndex categoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchFavouriteSecuredWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)downloadAllBooksUrlSecuredWithUserToken:(NSString * _Nonnull)userToken state:(NSString * _Nonnull)state bookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshBookListSecuredWithUserToken:(NSString * _Nonnull)userToken bookIdAndTypeDict:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict timeStamp:(NSString * _Nullable)timeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)refreshCategoryListSecured:(NSString * _Nonnull)userToken categoryIdList:(NSDictionary<NSString *, id> * _Nonnull)categoryIdList SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchPreferredLocaleWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)savePreferredLocaleWithUserToken:(NSString * _Nonnull)userToken languageData:(NSData * _Nonnull)languageData SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchBookTOC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)fetchStudentMarkupReport:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classID:(NSString * _Nonnull)classID chapterNumbers:(NSString * _Nonnull)chapterNumbers email:(NSString * _Nonnull)email userIDs:(NSString * _Nonnull)userIDs SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getScreenshotCountWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)updateScreenshotCountWithUserToken:(NSString * _Nonnull)userToken screenshotCount:(NSInteger)screenshotCount SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getFetchsessionWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteSessionWithUserToken:(NSString * _Nonnull)userToken uuId:(NSString * _Nonnull)uuId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)deleteAllSessionWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getImmersiveReaderTokenWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getPrintDataWithUserToken:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)savePrintDataWithUserToken:(NSString * _Nonnull)userToken lastPageData:(NSDictionary<NSString *, id> * _Nonnull)lastPageData bookID:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getCustomePDFPagesWithUserToken:(NSString * _Nonnull)userToken lastPageData:(NSDictionary<NSString *, id> * _Nonnull)lastPageData bookID:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)getKAIStatusWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ClientRequest")
@interface ClientRequest : KitabooRequest
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16CloseSlider_V6_0")
@interface CloseSlider_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14ColorHTML_V6_0")
@interface ColorHTML_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable yellow;
@property (nonatomic, copy) NSString * _Nullable red;
@property (nonatomic, copy) NSString * _Nullable purple;
@property (nonatomic, copy) NSString * _Nullable green;
@property (nonatomic, copy) NSString * _Nullable blue;
@property (nonatomic, copy) NSString * _Nullable black;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15ColorPopup_V6_0")
@interface ColorPopup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable selectedBorderColor;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color1;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color2;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color3;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color4;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color5;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color6;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color7;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color8;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color9;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable color10;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Message_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13Comments_V6_0")
@interface Comments_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable backIconColor;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable dividerColor;
@property (nonatomic, strong) Message_V6_0 * _Nullable otherMessage;
@property (nonatomic, strong) Message_V6_0 * _Nullable myMessage;
@property (nonatomic, strong) BottomPanel_V6_0 * _Nullable bottomPanel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9Constants")
@interface Constants : NSObject
+ (CGRect)CGRectInflateRect:(CGRect)rect :(CGFloat)px SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isRTL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) BOOL (^ _Nonnull SYSTEM_VERSION_EQUAL_TO)(NSString * _Nonnull);)
+ (BOOL (^ _Nonnull)(NSString * _Nonnull))SYSTEM_VERSION_EQUAL_TO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) BOOL (^ _Nonnull SYSTEM_VERSION_GREATER_THAN)(NSString * _Nonnull);)
+ (BOOL (^ _Nonnull)(NSString * _Nonnull))SYSTEM_VERSION_GREATER_THAN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) BOOL (^ _Nonnull SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO)(NSString * _Nonnull);)
+ (BOOL (^ _Nonnull)(NSString * _Nonnull))SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) BOOL (^ _Nonnull SYSTEM_VERSION_LESS_THAN)(NSString * _Nonnull);)
+ (BOOL (^ _Nonnull)(NSString * _Nonnull))SYSTEM_VERSION_LESS_THAN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) BOOL (^ _Nonnull SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO)(NSString * _Nonnull);)
+ (BOOL (^ _Nonnull)(NSString * _Nonnull))SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat ICON_FONT_SIZE;)
+ (CGFloat)ICON_FONT_SIZE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat ICON_FONT_SIZE_STATISTIC_CELL;)
+ (CGFloat)ICON_FONT_SIZE_STATISTIC_CELL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat CLOSE_ICON_FONT_SIZE_STATISTIC_CELL;)
+ (CGFloat)CLOSE_ICON_FONT_SIZE_STATISTIC_CELL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BACK_TO_BOOKSHELF_BUTTON;)
+ (NSInteger)BACK_TO_BOOKSHELF_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TOC_BUTTON;)
+ (NSInteger)TOC_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MYDATA_BUTTON;)
+ (NSInteger)MYDATA_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PENTOOL_BUTTON;)
+ (NSInteger)PENTOOL_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SUBMIT_BUTTON;)
+ (NSInteger)SUBMIT_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger REVIEW_BUTTON;)
+ (NSInteger)REVIEW_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger STICKY_NOTE_BUTTON;)
+ (NSInteger)STICKY_NOTE_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PHONE_SEARCH_BUTTON;)
+ (NSInteger)PHONE_SEARCH_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger READ_ALOUD_BUTTON;)
+ (NSInteger)READ_ALOUD_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger CLEAR_DATA_BUTTON;)
+ (NSInteger)CLEAR_DATA_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger POP_OVER_BUTTON;)
+ (NSInteger)POP_OVER_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PROTRACTOR_BUTTON;)
+ (NSInteger)PROTRACTOR_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat HIGHLIGHT_VIEW_UNDERLINE_HEIGHT;)
+ (CGFloat)HIGHLIGHT_VIEW_UNDERLINE_HEIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OAUTH_CONSUMER_KEY;)
+ (NSString * _Nonnull)OAUTH_CONSUMER_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OAUTH_SECRET_KEY;)
+ (NSString * _Nonnull)OAUTH_SECRET_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TEACHER_KEY;)
+ (NSString * _Nonnull)TEACHER_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STUDENTS_KEY;)
+ (NSString * _Nonnull)STUDENTS_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COPY_PREPACKAGE_BOOKS;)
+ (NSString * _Nonnull)COPY_PREPACKAGE_BOOKS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_HELP_SCREEN_KEY;)
+ (NSString * _Nonnull)SHOW_HELP_SCREEN_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW_HELP_SCREEN_BUTTON_KEY;)
+ (NSString * _Nonnull)SHOW_HELP_SCREEN_BUTTON_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USE_BOOKSHELF_TEMPLATE_KEY;)
+ (NSString * _Nonnull)USE_BOOKSHELF_TEMPLATE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKSHELF_TEMPLATES_KEY;)
+ (NSString * _Nonnull)BOOKSHELF_TEMPLATES_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ENABLE_BOOKMARK_FEATURE_KEY;)
+ (NSString * _Nonnull)ENABLE_BOOKMARK_FEATURE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KLANGUAGE_LOCALIZATION_UPDATED;)
+ (NSString * _Nonnull)KLANGUAGE_LOCALIZATION_UPDATED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USE_BOOKPLAYER_TEMPLATE_KEY;)
+ (NSString * _Nonnull)USE_BOOKPLAYER_TEMPLATE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKPLAYER_TEMPLATES_KEY;)
+ (NSString * _Nonnull)BOOKPLAYER_TEMPLATES_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LOGIN_TIME;)
+ (NSString * _Nonnull)LOGIN_TIME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LOGIN_TIME_DATE_FORMATTER;)
+ (NSString * _Nonnull)LOGIN_TIME_DATE_FORMATTER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LAST_PROFILE_PICTURE_KEY;)
+ (NSString * _Nonnull)LAST_PROFILE_PICTURE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AUTO_READ_ALOUD;)
+ (NSString * _Nonnull)AUTO_READ_ALOUD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iOSDecryptedResources;)
+ (NSString * _Nonnull)iOSDecryptedResources SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger relowableLaunchImageHeight;)
+ (NSInteger)relowableLaunchImageHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger relowableLaunchImageBottom;)
+ (NSInteger)relowableLaunchImageBottom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger topBottomMargin;)
+ (NSInteger)topBottomMargin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger leftRightMargin;)
+ (NSInteger)leftRightMargin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull READER_ACCESSIBILITY_FILE_NAME;)
+ (NSString * _Nonnull)READER_ACCESSIBILITY_FILE_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger COMMENT_MAX_CHAR_LIMIT;)
+ (NSInteger)COMMENT_MAX_CHAR_LIMIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NOTE_MAX_CHAR_LIMIT;)
+ (NSInteger)NOTE_MAX_CHAR_LIMIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NEW_UI_HIGHLIGHT_COLOR;)
+ (NSString * _Nonnull)NEW_UI_HIGHLIGHT_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TIME_FORMAT;)
+ (NSString * _Nonnull)TIME_FORMAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYDATA_DATE_FORMAT;)
+ (NSString * _Nonnull)MYDATA_DATE_FORMAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float FONT_SIZE_FACTOR;)
+ (float)FONT_SIZE_FACTOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_BOOK_CLASS_INFO_FETCHED;)
+ (NSString * _Nonnull)NOTIFICATION_BOOK_CLASS_INFO_FETCHED SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ClientURLType, open) {
  ClientURLTypeNone = 0,
  ClientURLTypeForgotPassword = 1,
};

/// To get current state of Media Book.
typedef SWIFT_ENUM(NSInteger, CurrentState, open) {
  CurrentStatePLAYING = 0,
  CurrentStatePAUSE = 1,
  CurrentStateCANCELLED = 2,
  CurrentStateLOADED = 3,
  CurrentStateUNKNOWN = 4,
  CurrentStateLOADING = 5,
};

@class UIFont;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17CustomFontsFor6_0")
@interface CustomFontsFor6_0 : NSObject
+ (CustomFontsFor6_0 * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)getCustomBoldFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)getCustomItalicFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)getCustomMediumFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)getCustomRegularFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

/// An Object that create custom view as per requirement.
/// <ul>
///   <li>
///     The CustomizeView class defines a view where user can create any customized view as per requirement.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13CustomizeView")
@interface CustomizeView : UIView <UIScrollViewDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWith:(NSURL * _Nonnull)localUrl OBJC_DESIGNATED_INITIALIZER;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// <ul>
///   <li>
///     DRAWING_MODE is mode of drawing view,
///     Whether it is normal is used to draw any pen drawings, review.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, DRAWING_MODE, open) {
  DRAWING_MODENormal = 0,
  DRAWING_MODEReview = 1,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK33DarkModeAudioVideoBookPlayer_V6_0")
@interface DarkModeAudioVideoBookPlayer_V6_0 : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22DarkModeBookshelf_V6_0")
@interface DarkModeBookshelf_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable mainBgcolor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable passwordStrengthCheckColor;
@property (nonatomic, copy) NSString * _Nullable editprofile;
@property (nonatomic, copy) NSString * _Nullable devicename;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19DarkModeReader_V6_0")
@interface DarkModeReader_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable mainBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable navigationBtn;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SignIn_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13DarkMode_V6_0")
@interface DarkMode_V6_0 : NSObject
@property (nonatomic, strong) SignIn_V6_0 * _Nullable signIn;
@property (nonatomic, strong) DarkModeBookshelf_V6_0 * _Nullable bookshelf;
@property (nonatomic, strong) DarkModeReader_V6_0 * _Nullable reader;
@property (nonatomic, strong) DarkModeAudioVideoBookPlayer_V6_0 * _Nullable audioVideoBookPlayer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17DayModeClass_V6_0")
@interface DayModeClass_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable canvasBackground;
@property (nonatomic, copy) NSString * _Nullable defaultTextColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8Day_V6_0")
@interface Day_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable tabBg;
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21DeSelectedButton_V6_0")
@interface DeSelectedButton_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10DeviceType")
@interface DeviceType : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17DisabledIcon_V6_0")
@interface DisabledIcon_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable opacity;
@property (nonatomic, copy) NSString * _Nullable backgroundHTML;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13KitabooBookVO")
@interface KitabooBookVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class EPUBGuide;
@class EPUBMeta;
@class EPUBFile;
@class EPUBChapter;
@class EPUBToc;
@class EPUBResource;
@class EPUBTOCPage;
@class EPUBChapterCFI;
@class ReaderFontSetting;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10EPUBBookVO")
@interface EPUBBookVO : KitabooBookVO
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic, copy) NSString * _Nonnull bookTitle;
@property (nonatomic, copy) NSString * _Nonnull absolutePath;
@property (nonatomic, strong) NSString * _Nonnull rootPath;
@property (nonatomic, copy) NSString * _Nonnull coverImageName;
@property (nonatomic, copy) NSArray<EPUBGuide *> * _Nonnull guides;
@property (nonatomic, strong) EPUBMeta * _Nonnull meta;
@property (nonatomic, copy) NSArray<EPUBFile *> * _Nonnull files;
@property (nonatomic, copy) NSArray<EPUBChapter *> * _Nonnull chapters;
@property (nonatomic, copy) NSArray<EPUBToc *> * _Nonnull toc;
@property (nonatomic, copy) NSArray<EPUBResource *> * _Nonnull resources;
@property (nonatomic, copy) NSArray<EPUBResource *> * _Nonnull glossary;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull bookCFIArray;
@property (nonatomic, copy) NSArray<EPUBTOCPage *> * _Nonnull tocPageList;
@property (nonatomic, copy) NSArray<EPUBChapterCFI *> * _Nonnull _bookCFIs;
@property (nonatomic) BOOL isBookContentLoaded;
@property (nonatomic) BOOL isAudioSyncSupported;
@property (nonatomic) NSInteger totalNumberOfPages;
@property (nonatomic) BOOL isEpubTypeAuthorReflow;
@property (nonatomic, strong) ReaderFontSetting * _Nonnull defaultReaderFontSettings;
@property (nonatomic, strong) ReaderFontSetting * _Nonnull userReaderFontSettings;
@property (nonatomic) BOOL isThumbnailForReflowableEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11EPUBChapter")
@interface EPUBChapter : NSObject
@property (nonatomic, copy) NSString * _Nonnull idref;
@property (nonatomic, copy) NSString * _Nonnull chapterName;
@property (nonatomic) NSInteger fileIndex;
@property (nonatomic, copy) NSString * _Nonnull href;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14EPUBChapterCFI")
@interface EPUBChapterCFI : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8EPUBFile")
@interface EPUBFile : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12EPUBGlossary")
@interface EPUBGlossary : NSObject
@property (nonatomic, copy) NSString * _Nonnull glossaryId;
@property (nonatomic, copy) NSString * _Nonnull term;
@property (nonatomic, copy) NSString * _Nonnull definition;
@property (nonatomic, copy) NSString * _Nonnull translation;
@property (nonatomic, copy) NSString * _Nonnull pronunciation;
@property (nonatomic, copy) NSString * _Nonnull audio;
@property (nonatomic, copy) NSString * _Nonnull video;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, copy) NSString * _Nonnull url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9EPUBGuide")
@interface EPUBGuide : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10EPUBMarkup")
@interface EPUBMarkup : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum EPUB_LAYOUT : int16_t;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8EPUBMeta")
@interface EPUBMeta : NSObject
@property (nonatomic) enum EPUB_LAYOUT layout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UGC;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8EPUBPage")
@interface EPUBPage : NSObject <NSCopying>
@property (nonatomic, copy) NSString * _Nonnull idref;
@property (nonatomic, copy) NSString * _Nonnull href;
@property (nonatomic) NSInteger pageNumber;
@property (nonatomic) NSInteger fileIndex;
@property (nonatomic) BOOL isFirstPage;
@property (nonatomic) BOOL isLastPage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdref:(NSString * _Nonnull)idref fileIndex:(NSInteger)fileIndex href:(NSString * _Nonnull)href pageNumber:(NSInteger)pageNumber ugcArray:(NSArray<UGC *> * _Nullable)ugcArray OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12EPUBResource")
@interface EPUBResource : NSObject
@property (nonatomic, copy) NSString * _Nonnull type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11EPUBTOCPage")
@interface EPUBTOCPage : NSObject
@property (nonatomic, copy) NSString * _Nonnull displayNumber;
@property (nonatomic, copy) NSString * _Nonnull src;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK7EPUBToc")
@interface EPUBToc : NSObject
@property (nonatomic, copy) NSString * _Nullable tocId;
@property (nonatomic, copy) NSString * _Nullable playOrder;
@property (nonatomic, copy) NSString * _Nonnull tocLabel;
@property (nonatomic, copy) NSString * _Nonnull src;
@property (nonatomic) NSInteger nodeLevel;
@property (nonatomic) BOOL tocExpanded;
@property (nonatomic, strong) EPUBToc * _Nullable parentNode;
@property (nonatomic, copy) NSArray<EPUBToc *> * _Nonnull subNodes;
- (NSArray * _Nonnull)getBookContentForTOCSubnodes SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)getBookContentForTOCSectionSubnodes:(NSArray<EPUBToc *> * _Nonnull)subNodes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int16_t, EPUB_FILE_TYPE, open) {
  EPUB_FILE_TYPEEPubFileTypeXhtml = 0,
  EPUB_FILE_TYPEEPubFileTypeJpeg = 1,
  EPUB_FILE_TYPEEPubFileTypeCss = 2,
  EPUB_FILE_TYPEEPubFileTypeOthers = 3,
  EPUB_FILE_TYPEEPubFileTypeSmil = 4,
};

typedef SWIFT_ENUM(int16_t, EPUB_LAYOUT, open) {
  EPUB_LAYOUTEPUBReflowable = 0,
  EPUB_LAYOUTEPUBFixedLayout = 1,
};

typedef SWIFT_ENUM(int16_t, EPUB_PAGE_DIRECTION, open) {
  EPUB_PAGE_DIRECTIONEPubPageDirectionLtr = 0,
  EPUB_PAGE_DIRECTIONEPubPageDirectionRtl = 1,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15EpubAudioSyncVO")
@interface EpubAudioSyncVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKUserContentController;
@class WKScriptMessage;
@protocol EquationEditorKeyboardViewControllerDelegate;
@class KFLinkVO;
@class SDKFIBVO;
@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

SWIFT_CLASS_NAMED("EquationEditorKeyboardViewController")
@interface EquationEditorKeyboardViewController : UIViewController <UIScrollViewDelegate, WKNavigationDelegate, WKScriptMessageHandler, WKUIDelegate>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
/// The object that acts as the delegate of the EquationEditorKeyboardViewController.
/// The delegate must adopt the EquationEditorKeyboardViewControllerDelegate protocol.
@property (nonatomic, strong) id <EquationEditorKeyboardViewControllerDelegate> _Nullable delegate;
/// link refers to data of the KFLinkVO
@property (nonatomic, strong) KFLinkVO * _Nonnull link;
/// fibVO is responsible for FIB and refers to SDKFIBVO.
@property (nonatomic, strong) SDKFIBVO * _Null_unspecified fibVO;
/// latex is Text of Equation view.
@property (nonatomic, copy) NSString * _Nonnull latex;
/// To set Y position of TextView for Equation Editor.
@property (nonatomic, copy) NSString * _Nonnull posY;
- (nonnull instancetype)initWithEqfibVO:(SDKFIBVO * _Nonnull)eqfibVO OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("EquationEditorKeyboardViewControllerDelegate")
@protocol EquationEditorKeyboardViewControllerDelegate
/// This method will be called to dismiss Equation Keyboard and show Default keyboard.
/// \param link Object of type KFLinkVO.
///
/// \param FIBVO Object of type SDKFIBVO.
///
/// \param text entered Text in Equation Textview.
///
- (void)changeEquationKeyboardToNormalForLink:(KFLinkVO * _Nonnull)link FIBVO:(SDKFIBVO * _Nullable)FIBVO withEnterText:(NSString * _Nonnull)text;
/// This method will be called to save Equation Editor.
/// \param link Object of type KFLinkVO.
///
/// \param FIBVO Object of type SDKFIBVO.
///
/// \param text entered Text in Equation Textview to save.
///
- (void)saveEquationEditorForLink:(KFLinkVO * _Nonnull)link FIBVO:(SDKFIBVO * _Nullable)FIBVO :(NSString * _Nonnull)text;
/// This method will be called to close the Equation Editor.
- (void)closeEquationEditor;
@end

@protocol FIBMathEquationViewDelegate;

SWIFT_CLASS_NAMED("FIBMathEquationView")
@interface FIBMathEquationView : UIView
/// The object that acts as the delegate of the FIBMathEquationView.
/// The delegate must adopt the FIBMathEquationViewDelegate protocol.
@property (nonatomic, strong) id <FIBMathEquationViewDelegate> _Nullable delegate;
/// fibVO is responsible for FIB.
@property (nonatomic, strong) SDKFIBVO * _Nullable fibVO;
@property (nonatomic) BOOL isTeacher;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Initializes an allocated FIBMathEquationView object with KFLinkVO ,equationTxt,isSubmited and frame.
/// \param link KFLinkVO
///
/// \param equationTxt Text of EquationView
///
/// \param isSubmited Boolean value to indicate  whether Equation view is Submitted.
///
/// \param frame Equation View Frame.
///
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link equationTxt:(NSString * _Nonnull)equationTxt isSubmited:(BOOL)isSubmited frame:(CGRect)frame isTeacher:(BOOL)isTeacher OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link fibVO:(SDKFIBVO * _Nullable)fibVO frame:(CGRect)frame isTeacher:(BOOL)isTeacher OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLink:(KFLinkVO * _Nonnull)link fibVO:(SDKFIBVO * _Nullable)fibVO frame:(CGRect)frame useDefaultIcon:(BOOL)useDefaultIcon isTeacher:(BOOL)isTeacher OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// To RootLabel view’s background color and mathEquationLabel text color
- (void)setThemeColor:(UIColor * _Nonnull)color;
- (void)focusToTextField;
@end


SWIFT_PROTOCOL_NAMED("FIBMathEquationViewDelegate")
@protocol FIBMathEquationViewDelegate
/// This method will be called when user Tap Math Equation View.
/// \param link Object of type KFLinkVO.
///
/// \param fibVO Object of type SDKFIBVO.
///
- (void)showEquationEditorKeyboardForLink:(KFLinkVO * _Nonnull)link withFIBVO:(SDKFIBVO * _Nullable)fibVO;
- (void)didSelectSubmittedEquation:(SDKFIBVO * _Nullable)fibVO withKFLinkVO:(KFLinkVO * _Nonnull)link withSourceView:(FIBMathEquationView * _Nonnull)sourceView;
@end

typedef SWIFT_ENUM(NSInteger, FONT_SIZE, open) {
  FONT_SIZEDEFAULT_FONT = 0,
  FONT_SIZESMALL_FONT = 1,
  FONT_SIZEMEDIUM_FONT = 2,
  FONT_SIZELARGE_FONT = 3,
  FONT_SIZEX_LARGE_FONT = 4,
  FONT_SIZEXX_LARGE_FONT = 5,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16FilterPopup_V6_0")
@interface FilterPopup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable borderColor;
@property (nonatomic, copy) NSString * _Nullable allBoxBorderColor;
@property (nonatomic, copy) NSString * _Nullable boxBorderColor;
@property (nonatomic, copy) NSString * _Nullable checkColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable arrowColor;
@property (nonatomic, copy) NSString * _Nullable actionTextColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HDWKWebView;
@class PdfWordExtractVO;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22FolioReaderAudioPlayer")
@interface FolioReaderAudioPlayer : NSObject
@property (nonatomic, copy) void (^ _Nonnull didPauseTTS)(void);
@property (nonatomic, copy) void (^ _Nonnull didPlayTTS)(void);
@property (nonatomic, copy) void (^ _Nonnull errorHandler)(void);
@property (nonatomic, copy) void (^ _Nonnull playNextTTSForPDF)(void);
@property (nonatomic, copy) void (^ _Nonnull playPreviousTTSForPDF)(void);
@property (nonatomic, copy) void (^ _Nonnull pdfRectForHighlight)(NSArray * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull clickedWordErrorHandler)(CGRect, NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nonnull currentRateHandle)(CGFloat);
@property (nonatomic, strong) HDWKWebView * _Nonnull currentWebView;
- (nonnull instancetype)initWithBook:(KitabooBookVO * _Nonnull)withBook webview:(HDWKWebView * _Nullable)webview OBJC_DESIGNATED_INITIALIZER;
- (void)changeBookDetailsWithBook:(KitabooBookVO * _Nonnull)withBook webview:(HDWKWebView * _Nullable)webview;
- (void)stopWithImmediate:(BOOL)immediate;
- (void)pause;
- (void)togglePlay;
- (void)resume;
- (void)clearHighlights;
- (void)play;
- (void)playNextSentenceInTTS;
- (void)playPreviousSentenceInTTS;
- (void)setTTSVolumeWithVolume:(float)volume;
- (void)setTTSSpeedWithRate:(float)rate;
- (BOOL)isPlaying SWIFT_WARN_UNUSED_RESULT;
- (void)setPageWithSentences:(NSArray<NSArray<PdfWordExtractVO *> *> * _Nonnull)sentences;
- (void)setCurrentTTSIndex;
- (void)resetCurrentIndex;
- (BOOL)checkForWordInSentencesWithWordRect:(CGRect)wordRect withWordText:(NSString * _Nonnull)withWordText pageSentences:(NSArray<NSArray<PdfWordExtractVO *> *> * _Nonnull)pageSentences SWIFT_WARN_UNUSED_RESULT;
- (void)playPDFTTSFromPointWithWordRect:(CGRect)wordRect withWordText:(NSString * _Nonnull)withWordText withPageNumber:(NSInteger)withPageNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FolioReaderAudioPlayer (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <AVAudioPlayerDelegate>
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
@end

@class AVSpeechSynthesizer;
@class AVSpeechUtterance;

@interface FolioReaderAudioPlayer (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <AVSpeechSynthesizerDelegate>
- (void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didCancelSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance;
- (void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didFinishSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance;
@end

@class Font_V6_0;
@class Other_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17FontSettings_V6_0")
@interface FontSettings_V6_0 : NSObject
@property (nonatomic, strong) OverlayPanel_V6_V6_0 * _Nullable overlayPanel;
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable tabBorder;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedTabBorder;
@property (nonatomic, copy) NSString * _Nullable selectedTextColor;
@property (nonatomic, copy) NSString * _Nullable resetColor;
@property (nonatomic, strong) Font_V6_0 * _Nullable font;
@property (nonatomic, strong) Other_V6_0 * _Nullable other;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9Font_V6_0")
@interface Font_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable dividerColor;
@property (nonatomic, copy) NSString * _Nullable pointerBg;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable boxBorderColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconBg;
@property (nonatomic, copy) NSString * _Nullable selectedIconBorder;
@property (nonatomic, copy) NSString * _Nullable dropdownBg;
@property (nonatomic, copy) NSString * _Nullable dropdownTextColor;
@property (nonatomic, copy) NSString * _Nullable moreIconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11Footer_V6_0")
@interface Footer_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable boxShadow;
@property (nonatomic, copy) NSString * _Nullable boarder;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, copy) NSString * _Nullable active;
@property (nonatomic, copy) NSString * _Nullable color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19ForgotPassword_V6_0")
@interface ForgotPassword_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable leftBackground;
@property (nonatomic, copy) NSString * _Nullable signinBackground;
@property (nonatomic, copy) NSString * _Nullable signinDisabled;
@property (nonatomic, copy) NSString * _Nullable signinEnabled;
@property (nonatomic, copy) NSString * _Nullable cancelDisabled;
@property (nonatomic, copy) NSString * _Nullable cancelOutline;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
@property (nonatomic, copy) NSString * _Nullable Invalid_email_input_border;
@property (nonatomic, copy) NSString * _Nullable Cancel_Text;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSIndexPath;

SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK42GenerateReportChapterTableViewCellDelegate_")
@protocol GenerateReportChapterTableViewCellDelegate
- (void)didTapOnNodeButton:(NSIndexPath * _Nullable)indexPath;
@end

typedef SWIFT_ENUM(NSInteger, GenerateReportFilter, open) {
  GenerateReportFilterCHAPTER = 0,
  GenerateReportFilterSTUDENT = 1,
};

@protocol GenerateReportMailViewControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;

/// An object that manages the UI
/// A GenerateReportMailViewController object manages the UI and provides call backs
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK32GenerateReportMailViewController")
@interface GenerateReportMailViewController : UIViewController <UITextFieldDelegate>
@property (nonatomic, weak) id <GenerateReportMailViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the GenerateReportMailViewController object
/// This method should be called to initialize the GenerateReportMailViewController object to send the report to specific email ID
/// \param emailID emailID is the String instance.This is the current email ID of the active user.
/// =
///
- (nonnull instancetype)init:(NSString * _Nonnull)emailID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK40GenerateReportMailViewControllerDelegate_")
@protocol GenerateReportMailViewControllerDelegate
/// Delegate method when tapped on done button on the UIAlertController
/// This method will be called when user tap on the done button on the UIAlertController
/// \param alternateEmail alternateEmail is the String instance.This is the alternail email ID in UIAlertController text field.
///
- (void)didTapOnDoneForGenerateReportMail:(NSString * _Nonnull)alternateEmail;
/// Delegate method when tapped on cancel button on the UIAlertController
/// This method will be called when user tap on the cancel button on the UIAlertController
- (void)didTapOnCancelForGenerateReportMail;
@end

@class KFBookVO;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20GenerateReportParser")
@interface GenerateReportParser : NSObject
- (NSArray * _Nonnull)parseGenerateReportTOC:(NSDictionary<NSString *, id> * _Nonnull)tocDict :(KFBookVO * _Nonnull)bookVO SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19GenerateReportTOCVO")
@interface GenerateReportTOCVO : NSObject
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
@property (nonatomic, copy) NSString * _Nullable chapterID;
@property (nonatomic, copy) NSString * _Nullable nodeID;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isExpanded;
@property (nonatomic) BOOL isSubNode;
@property (nonatomic) NSInteger subnodeLevel;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable folioNumberArray;
@property (nonatomic, copy) NSArray<GenerateReportTOCVO *> * _Nullable subnodes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol GenerateReportViewControllerDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK28GenerateReportViewController")
@interface GenerateReportViewController : UIViewController
@property (nonatomic, weak) id <GenerateReportViewControllerDelegate> _Nullable delegate;
@property (nonatomic) enum GenerateReportFilter selectedMode;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the GenerateReportViewController object
/// This method should be called to initialize the GenerateReportViewController object
/// \param themeColor mediaBookModel is the UIColor instance.This instance to set the theme color to components of GenerateReportViewController
///
- (nonnull instancetype)initWithThemeColor:(UIColor * _Nullable)themeColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To set the data to specific selected view i.e, Chapter/Student
/// This method should be called everytime when user receive the callback for selected view i.e,Chapter/Student to set the relative data of the selected view.
/// \param data data is the NSArray instance.When user select Chapter view then it should be an array of GenerateReportTOCVO.When user select Student view then it should be an array of student details.
///
- (void)setData:(NSArray * _Nonnull)data;
- (void)setStatusData:(NSDictionary * _Nonnull)statusData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK36GenerateReportViewControllerDelegate_")
@protocol GenerateReportViewControllerDelegate
/// Delegate method when tapped on cancel button
/// This method will be called when user tap on the cancel button
- (void)didTapOnCancelForGenerateReport;
/// Delegate method when tapped on back button
/// This method will be called when user tap on the back button.This is only application for iPhone devices as back button is not present in iPad devices
- (void)didTapOnBackForGenerateReport;
/// Delegate method when tapped on next button
/// This method will be called when user tap on the next button.
/// \param reportData reportData is the Dictionary instance.It consists both chapter and student data with chapterID and studentID keys respetively
///
- (void)didTapOnNextToSendMailWithReportData:(NSDictionary<NSString *, id> * _Nonnull)reportData;
/// Delegate method when tapped on Select Chapter view
/// This method will be called when user tap on Select Chapter view of Generate Report View
- (void)didSelectChapterSegmentForGenerateReport;
/// Delegate method when tapped on Select Student view
/// This method will be called when user tap on Select Student view of Generate Report View
- (void)didSelectStudentSegmentForGenerateReport;
@end

/// This enum represent the currently selected glossary item.
typedef SWIFT_ENUM_NAMED(NSInteger, GlossaryResourceType, "GlossaryResourceType", open) {
  GlossaryResourceTypeKGlossaryResourceTypeAudio = 0,
  GlossaryResourceTypeKGlossaryResourceTypeVideo = 1,
  GlossaryResourceTypeKGlossaryResourceTypeImage = 2,
  GlossaryResourceTypeKGlossaryResourceTypeURL = 3,
};

@protocol GlossaryViewControllerDelegate;
@class KFGlossaryVO;

/// GlossaryViewController is a class which will be responsible for loading/displaying content related to the selected glossary and gives callback when any item is selected, so one can perform respective actions.
SWIFT_CLASS_NAMED("GlossaryViewController")
@interface GlossaryViewController : UIViewController
/// The object that acts as the delegate of the GlossaryViewController.
/// The delegate must adopt the GlossaryViewControllerDelegate protocol.
@property (nonatomic, strong) id <GlossaryViewControllerDelegate> _Nullable delegate;
/// object of type KFGlossaryVO which have all information related to selected glossary.
@property (nonatomic, strong) KFGlossaryVO * _Nullable glossaryItem;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// To set colors for items which are present in glossary view.
/// <h3>Usage Example:</h3>
/// \code
/// [glossaryViewController setColorsForGlossaryViewWithIconColor:hdThemeVO.glossary_icon_color iconBorderColor:hdThemeVO.glossary_icon_border_color alphabetTextColor:hdThemeVO.glossary_alphabet_label_color keyWordTextColor:hdThemeVO.glossary_keyword_label_color descriptionTextColor:hdThemeVO.glossary_description_color];
///
/// \endcode\param iconColor color for icons which are present in glossary controller
///
/// \param iconBorderColor boreder color for icons
///
/// \param alphabetTextColor text color for alphabet text
///
/// \param keyWordTextColor text color for keyword text
///
/// \param descriptionTextColor text color for description text
///
- (void)setColorsForGlossaryViewWithIconColor:(UIColor * _Nonnull)iconColor iconBorderColor:(UIColor * _Nonnull)iconBorderColor alphabetTextColor:(UIColor * _Nonnull)alphabetTextColor keyWordTextColor:(UIColor * _Nonnull)keyWordTextColor descriptionTextColor:(UIColor * _Nonnull)descriptionTextColor;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a GlossaryViewController object must adopt the GlossaryViewControllerDelegate protocol.
/// <ul>
///   <li>
///     GlossaryViewControllerDelegate Protocol used to handle all the callbacks of GlossaryViewController Class.The GlossaryViewControllerDelegate protocol defines methods that allow user to manage all the actions/events when any Glossary Item is selected.
///   </li>
///   <li>
///     When configuring the GlossaryViewController object, assign your delegate object to its delegate property.
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("GlossaryViewControllerDelegate")
@protocol GlossaryViewControllerDelegate
/// Tells the delegate that the glossary item  is now selected.
/// The delegate handles selections in this method.  This method will called when the glossary Item is Select.
/// \param selectedType Selected GlossaryResourceType.
///
/// \param resorcePath Path of resource for selected glossary item
///
- (void)didSelectGlossaryItemWithType:(enum GlossaryResourceType)selectedType withPath:(NSString * _Nonnull)resorcePath;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18GradientColor_V6_0")
@interface GradientColor_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable color;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable opacity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLSessionDownloadTask;
@class NSDate;

SWIFT_CLASS_NAMED("HDBookDownloadDetails")
@interface HDBookDownloadDetails : NSObject
/// UniqueID of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookUniqueID;
/// Book URL of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookDownloadURL;
/// Download state of the book that needs to be downloaded.The status of the book will be in four states i.e,GettingInfo,Downloading,Paused,Failed,Unknown
@property (nonatomic, copy) NSString * _Nonnull bookDownloadState;
/// Download size of the book that needs to be downloaded
@property (nonatomic) float bookDownloadSize;
/// Download size of the book that needs to be downloaded only in bytes
@property (nonatomic) float bookDownloadSizeBytes;
/// Download units of the book that needs to be downloaded
@property (nonatomic, copy) NSString * _Null_unspecified bookDownloadUnit;
/// Downloaded size of the book out of the total book download size
@property (nonatomic) float downloadedBookSize;
/// Downloaded size of the book out of the total book download size in bytes
@property (nonatomic) float downloadedBookSizeBytes;
/// Downloaded size unit of the book out of the total book download size
@property (nonatomic, copy) NSString * _Null_unspecified downloadedBookUnit;
/// Progress of the book that needs to be downloaded
@property (nonatomic) float progress;
/// Download Task of the current book
@property (nonatomic, strong) NSURLSessionDownloadTask * _Nullable task;
@property (nonatomic, copy) NSDate * _Nullable bookDownloadInitiatedTime;
@property (nonatomic, copy) NSString * _Nonnull bookDownloadDestinationPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HDAVAssetTaskDetails;

/// An Object that contains all the information about downloading HLS Media Book.
SWIFT_CLASS_NAMED("HDAVAssetDownloadDetails") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloadDetails : HDBookDownloadDetails
/// All the details about all the downloading assets.
@property (nonatomic, copy) NSArray<HDAVAssetTaskDetails *> * _Nullable assetTaskDetails;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that manages the download handlings of a Media Book.
/// A HDAVAssetDownloaderManager object is responsible for all download actions for a media book, i.e. Download, Pause, Resume etc.
/// <ul>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("HDAVAssetDownloaderManager") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloaderManager : NSObject
+ (HDAVAssetDownloaderManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol HDAVAssetDownloaderManagerDelegate;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetDownloaderManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This method is called to download the HLS Media Book
/// - parameter bookId : Book needs to be downloaded
/// - parameter bookDownloadURLs : URLs which needs to be downloaded.
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)downloadAVAsset:(NSString * _Nonnull)bookId bookDownloadURLs:(NSArray<NSURL *> * _Nonnull)bookDownloadURLs delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to pause the downloading HLS book
/// - parameter bookId : Book needs to be paused
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)pauseAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to resume the paused HLS book
/// - parameter bookId : Book needs to be resumed
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)resumeAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
- (void)setDelegateForAVAssetWithDelegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate bookID:(NSString * _Nonnull)bookID;
/// This method is called to retry the download of  a HLS book
/// - parameter bookId : Book needs to be downloaded
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)retryAVAssetDownload:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the details of HLS book
/// - parameter bookId : BookID
- (HDAVAssetDownloadDetails * _Nullable)getAVAssetDetails:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
/// This method is called to get the array of HLS books which are in downloading state
- (NSArray<HDAVAssetDownloadDetails *> * _Nullable)getAllAVAssetDetails SWIFT_WARN_UNUSED_RESULT;
/// This method is called to pause all the downloading HLS books
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)pauseAllAVAssetWithDelegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the count of downloading HLS books
- (NSInteger)inProgressAVAssetDownloadCount SWIFT_WARN_UNUSED_RESULT;
/// This method is called to cancel the downloading HLS book
/// - parameter bookId : Book needs to be cancelled
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)cancelAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to delete the downloaded HLS book
/// - parameter bookId : Book needs to be deleted.
/// - parameter delegate : Callback listener of type HDAVAssetDownloaderManagerDelegate.
- (void)deleteAVAsset:(NSString * _Nonnull)bookId delegate:(id <HDAVAssetDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the status of provided AVAsset whether it is downloaded or not.
/// - parameter bookId : Book whose status needs to be checked.
- (BOOL)isAVAssetDownloaded:(NSString * _Nonnull)bookId SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

/// The delegate of a HDAVAssetDownloaderManager object must adopt the HDAVAssetDownloaderManagerDelegate protocol.
/// HDAVAssetDownloaderManagerDelegate Protocol used to handle all the callbacks of HDAVAssetDownloaderManager Class.The HDAVAssetDownloaderManagerDelegate protocol defines methods to provide callbacks when user perform any action on downloading Media Book..
/// When configuring the HDAVAssetDownloaderManager object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("HDAVAssetDownloaderManagerDelegate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@protocol HDAVAssetDownloaderManagerDelegate
@optional
/// A delegate method to pause all the downloading tasks
- (void)didPauseAllAVAssetDownloads;
/// A delegate method to pause all the downloading tasks
- (void)didDeleteDownloadedAVAssetWithBookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever a download task state is updated i.e Started, Downloading, Paused, Cancelled, Finished, Failed etc.
/// - parameter bookDownloadDetail : HDAVAssetDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is paused
- (void)didDownloadRequestStateUpdateForAVAsset:(HDAVAssetDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is failed due to any reason
/// - parameter bookDownloadDetail : HDAVAssetDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is failed
/// - parameter error : NSError for which the download has been failed
- (void)didDownloadRequestFailForAVAsset:(NSError * _Nonnull)error bookDownloadDetail:(HDAVAssetDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
@end

@class AVAggregateAssetDownloadTask;
@class AVURLAsset;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDAVAssetTaskDetails") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface HDAVAssetTaskDetails : NSObject
/// Name of the current asset.
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
/// Download Task of the current book.
@property (nonatomic, strong) AVAggregateAssetDownloadTask * _Nullable aggregateTask;
/// Downloaded Asset url path of the current book.
@property (nonatomic, copy) NSURL * _Nullable assetDownloadedURLPath;
/// Downloading Asset url of the current book.
@property (nonatomic, copy) NSURL * _Nullable assetURL;
/// Downloading Asset url of the current book.
@property (nonatomic, strong) AVURLAsset * _Nullable avURLAsset;
/// Loaded duration of the asset that needs to be downloaded.
@property (nonatomic) float taskLoadedDuration;
/// Total duration of the asset that needs to be downloaded.
@property (nonatomic) float taskTotalDuration;
/// Progress of the asset that needs to be downloaded.
@property (nonatomic) float taskProgress;
@property (nonatomic, copy) NSString * _Nonnull taskDownloadState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23HDAVTOCPlayerController")
@interface HDAVTOCPlayerController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol HDAudioBookPlayerViewControllerDelegate;
@class HDMediaBookModel;
@class HDMediaBookChapterVO;
@class HDKitabooMediaBookThemeVO;

/// An object that manages the UI for Audio Book.
/// A HDAudioBookPlayerViewController object manages the UI and provides call backs when multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDAudioBookPlayerViewController")
@interface HDAudioBookPlayerViewController : UIViewController
/// The object that acts as the delegate of the HDAudioBookPlayerViewController.
/// The delegate must adopt the HDAudioBookPlayerViewControllerDelegate protocol.
@property (nonatomic, weak) id <HDAudioBookPlayerViewControllerDelegate> _Nullable delegate;
/// A Time constant value for forward backward buttons.
@property (nonatomic) float forwardBackwardTimeConstant;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// Initializes the HDAudioBookPlayerViewController object
/// This method should be called to initialize the HDAudioBookPlayerViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)updateChapterViewControlsFont;
- (void)updateConstraints;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)setPlayPauseButtonCornerRadius:(CGFloat)radius;
- (void)updateAudioThumbnail;
- (void)addSleepTimeView;
- (void)removeSleepTimeView;
- (void)setSleepTimeLabelText:(NSString * _Nonnull)text;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum AudioBookPlayerViewStateUpdate)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel showLoader:(BOOL)showLoader;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is an instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the theme color to various UI components of the HDAudioBookPlayerViewController
/// This method should be called to set the color to various UI components of the HDAudioBookPlayerViewController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To delete all the bookmarks on the view of the seek bar of the audio player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To get Thumbnail Container View.
- (UIView * _Nullable)getThumbnailContainerView SWIFT_WARN_UNUSED_RESULT;
- (void)updateTimeinHours:(double)currentTime :(double)totalTime;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class UIImageView;

/// The delegate of a HDAudioBookPlayerViewController object must adopt the HDAudioBookPlayerViewControllerDelegate protocol.
/// HDAudioBookPlayerViewControllerDelegate Protocol used to handle all the callbacks of HDAudioBookPlayerViewController Class.The HDAudioBookPlayerViewControllerDelegate protocol defines methods to provide callback when user perform any action on HDAudioBookPlayerViewController.
/// When configuring the HDAudioBookPlayerViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDAudioBookPlayerViewControllerDelegate_")
@protocol HDAudioBookPlayerViewControllerDelegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didSeekBarValueChanged;
/// Delegate method to update the thumbnail image
/// This method will be called to set the thumbnail image
/// \param thumbnailURL thumbnailURL is the String.thumbnailURL is the url of the image that needs to be displayed
///
- (UIImageView * _Nullable)imageViewForThumbnail:(NSString * _Nonnull)thumbnailURL SWIFT_WARN_UNUSED_RESULT;
@end

@protocol HDAudioBookPlayerViewController_V6Delegate;

/// An object that manages the UI for Audio Book.
/// A HDAudioBookPlayerViewController_V6 object manages the UI and provides call backs when multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK34HDAudioBookPlayerViewController_V6")
@interface HDAudioBookPlayerViewController_V6 : UIViewController
/// The object that acts as the delegate of the HDAudioBookPlayerViewController_V6.
/// The delegate must adopt the HDAudioBookPlayerViewController_V6Delegate protocol.
@property (nonatomic, weak) id <HDAudioBookPlayerViewController_V6Delegate> _Nullable delegate;
/// A Time constant value for forward backward buttons.
@property (nonatomic) float forwardBackwardTimeConstant;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// Initializes the HDAudioBookPlayerViewController_V6 object
/// This method should be called to initialize the HDAudioBookPlayerViewController_V6 object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)updateChapterViewControlsFont;
- (void)updateConstraints;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)setPlayPauseButtonCornerRadius:(CGFloat)radius;
- (void)updateAudioThumbnail;
- (void)addSleepTimeView;
- (void)removeSleepTimeView;
- (void)setSleepTimeLabelText:(NSString * _Nonnull)text;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum AudioBookPlayerViewStateUpdate_V6)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel showLoader:(BOOL)showLoader;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is an instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the theme color to various UI components of the HDAudioBookPlayerViewController_V6
/// This method should be called to set the color to various UI components of the HDAudioBookPlayerViewController_V6. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To delete all the bookmarks on the view of the seek bar of the audio player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To get Thumbnail Container View.
- (UIView * _Nullable)getThumbnailContainerView SWIFT_WARN_UNUSED_RESULT;
- (void)updateTimeinHours:(double)currentTime :(double)totalTime;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIImage;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK35HDAudioBookPlayerViewController_6_0")
@interface HDAudioBookPlayerViewController_6_0 : HDAudioBookPlayerViewController_V6
- (void)addSleepTimeView;
- (void)updateAudioThumbnail;
- (void)setAudioThumbnailAccordingAspectRatioWithImg:(UIImage * _Nonnull)img imgView:(UIImageView * _Nonnull)imgView;
- (void)updateChapterViewControlsFont;
- (void)manageMarqueeWithScrollPosition:(CGFloat)scrollPosition isScrollUp:(BOOL)isScrollUp;
- (void)startMarqueeAnimation;
- (void)stopMarqueeAnimation;
- (void)updateConstraints;
- (void)changeSleepButtonStatusWithIsSleepTimerOff:(BOOL)isSleepTimerOff;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a HDAudioBookPlayerViewController_V6 object must adopt the HDAudioBookPlayerViewController_V6Delegate protocol.
/// HDAudioBookPlayerViewController_V6Delegate Protocol used to handle all the callbacks of HDAudioBookPlayerViewController_V6 Class.The HDAudioBookPlayerViewController_V6Delegate protocol defines methods to provide callback when user perform any action on HDAudioBookPlayerViewController_V6.
/// When configuring the HDAudioBookPlayerViewController_V6 object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK42HDAudioBookPlayerViewController_V6Delegate_")
@protocol HDAudioBookPlayerViewController_V6Delegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didSeekBarValueChanged;
/// Delegate method to update the thumbnail image
/// This method will be called to set the thumbnail image
/// \param thumbnailURL thumbnailURL is the String.thumbnailURL is the url of the image that needs to be displayed
///
- (UIImageView * _Nullable)imageViewForThumbnail:(NSString * _Nonnull)thumbnailURL SWIFT_WARN_UNUSED_RESULT;
- (void)didTapOnVolumnChangeButton:(HDMediaBookModel * _Nonnull)mediaPlayer;
- (void)didTapOnMuteUnmute:(HDMediaBookModel * _Nonnull)mediaBookModel;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK44HDAudioBookPlayerViewController_6_0_Delegate_")
@protocol HDAudioBookPlayerViewController_6_0_Delegate <HDAudioBookPlayerViewController_V6Delegate>
- (void)didTapOnMuteMediaButton:(HDMediaBookModel * _Nonnull)mediaPlayer;
@end



@interface HDAudioBookPlayerViewController_V6 (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)changeSleepButtonStatusWithIsSleepTimerOff:(BOOL)isSleepTimerOff;
@end





SWIFT_CLASS_NAMED("HDBookDownloaderManager")
@interface HDBookDownloaderManager : NSObject
+ (HDBookDownloaderManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDBookDownloaderManagerDelegate;

@interface HDBookDownloaderManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This method is called to download a book at specific path
/// - parameter bookId : Book needs to be downloaded
/// - parameter bookDownloadURL : URL from where the book needs to be downloaded
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)downloadBook:(NSString * _Nonnull)bookId bookDownloadURL:(NSString * _Nonnull)bookDownloadURL delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate downloadPath:(NSString * _Nonnull)downloadPath;
/// This method is called to pause the downloading book
/// - parameter bookId : Book needs to be paused
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)pauseBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to resume the paused book
/// - parameter bookId : Book needs to be resumed
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)resumeBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
- (void)setDelegateForBookWithDelegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate bookID:(NSString * _Nonnull)bookID;
/// This method is called to retry the download of  a book
/// - parameter bookId : Book needs to be downloaded
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)retryBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the details of book
/// - parameter bookId : BookID
- (HDBookDownloadDetails * _Nullable)getDownloadDetails:(NSString * _Nonnull)bookID SWIFT_WARN_UNUSED_RESULT;
/// This method is called to get the array of books which are in downloading state
- (NSArray<HDBookDownloadDetails *> * _Nullable)getDownloadingBooks SWIFT_WARN_UNUSED_RESULT;
/// This method is called to pause all the downloading books
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)pauseAllDownlaodsWithDelegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
/// This method is called to get the count of downloading books
- (NSInteger)inProgressDownloadCount SWIFT_WARN_UNUSED_RESULT;
/// This method is called to cancel the downloading book
/// - parameter delegate : Callback listener of type HDBookDownloaderManagerDelegate.
- (void)cancelBookDownload:(NSString * _Nonnull)bookId delegate:(id <HDBookDownloaderManagerDelegate> _Nonnull)delegate;
@end



SWIFT_PROTOCOL_NAMED("HDBookDownloaderManagerDelegate")
@protocol HDBookDownloaderManagerDelegate
/// A delegate method called each time whenever any download task’s progress is updated
/// - parameter bookDownloadDetail :  HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is in progress
- (void)bookDownloadRequestDidUpdateProgress:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
@optional
/// A delegate method called when interrupted tasks are repopulated
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is interrupted
- (void)bookDownloadRequestDidPopulatedInterruptedTasks:(NSArray<HDBookDownloadDetails *> * _Nonnull)bookDownloadDetail;
/// A delegate method called each time whenever new download task is start downloading
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is started
- (void)bookDownloadRequestStarted:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever running download task is paused. If task is already paused the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is paused
- (void)bookDownloadRequestDidPaused:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method to pause all the downloading tasks
- (void)didPauseAllDownloads;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is resumed
- (void)bookDownloadRequestDidResumed:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is retried
- (void)bookDownloadRequestDidRetry:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is cancelled by the user
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is cancelled
- (void)bookDownloadRequestCanceled:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is finished successfully
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is finished
- (void)bookDownloadRequestFinished:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever any download task is failed due to any reason
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which is failed
/// - parameter error : NSError for which the download has been failed
- (void)bookDownloadRequestDidFailedWithError:(NSError * _Nonnull)error bookDownloadDetail:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID;
/// A delegate method called each time whenever specified destination does not exists. It will be called on the session queue. It provides the opportunity to handle error appropriately
/// - parameter bookDownloadDetail : HDBookDownloadDetails which provides the details of the downloading book
/// - parameter bookID : bookID string which does not exist
/// - parameter location : URL where destination url does not exist
- (void)bookDownloadRequestDestinationDoestNotExists:(HDBookDownloadDetails * _Nonnull)bookDownloadDetail bookID:(NSString * _Nonnull)bookID location:(NSURL * _Nonnull)location;
@end

@protocol HDDropDownDelegate;

/// An object that manages the content of ShareSetting classes.
/// A HDDropDownController object manages content of classes in dropdown list and selection of class from dropdown list.
SWIFT_CLASS_NAMED("HDDropDownController")
@interface HDDropDownController : UIViewController
/// The object that acts as the delegate of the HDDropDownController.
/// The delegate must adopt the HDDropDownDelegate protocol.
@property (nonatomic, strong) id <HDDropDownDelegate> _Nullable delegate;
/// To initialize HDDropDowncontroller.
/// \param dataArray Array of type string which is used to display names in drop down list.
///
/// \param dropDownFrame CGRect used to set frame for drop down controller.
///
- (nonnull instancetype)initWithDataArray:(NSArray<NSString *> * _Nonnull)dataArray dropDownFrame:(CGRect)dropDownFrame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UITableView;
@class UITableViewCell;

@interface HDDropDownController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
@end


/// Methods for managing selection of items in Dropdown of ShareSettings.
SWIFT_PROTOCOL_NAMED("HDDropDownDelegate")
@protocol HDDropDownDelegate
/// *This method will be called when user selects any item from table/list and returns selected item’s name.
- (void)didSelectItemWithName:(NSString * _Nonnull)name;
@end


/// An Object that manage the content that needs to be sent in ElasticSearch service request
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDElasticSearchRequest")
@interface HDElasticSearchRequest : NSObject
@property (nonatomic, copy) NSString * _Nullable elasticSearchText;
@property (nonatomic, copy) NSString * _Nullable elasticSearchOn;
@property (nonatomic, copy) NSString * _Nullable elasticSearchType;
@property (nonatomic, copy) NSArray * _Nullable totalBookIDs;
@property (nonatomic, copy) NSArray * _Nullable elasticSearchFields;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable elasticSearchAdvancedFilter;
@property (nonatomic, copy) NSString * _Nullable elasticSearchFrom;
@property (nonatomic, copy) NSString * _Nullable elasticSearchSize;
/// Initializes the HDElasticSearchRequest class
/// <h3>Usage Example:</h3>
/// \code
/// HDElasticSearchRequest *searchRequest = [[HDElasticSearchRequest alloc] initWithSearchText:@"multiple" searchOn:@"page_content" searchType:@"complete" bookIds:[NSArray arrayWithObjects:@"4131", @"8124", nil] searchField:nil advancedFilter:nil from:@"0" size:@"50"];
///
/// \endcode\param searchText Data/Text that user need to search, within the search area.
///
/// \param searchOn Considers type of search to performed.By default search will be across book content (full-text) and Metadata. But if the search has to happen on only one of these then you can mention where the search operation need to be performed. i.e. page_content or metadata. However, irrespective of where the search match is found the result will alway return its corresponding title list.
///
/// \param searchType To indicate some correctness (i.e. match parts of the term) or exact correctness within the search area.
///
/// \param bookIds Array of book ids that reader will pass to perform search operation.
///
/// \param searchField Field on which you want to search. If not given, will search on all fields.
///
/// \param advancedFilter Filter documents on Interest Level.
///
/// \param from Start Index from which results are to fetched.
///
/// \param size Number of documents to be fetched.
///
- (nonnull instancetype)initWithSearchText:(NSString * _Nonnull)searchText searchOn:(NSString * _Nonnull)searchOn searchType:(NSString * _Nonnull)searchType bookIds:(NSArray * _Nonnull)bookIds searchField:(NSArray * _Nullable)searchField advancedFilter:(NSDictionary<NSString *, id> * _Nullable)advancedFilter from:(NSString * _Nonnull)from size:(NSString * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that manage the content of response from ElasticSearch service.
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDElasticSearchResult")
@interface HDElasticSearchResult : NSObject
@property (nonatomic, copy) NSString * _Nullable bookID;
@property (nonatomic, copy) NSString * _Nullable index;
@property (nonatomic, strong) NSNumber * _Nullable score;
@property (nonatomic, copy) NSString * _Nullable bookThumbnailURL;
@property (nonatomic, copy) NSString * _Nullable bookTitle;
@property (nonatomic, copy) NSString * _Nullable bookDescription;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable searchCount;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19HDEmptyViewForMedia")
@interface HDEmptyViewForMedia : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK5HDFIB")
@interface HDFIB : UIView <UITextFieldDelegate, UITextViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK13HDFIBDelegate_")
@protocol HDFIBDelegate <NSObject>
- (void)didUpdateSDKFIBVO:(SDKFIBVO * _Nonnull)sdkFIBVO;
@optional
- (void)didSelectSubmittedFIB:(SDKFIBVO * _Nonnull)sdkFIBVO withKFLinkVO:(KFLinkVO * _Nonnull)linkVO withSourceView:(UIView * _Nonnull)sourceView;
- (BOOL)shouldAllowEditingFor:(KFLinkVO * _Nonnull)linkVO SWIFT_WARN_UNUSED_RESULT;
@required
- (void)fibDidBeginEditing:(HDFIB * _Nonnull)hdFIBVO;
- (void)keyboardDidShowFor:(HDFIB * _Nonnull)hdFIBView withKeyboardFrame:(CGRect)keyboardRect;
- (void)fibDidEndEditing:(HDFIB * _Nonnull)hdFIBVO;
- (void)keyboardDidHideFor:(HDFIB * _Nonnull)hdFIBView withKeyboardFrame:(CGRect)keyboardRect;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK34HDGoogleTextToSpeechServiceManager")
@interface HDGoogleTextToSpeechServiceManager : NSObject <AVAudioPlayerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDGoogleTextToSpeechServiceManager * _Nonnull shared;)
+ (HDGoogleTextToSpeechServiceManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull voiceTypeIdentifer;
@property (nonatomic, copy) NSString * _Nonnull googleAPIKey;
@property (nonatomic, copy) NSString * _Nonnull languageCode;
@property (nonatomic) BOOL isMaleVoice;
@property (nonatomic) BOOL isCompletePlaying;
- (void)speakWithText:(NSString * _Nonnull)text textlanguageCode:(NSString * _Nullable)textlanguageCode completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (void)stopPlayer;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HDGoogleTextToSpeechServiceManager (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)fetchSupportedVoicesWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK27HDGoogleTranslationLanguage")
@interface HDGoogleTranslationLanguage : NSObject
@property (nonatomic, copy) NSString * _Nullable code;
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK26HDGoogleTranslationManager")
@interface HDGoogleTranslationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDGoogleTranslationManager * _Nonnull shared;)
+ (HDGoogleTranslationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull googleAPIKey;
@property (nonatomic, copy) NSArray<HDGoogleTranslationLanguage *> * _Nonnull supportedLanguages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)detectLanguageForText:(NSString * _Nonnull)text completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)fetchSupportedLanguagesWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)translateWithTextToTranslate:(NSString * _Nonnull)textToTranslate sourceLanguageCode:(NSString * _Nonnull)sourceLanguageCode targetLanguageCode:(NSString * _Nonnull)targetLanguageCode completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19HDIconFontConstants")
@interface HDIconFontConstants : NSObject
+ (void)setFontName:(NSString * _Nonnull)fontName;
+ (NSString * _Nonnull)getFontName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK28HDKitabooCryptographyManager")
@interface HDKitabooCryptographyManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDKitabooCryptographyManager * _Nonnull sharedInstanceSharedObject;)
+ (HDKitabooCryptographyManager * _Nonnull)sharedInstanceSharedObject SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getEncryptedString:(NSString * _Nullable)decryptedString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDecryptedString:(NSString * _Nullable)encryptedString SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)getEncryptedData:(NSData * _Nullable)decryptedData SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)getDecryptedData:(NSData * _Nullable)encryptedData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDKitabooFontManager")
@interface HDKitabooFontManager : NSObject
+ (HDKitabooFontManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setFontNameWithFontName:(NSString * _Nonnull)fontName;
+ (NSString * _Nonnull)getFontName SWIFT_WARN_UNUSED_RESULT;
- (void)registerFontWithFileNameString:(NSString * _Nullable)fileNameString bundle:(NSBundle * _Nullable)bundle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK28HDKitabooHLSServiceInterface")
@interface HDKitabooHLSServiceInterface : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)microServicesBaseUrl clientID:(NSString * _Nonnull)clientID enableCDNCookies:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)baseURLString microServicesBaseUrl:(NSString * _Nonnull)microServicesBaseUrl clientID:(NSString * _Nonnull)clientID enableCDNCookies:(BOOL)enable IsKitabooContentServer:(BOOL)kitabooContentServer OBJC_DESIGNATED_INITIALIZER;
/// This method is called to fetch HLS book download URL.
/// - parameter userToken : userToken Current user’s userToken.
/// - parameter bookId : bookId for which url will be fetched.
/// - parameter timeStamp : timestamp
/// - parameter isHLSAudio : A value which will indicate that downloaded url is an audio or video type.
/// - parameter onlineStreaming : A parameter which will decide that fetched url meta data should be downloaded on specific path or not. For online streaming no meta data will  be downloaded And for offline streaming all the metadata will be downloaded on provided path.
/// - parameter downloadablePath : A path where all the meta data of HLS streaming URL will be downloaded.
/// - parameter successHandler : Handler which gets executed when get success in the response.
/// - parameter failureHandler : Handler which gets executed when get failure in the response.
- (void)fetchHLSMediaBookDownloadURL:(NSString * _Nonnull)userToken bookId:(NSNumber * _Nonnull)bookId timeStamp:(NSNumber * _Nonnull)timeStamp isHLSOnlineStreaming:(BOOL)onlineStreaming successHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)fetchHLSM3U8URLs:(NSString * _Nonnull)hlsBaseURL isHLSAudio:(BOOL)isHLSAudio hlsMetaDataDownloadablePath:(NSString * _Nullable)downloadablePath withAudioThumbnailURL:(NSString * _Nullable)thumbnailURL successHandler:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
@end








/// A class to handle the themes for Media Book all UI Components.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK25HDKitabooMediaBookThemeVO")
@interface HDKitabooMediaBookThemeVO : NSObject
/// Theme parameters for Media Top Panel.
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_background;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_icons_color;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_bookTitle_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_toppanel_bottom_line;
/// Theme parameters for Media Side Panel.
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_border;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_tab_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_tab_border;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_background;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_Chapter_Time_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_unselected_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_description_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_time_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_icons_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_delete_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_sidepanel_selected_chapter_divider_color;
/// Theme parameters for Media Book Cover.
@property (nonatomic, strong) UIColor * _Nullable media_audioBookCover_background_color;
@property (nonatomic, strong) UIColor * _Nullable media_audioBookCover_shadow_color;
/// Theme parameters for Media Book Player View.
@property (nonatomic, strong) UIColor * _Nullable media_playerView_slider_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_slider_filled_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_default_timetext_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_current_timetext_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_title_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_chapter_count_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_navigation_arrow_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_disabled_navigation_arrow_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_selected_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_playerView_selected_icon_background;
/// Theme parameters for Media Book PopOver/Alerts/Action Sheets.
@property (nonatomic, strong) UIColor * _Nullable media_popup_background;
@property (nonatomic, strong) UIColor * _Nullable media_popup_title_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_hint_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_input_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_time_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_speed_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_selected_speed_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_main_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_cancel_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_delete_text_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_border;
@property (nonatomic, strong) UIColor * _Nullable media_popup_line_color;
@property (nonatomic, strong) UIColor * _Nullable media_popup_check_icon_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_main_background_color;
@property (nonatomic, strong) UIColor * _Nullable media_action_button_cancel_border_color;
/// Theme parameters for Media Video book player.
@property (nonatomic, strong) UIColor * _Nullable video_player_background;
@property (nonatomic, strong) UIColor * _Nullable video_player_icon_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_text_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_Play_icon_color;
@property (nonatomic, strong) UIColor * _Nullable video_player_Play_icon_overlay_background;
/// Initializes the HDKitabooMediaBookThemeVO object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// To take the theme file from the provided theme json path.
/// <ul>
///   <li>
///     : themeJsonPath : The theme Json Path.
///   </li>
/// </ul>
- (void)updateThemeFromJsonPath:(NSString * _Nullable)themeJsonPath;
@end

@protocol HDKitabooMediaPopOverControllerDelegate;
@class HDKitabooMediaPopOverModel;

/// An object that manages the UI and handling for Media PopOver View.
/// A HDKitabooMediaPopOverController object manages the UI and provides call backs for multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDKitabooMediaPopOverController")
@interface HDKitabooMediaPopOverController : UIViewController
/// The object that acts as the delegate of the HDKitabooMediaPopOverController.
/// The delegate must adopt the HDKitabooMediaPopOverControllerDelegate protocol.
@property (nonatomic, strong) id <HDKitabooMediaPopOverControllerDelegate> _Nullable delegate;
/// Initializes an allocated HDKitabooMediaPopOverController object.
/// \param mediaPopOverModel mediaPopOverModel is the HDKitabooMediaPopOverModel instance.
///
- (nonnull instancetype)init:(HDKitabooMediaPopOverModel * _Nonnull)mediaPopOverModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface HDKitabooMediaPopOverController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


@class UITouch;

@interface HDKitabooMediaPopOverController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end






/// The delegate of a HDKitabooMediaPopOverController object must adopt the HDKitabooMediaPopOverControllerDelegate protocol.
/// HDKitabooMediaPopOverControllerDelegate Protocol used to handle all the callbacks of HDKitabooMediaPopOverController Class.The HDKitabooMediaPopOverControllerDelegate protocol defines methods to provide callback when user perform any action on HDKitabooMediaPopOverController.
/// When configuring the HDKitabooMediaPopOverController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDKitabooMediaPopOverControllerDelegate_")
@protocol HDKitabooMediaPopOverControllerDelegate
@optional
/// Tell the delegate that the HDKitabooMediaPopOverController any Item is tapped.
/// This callback will be initialised when the user taps on any item of HDKitabooMediaPopOverController. HDKitabooMediaPopOverController will be dismissed after this callback.
- (void)didTapOnItem:(NSString * _Nonnull)itemTitle;
/// Tell the delegate that the HDKitabooMediaPopOverController’s Switch control button state(ON/OFF) has been changed.
/// This callback will only be initialised when the user is using Default Customised Controller where Switch control button is available and user is changing it’s state.
- (void)didChangeSwitchState:(BOOL)isOn;
/// Tell the delegate that the HDKitabooMediaPopOverController is being dismissed.
/// This callback will be initialised when the user dismisses the view by tapping outside it.
- (void)didTapOnCancelItem;
@end


/// An Object that will contain additional information for HDKitabooMediaPopOverController.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK26HDKitabooMediaPopOverModel")
@interface HDKitabooMediaPopOverModel : NSObject
/// HDKitabooMediaPopOverController header Title.
/// <ul>
///   <li>
///     If a user is not setting this value, By default no Header will be shown on Pop Over.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable popOverTitle;
/// Total number of items in HDKitabooMediaPopOverController view.
@property (nonatomic, strong) NSNumber * _Nullable numberOfItems;
/// To set HDKitabooMediaPopOverController all items text.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable itemsTitles;
/// To set HDKitabooMediaPopOverController all items font.
@property (nonatomic, strong) UIFont * _Nullable itemFont;
/// To set  selected item Text.
@property (nonatomic, copy) NSString * _Nullable selectedItem;
/// To set color to selected item font.
@property (nonatomic, strong) UIColor * _Nullable selectedItemColor;
/// To set HDKitabooMediaPopOverController all custom items text.
/// <ul>
///   <li>
///     If enableCustomController value is true, along with default items, additional items will also be shown on pop over.  And customItemTitles will set text to these additional items.
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable customItemTitles;
/// To set HDKitabooMediaPopOverController all custom items font.
/// <ul>
///   <li>
///     If enableCustomController value is true, along with default items, additional items will also be shown on pop over.  And customItemFonts will set font to these additional items.
///   </li>
/// </ul>
@property (nonatomic, strong) UIFont * _Nullable customItemFont;
/// To set HDKitabooMediaPopOverController source View. If source View is not being sat, in that case pop over will be shown in the middle of it’s super view.
@property (nonatomic, strong) UIView * _Nullable popOverSourceView;
/// To set enable/Disable of switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And enableSwitchControl will enable/Disable the Switch Button. The Defult Value will be <code>true</code> for  this.
///   </li>
/// </ul>
@property (nonatomic) BOOL enableSwitchControl;
/// To set state of switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchState will set the state of Switch Button i.e. ON/OFF.
///   </li>
/// </ul>
@property (nonatomic) BOOL switchState;
/// To set tint color to switch Button.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchTintColor will set the tint color to the Switch.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable switchTintColor;
/// To set text to Switch Label.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchLabelText will set the text to the Switch Label.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable switchLabelText;
/// To set font to Switch Label.
/// <ul>
///   <li>
///     If enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header. And switchLabelFont will set the font to the Switch Label.
///   </li>
/// </ul>
@property (nonatomic, strong) UIFont * _Nullable switchLabelFont;
/// To enable the default Media PopOver controller with Customise UI. When user set enableDefaultCustomisedController value to true a switch control button will be shown on Media PopOver controller’s header.
/// The Default value of enableDefaultCustomisedController is false .
@property (nonatomic) BOOL enableDefaultCustomisedController;
/// To enable the custom Media PopOver controller. When user set enableCustomController value to true a customised Media PopOver controller will be shown to user.
/// The Default value of enableCustomController is false .
@property (nonatomic) BOOL enableCustomController;
/// To change the arrow direction to right of custom Media PopOver controller. When user set enableCustomControllerRightArrow value to true then the pop over arrow direction will be right.
/// The Default value of enableCustomControllerRightArrow is false .
@property (nonatomic) BOOL enableCustomControllerRightArrow;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDKitabooSleepTimerControllerDelegate;
enum SleepAction : NSInteger;

/// An object that manages the UI for Sleep Timer View
/// A HDKitabooSleepTimerController object manages the UI and provides call backs for multiple actions performed.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29HDKitabooSleepTimerController")
@interface HDKitabooSleepTimerController : UIViewController
/// The object that acts as the delegate of the HDKitabooSleepTimerController.
/// The delegate must adopt the HDKitabooSleepTimerControllerDelegate protocol.
@property (nonatomic, weak) id <HDKitabooSleepTimerControllerDelegate> _Nullable delegate;
/// To set the theme color to various UI components of the HDKitabooSleepTimerController
/// This method should be called to set the color to various UI components of the HDKitabooSleepTimerController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To set the source view to the HDKitabooSleepTimerController
/// This method should be called to set the source view to present the HDKitabooSleepTimerController.
/// \param view view is the UIView object.
///
- (void)setSourceViewForSleepTimerViewController:(UIView * _Nonnull)view;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)updateSelectedSleepAction:(enum SleepAction)selectedSleepAction;
- (void)updateCustomSelectedTimeWithTime:(NSTimeInterval)time;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a HDKitabooSleepTimerController object must adopt the HDKitabooSleepTimerControllerDelegate protocol.
/// HDKitabooSleepTimerControllerDelegate Protocol used to handle all the callbacks of HDKitabooSleepTimerController Class.The HDKitabooSleepTimerControllerDelegate protocol defines methods to provide callback when user perform any action on HDKitabooSleepTimerController.
/// When configuring the HDKitabooSleepTimerController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37HDKitabooSleepTimerControllerDelegate_")
@protocol HDKitabooSleepTimerControllerDelegate
@optional
/// Delegate method called when Cancel alert action button is tapped.
/// This method will be called when user tap on the Cancel alert action button.
- (void)didRemoveSleepTimerView;
/// Delegate method called when action button with sleep time is tapped.
/// This method will be called when user tap on the action button with sleep time.
/// \param selectedSleepTime selectedSleepTime is the time shown on the action which is tapped.
///
/// \param selectedSleepAction selectedSleepAction is the SleepAction of the alert action button which is  tapped.
///
- (void)didSetAudioSleepTimerWithSelectedSleepTime:(NSTimeInterval)selectedSleepTime selectedSleepAction:(enum SleepAction)selectedSleepAction;
/// Delegate method called when Sleep Timer Off action button is tapped.
/// This method will be called when user tap on the Sleep Timer Off action button.
- (void)didSetAudioSleepTimerOff;
@end

@protocol HDMediaBookBookmarkControllerDelegate;

/// An object that manages the UI for Bookmark View.
/// A HDMediaBookBookmarkController object manages the UI and provides call backs when the bookmark is updated.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29HDMediaBookBookmarkController")
@interface HDMediaBookBookmarkController : UIViewController
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// The object that acts as the delegate of the HDMediaBookBookmarkController.
/// The delegate must adopt the HDMediaBookBookmarkControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookBookmarkControllerDelegate> _Nullable delegate;
/// Initializes the HDMediaBookBookmarkController object.
/// This method should be called to initialize the HDMediaBookBookmarkController object to add the new bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
/// Initializes the HDMediaBookBookmarkController object
/// This method should be called to initialize the HDMediaBookBookmarkController object to delete the existing bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel bookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO OBJC_DESIGNATED_INITIALIZER;
/// To set the theme color to various UI components of the HDMediaBookBookmarkController
/// This method should be called to set the color to various UI components of the HDMediaBookBookmarkController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The delegate of a HDMediaBookBookmarkController object must adopt the HDMediaBookBookmarkControllerDelegate protocol.
/// HDMediaBookBookmarkControllerDelegate Protocol used to handle all the callbacks of HDMediaBookBookmarkController Class.The HDMediaBookBookmarkControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookBookmarkController.
/// When configuring the HDMediaBookBookmarkController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37HDMediaBookBookmarkControllerDelegate_")
@protocol HDMediaBookBookmarkControllerDelegate
@optional
/// Delegate method when tapped on add bookmark button
/// This method will be called when user tap on the add bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to add/update the bookmark in database
///
- (void)didTapOnAddBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on delete bookmark button
/// This method will be called when user tap on the delete bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to delete the bookmark in database
///
- (void)didTapOnDeleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on cancel bookmark button
/// This method will be called when user tap on the cancel bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnCancelBookmark:(SDKBookmarkVO * _Nullable)bookmarkVO;
@end

@protocol HDMediaBookBookmarkController_V6Delegate;

/// An object that manages the UI for Bookmark View.
/// A HDMediaBookBookmarkController_V6 object manages the UI and provides call backs when the bookmark is updated.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK32HDMediaBookBookmarkController_V6")
@interface HDMediaBookBookmarkController_V6 : UIViewController
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// The object that acts as the delegate of the HDMediaBookBookmarkController_V6.
/// The delegate must adopt the HDMediaBookBookmarkController_V6Delegate protocol.
@property (nonatomic, weak) id <HDMediaBookBookmarkController_V6Delegate> _Nullable delegate;
/// Initializes the HDMediaBookBookmarkController_V6 object.
/// This method should be called to initialize the HDMediaBookBookmarkController_V6 object to add the new bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
/// Initializes the HDMediaBookBookmarkController_V6 object
/// This method should be called to initialize the HDMediaBookBookmarkController_V6 object to delete the existing bookmark.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel instance.
///
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
/// \param chapterTitle chapterTitle is Book Chapter Title.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel bookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO OBJC_DESIGNATED_INITIALIZER;
/// To set the theme color to various UI components of the HDMediaBookBookmarkController_V6
/// This method should be called to set the color to various UI components of the HDMediaBookBookmarkController_V6. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface HDMediaBookBookmarkController_V6 (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UITextFieldDelegate>
@end


/// The delegate of a HDMediaBookBookmarkController_V6 object must adopt the HDMediaBookBookmarkController_V6Delegate protocol.
/// HDMediaBookBookmarkController_V6Delegate Protocol used to handle all the callbacks of HDMediaBookBookmarkController_V6 Class.The HDMediaBookBookmarkController_V6Delegate protocol defines methods to provide callback when user perform any action on HDMediaBookBookmarkController_V6.
/// When configuring the HDMediaBookBookmarkController_V6 object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK40HDMediaBookBookmarkController_V6Delegate_")
@protocol HDMediaBookBookmarkController_V6Delegate
@optional
/// Delegate method when tapped on add bookmark button
/// This method will be called when user tap on the add bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to add/update the bookmark in database
///
- (void)didTapOnAddBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on delete bookmark button
/// This method will be called when user tap on the delete bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.It is used to delete the bookmark in database
///
- (void)didTapOnDeleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on cancel bookmark button
/// This method will be called when user tap on the cancel bookmark button
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnCancelBookmark:(SDKBookmarkVO * _Nullable)bookmarkVO;
@end


/// An Object that will contain all the information about a chapter of Media book.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20HDMediaBookChapterVO")
@interface HDMediaBookChapterVO : NSObject
/// To get Media Book chapter Title.
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
/// To get Media Book chapter Description.
@property (nonatomic, copy) NSString * _Nullable chapterDescription;
/// To get Media Book chapter Seek Time.
@property (nonatomic) NSInteger chapterSeekTime;
/// To get Media Book chapter Thumbnail URL.
@property (nonatomic, copy) NSString * _Nullable chapterThumbnailURL;
/// To get Media Book chapter Thumbnail Path.
@property (nonatomic, copy) NSString * _Nullable chapterThumbnailPath;
/// To get Media Book chapter URL.
@property (nonatomic, copy) NSString * _Nullable url;
/// To get Media Book chapter URL last Path Component.
@property (nonatomic, copy) NSString * _Nullable urlLastPathComponent;
/// Name of the current asset.
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
/// To get Media Book chapter subchapter Thumbnail Path.
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nullable children;
/// To get Media Book Chapter Start Time.
@property (nonatomic) NSInteger chapterStartTimeForBook;
/// To get Media Book Chapter Total Time.
@property (nonatomic) NSInteger chapterTotalTime;
@property (nonatomic) NSInteger avAssetTotalTime;
@property (nonatomic, copy) NSData * _Nullable hlsChpaterKeyData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HDMediaBookTranscriptVO;
@class HDMediaBookTimeIndexVO;

/// An Object that will contain additional infromation of a Media Book.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16HDMediaBookModel")
@interface HDMediaBookModel : NSObject
/// To get Media Book Id.
@property (nonatomic, copy) NSString * _Nullable mediaBookId;
/// To get Media Book Path.
@property (nonatomic, copy) NSString * _Nullable mediaBookPath;
/// To get Media Book Title.
@property (nonatomic, copy) NSString * _Nullable mediaBookTitle;
/// To get media Narration Speed Rate.
@property (nonatomic) float mediaNarrationSpeedRate;
/// To get Media Book thumbnail URL.
@property (nonatomic, copy) NSString * _Nullable thumbnailURL;
/// To get Media Book thumbnail Path.
@property (nonatomic, copy) NSString * _Nullable thumbnailPath;
/// To get media book current state.
@property (nonatomic) enum CurrentState mediaCurrentState;
/// To get media book total duration time.
@property (nonatomic) NSInteger totalTime;
/// To get media book current time.
@property (nonatomic) NSInteger currentTime;
/// The current playing chapter of Book.
@property (nonatomic, strong) HDMediaBookChapterVO * _Nullable currentChapter;
/// An Array of HDMediaBookChapterVO, which is used to get the total chapters in media book.
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nullable chapters;
/// An Array of HDMediaBookTranscriptVO, which is used to get the total transcripts in media book.
@property (nonatomic, copy) NSArray<HDMediaBookTranscriptVO *> * _Nullable transcripts;
/// An Array of HDMediaBookTimeIndexVO, which is used to get the total timeIndex in media book.
@property (nonatomic, copy) NSArray<HDMediaBookTimeIndexVO *> * _Nullable timeIndexVOArray;
/// To get media Book Encryption Type.
@property (nonatomic, copy) NSString * _Nullable mediaBookEncryptionType;
/// To get media Book ISBN.
@property (nonatomic, copy) NSString * _Nullable mediaBookISBN;
/// To get all the supported audio languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedAudios;
/// To get all the supported subtitle languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedSubtitles;
/// To get all the supported subtitle languages for media Book.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mediaSupportedResolutions;
/// To get additionalInfo for media Book.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable mediaBookAdditonalInfo;
/// To get Media Book Author.
@property (nonatomic, copy) NSString * _Nullable author;
/// To get Media Book Readby.
@property (nonatomic, copy) NSString * _Nullable readBy;
/// To get Media Book Publisher.
@property (nonatomic, copy) NSString * _Nullable publisher;
/// To get Media Book In Language.
@property (nonatomic, copy) NSString * _Nullable inLanguage;
/// To get Media Book Accessibility Summary.
@property (nonatomic, copy) NSString * _Nullable accessibilitySummary;
/// To Check Multi Audio Package.
@property (nonatomic) BOOL multiAudioPackage;
/// To Check Multi Level Chapter.
@property (nonatomic) BOOL multiLevelChapter;
/// To get Package Duration.
@property (nonatomic) NSInteger mediaDuration;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable cookies;
@property (nonatomic, copy) NSArray<HDMediaBookChapterVO *> * _Nonnull mediaBookAllChaptersArray;
@property (nonatomic) float volumn;
@property (nonatomic) BOOL isMute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDMediaBookNarrationSpeedControllerDelegate;

/// An object that manages the UI for Narration Speed View.
/// A HDMediaBookNarrationSpeedController object manages the UI and provides call backs when the narration speed is updated.
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK35HDMediaBookNarrationSpeedController")
@interface HDMediaBookNarrationSpeedController : UIViewController
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// The object that acts as the delegate of the HDMediaBookNarrationSpeedController.
/// The delegate must adopt the HDMediaBookNarrationSpeedControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookNarrationSpeedControllerDelegate> _Nullable delegate;
/// Initializes an allocated HDMediaBookNarrationSpeedController object.
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To set the theme color to various UI components of the HDMediaBookBookmarkController
/// This method should be called to set the color to various UI components of the HDMediaBookBookmarkController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To set the speed options of the HDMediaBookBookmarkController
/// This method should be called to set the  speed options of the HDMediaBookBookmarkController. The options will used for setting narratio speed options. If this method is not called, then the default optios will be used.
/// \param array array is the NSArray instance.If this object is not set, then the default optios will be used
///
- (void)setSpeedOptions:(NSArray * _Nonnull)array;
/// To set the source view to the NarrationSpeedController
/// This method should be called to set the source view to present the NarrationSpeedController.If this method is not called then by default the NarrationSpeedController will be displayed in the center of the view.
/// \param view view is the UIView object.
///
- (void)setSourceViewForNarrationSpeedController:(UIView * _Nonnull)view;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The delegate of a HDMediaBookNarrationSpeedController object must adopt the HDMediaBookNarrationSpeedControllerDelegate protocol.
/// HDMediaBookNarrationSpeedControllerDelegate Protocol used to handle all the callbacks of HDMediaBookNarrationSpeedController Class.The HDMediaBookNarrationSpeedControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookNarrationSpeedController.
/// When configuring the HDMediaBookNarrationSpeedController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK43HDMediaBookNarrationSpeedControllerDelegate_")
@protocol HDMediaBookNarrationSpeedControllerDelegate
@optional
/// Delegate method to update change in reading speed of the audio
/// This method will be called when narration speed of the audio is being updated/changed.
/// \param mediaBookModel mediaBookModel is the instance of HDMediaBookModel.We can get the updated narration speed from audioNarrationSpeedRate from HDMediaBookModel object.
///
- (void)didNarrationSpeedValueChanges:(HDMediaBookModel * _Nullable)mediaBookModel;
/// Delegate method to update when cancel button is tapped
/// This method will be called when user tap on the cancel button
- (void)didTapOnCancel;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17HDMediaBookParser")
@interface HDMediaBookParser : NSObject
@property (nonatomic, copy) void (^ _Nullable bookParsingCompleted)(HDMediaBookModel * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable bookParsingFailed)(NSError * _Nonnull);
- (void)parseTOCTimeIndexJsonForAudio:(HDMediaBookModel * _Nonnull)mediaBookModel tocjsonPath:(NSString * _Nullable)tocjsonPath timeIndexPath:(NSString * _Nullable)timeIndexPath;
- (void)parseTOCTimeIndexJsonForVideo:(HDMediaBookModel * _Nonnull)mediaBookModel tocjsonPath:(NSString * _Nullable)tocjsonPath timeIndexPath:(NSString * _Nullable)timeIndexPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDMediaBookPlayerDelegate;
@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;

/// An object that manages the rendering of the media Book.
/// A HDMediaBookPlayer object enable to perform multiple actions on a media i,e play, pause and many more.
/// <ul>
///   <li>
///     SuperClass : UIView
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17HDMediaBookPlayer")
@interface HDMediaBookPlayer : UIView <AVAssetResourceLoaderDelegate>
/// The object that acts as the delegate of the HDMediaBookPlayer.
/// The delegate must adopt the HDMediaBookPlayerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookPlayerDelegate> _Nullable delegate;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
@property (nonatomic) BOOL itemStoppedPlaying;
@property (nonatomic) BOOL isAudioSample;
/// To get the current selected subtitle/CC value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedSubtitle;
/// To get the current selected Audio value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedAudio;
/// To get the current selected Video quality value for Media.
@property (nonatomic, readonly, copy) NSString * _Nullable currentSelectedQuality SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Initializes the HDMediaBookPlayer object
/// This method should be called to initialize the HDMediaBookPlayer object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nonnull)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To get the AVPlayerView which is necessary to display the Video
/// This method should be called to get the AVPlayerView which is necessary to display the Video
- (UIView * _Nonnull)getPlayerLayerView SWIFT_WARN_UNUSED_RESULT;
/// To resume the audio
/// This method should be called to resume the audio play
- (void)playWithChapter:(HDMediaBookChapterVO * _Nullable)chapterModel;
/// To resume the audio from specific time
/// This method should be called to resume the audio play from specific time period
/// \param value value is the Int value.It should be time period in seconds
///
- (void)playToSeekTime:(NSInteger)value;
/// To stop the audio
/// This method should be called to stop the audio play
- (void)stop;
/// To pause the audio
/// This method should be called to pause the audio play
- (void)pause;
/// To set the reading of the audio
/// This method should be called to set the reading/narration speed of the audio.
/// \param isAudioMute isAudioMute is a boolean which enables to mute/unmute the audio.If the boolean is true, then audio will be muted and vice versa.
///
- (void)mute:(BOOL)isAudioMute;
/// To set the reading speed of the audio
/// This method should be called set the reading speed of the audio play
/// \param mediaBookModel mediaBookModel is the instance of HDMediaBookModel.
///
- (void)setReadingSpeed:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To forward the audio
/// This method should be called to forward the audio play
/// \param time time is the Int value which represents the number of seconds to be forwarded.
///
- (void)playForwardWithTime:(float)time;
/// To rewind the audio
/// This method should be called to rewind the audio play
/// \param time time is the Int value which represents the number of seconds to be rewinded
///
- (void)playBackwardWithTime:(float)time;
/// To play the audio from specific chapter
/// This method should be called to navigate between chapter i.e to play the audio from the specific chapter
- (void)navigateToChapter:(HDMediaBookChapterVO * _Nonnull)chapterVO withSeekTime:(NSInteger)seekTime;
/// To play the audio from specific time
/// This method should be called to navigate between bookmark time  i.e to play the audio from the specific bookmark time
- (void)navigateToBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To get the current playing time of the audio
/// This method should be called to get the current playing time of the audio
- (NSInteger)getSeekTime SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end





@interface HDMediaBookPlayer (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// To change the media audio Language.
/// This method should be called if the user wants  to change media audio Language.
/// \param audioType audioType, Name of Audio Language.
///
- (void)changeMediaLanguage:(NSString * _Nonnull)audioType;
/// To change the media Subtitle Language.
/// This method should be called if the user wants  to change media Subtitle Language.
/// \param subtitle subtitle, Name of subtitle type.
///
- (void)changeMediaSubtitle:(NSString * _Nullable)subtitle;
/// To change the Video Quality.
/// This method should be called if the user wants to change Video Quality.
/// \param option option, Video Quality value.
///
- (void)changeVideoQuality:(NSString * _Nonnull)option;
@end


/// The delegate of a HDMediaBookPlayer object must adopt the HDMediaBookPlayerDelegate protocol.
/// HDMediaBookPlayerDelegate Protocol used to handle all the callbacks of HDMediaBookPlayer Class.The HDMediaBookPlayerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookPlayer.
/// When configuring the HDMediaBookPlayer object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25HDMediaBookPlayerDelegate_")
@protocol HDMediaBookPlayerDelegate
@optional
/// Delegate method to update the audio playing time
/// This method will be called to when audio is in playing mode with continuous update of the current time out of total time
/// \param currentTime currentTime is the Int value.It returns the actual playing time in seconds
///
/// \param totalTime totalTime is the Int value.It returns the total time in seconds
///
- (void)playerPlayingWithCurrentTime:(NSInteger)currentTime totalTime:(NSInteger)totalTime;
/// Delegate method to update completion of audio play
/// This method will be called when the audio has finished the playing
- (void)playerDidFinishPlaying;
/// Delegate method to update the error occured to play
/// This method will be called when the audio has failed to play
/// \param error error is the Error instance.It returns the cause to fail the audio to be played
///
- (void)playerFailedToPlayWithError:(NSError * _Nonnull)error;
/// Delegate method to update the current state of the audio
/// This method will be called  when audio has changed the current state from one form to other form
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.We can get the current state of the audio from mediaCurrentState variable from mediaBookModel instance
///
- (void)playerDidChangeStateWithMediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel;
@end

@protocol HDMediaBookTOCControllerDelegate;
enum MediaBookTOCFilter : NSInteger;

/// An object that manages the UI of TOC for Media Book
/// A HDMediaBookTOCController object manages the UI and provides call backs for multiple actions performed on TOC for Chapter/Transcript/Bookmark segment/view
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK24HDMediaBookTOCController")
@interface HDMediaBookTOCController : UIViewController <UITableViewDataSource, UITableViewDelegate>
/// The object that acts as the delegate of the HDMediaBookTOCController.
/// The delegate must adopt the HDMediaBookTOCControllerDelegate protocol.
@property (nonatomic, weak) id <HDMediaBookTOCControllerDelegate> _Nullable delegate;
/// An Object to get TOC controller section mode type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
@property (nonatomic) enum MediaBookTOCFilter selectedMode;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
/// Initializes the HDAudioBookTOCViewController object
/// This method should be called to initialize the HDAudioBookTOCViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nonnull)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// To set the data to specific selected segment/view i.e, Chapter/Transcript/Bookmark
/// This method should be called every time when user receive the callback for selected segment/view i.e, Chapter/Transcript/Bookmark to set the relative data of the selected segment/view.
/// \param data data is the NSArray instance.When user select Chapter segment/view then it should be an array of HDMediaBookChapterVO.When user select Transcript segment/view then it should be an array of HDMediaBookTranscriptVO.When user select Bookmark segment/view then it should be an array of SDKBookmarkVO.
///
- (void)setData:(NSArray * _Nullable)data;
/// To set the theme color to various UI components of the HDMediaBookTOCController
/// This method should be called to set the color to various UI components of the HDMediaBookTOCController. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Transcript segment in TOC.
/// This method should be called to hide/unhide the Transcript segment from TOC.If this method is not called then by default the Transcript segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the transcript segment in TOC will be hidden and vice versa.
///
- (void)hideTranscript:(BOOL)hide;
/// To hide/unhide the Bookmark segment in TOC.
/// This method should be called to hide/unhide the Bookmark segment from TOC.If this method is not called then by default the Bookmark segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark segment in TOC will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To update the table view cell for the current playing chapter of the AudioBook
/// This method should be called to update the UI the table view cell for the current playing chapter of the AudioBook i.e, to change the background color of the tableViewCell and play/pause icon.
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)updateTOCForCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To update the play/pause button title according to the current state of the AudioBook
/// This method should be called to update the play/pause button title according to the current state of the AudioBook.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)setPlayPauseState:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To reload the data of the selected segment
/// This method should be called to reload the data of the selected segment
- (void)refresh;
/// To reload the data of the bookmark segment.
/// This method should be called to reload the data of the bookmark segment.
- (void)reloadBookmarkSection;
- (void)actionForButtonWithSender:(UIButton * _Nonnull)sender;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




/// The delegate of a HDMediaBookTOCController object must adopt the HDMediaBookTOCControllerDelegate protocol.
/// HDMediaBookTOCControllerDelegate Protocol used to handle all the callbacks of HDMediaBookTOCController Class.The HDMediaBookTOCControllerDelegate protocol defines methods to provide callback when user perform any action on HDMediaBookTOCController.
/// When configuring the HDMediaBookTOCController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK32HDMediaBookTOCControllerDelegate_")
@protocol HDMediaBookTOCControllerDelegate
@optional
/// Delegate method when user tap on chapter segment/view of the TOC
/// This method will be called when the user taps on the chapter segment/view.It allows the user to set the data related to the chapters of the AudioBook.
- (void)didTapOnChapterSegment;
/// Delegate method when user tap on Transcript segment/view of the TOC
/// This method will be called when the user taps on the Transcript segment.It allows the user to set the data related to the Transcript of the AudioBook.
- (void)didTapOnTranscriptSegment;
/// Delegate method when user tap on Bookmark segment/view of the TOC
/// This method will be called when the user taps on the Bookmark segment.It allows the user to set the data related to the Bookmark of the AudioBook.
- (void)didTapOnBookmarkSegment;
/// Delegate method when user tap on specific table view cell in the chapter segment/view
/// This method will be called when user tap on specific table view cell in the chapter segment/view
/// \param chapterVO chapterVO is the HDMediaBookChapterVO instance.This instance contains the details related to the selected chapter
///
- (void)didTapOnChapter:(HDMediaBookChapterVO * _Nonnull)chapterVO;
/// Delegate method when user tap on specific table view cell in the transcript segment/view
/// This method will be called when user tap on specific table view cell in the transcript segment/view
/// \param transcriptVO transcriptVO is the HDMediaBookTranscriptVO instance.This instance contains the details related to the selected transcript
///
- (void)didTapOnTranscript:(HDMediaBookTranscriptVO * _Nonnull)transcriptVO;
/// Delegate method when user tap on specific table view cell in the bookmark segment/view
/// This method will be called when user tap on specific table view cell in the bookmark segment/view
/// \param audioBookParser bookmarkVO is the SDKBookmarkVO instance.This instance contains the details related to the selected bookmark
///
- (void)didTapOnBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on play/pause button on any specific tableViewCell of the chapter segment/view
/// This method will be called when user tap on play/pause button on any specific tableViewCell of the chapter segment/view
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnChapterPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on delete button on any specific table view cell of the Bookmark segment/view
/// This method will be called when user tap on delete button on any specific table view cell of the Bookmark segment
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnBookmarkDelete:(SDKBookmarkVO * _Nonnull)bookmarkVO;
@end

@protocol HDMediaBookTOCController_V6Delegate;
enum MediaBookTOCFilter_V6 : NSInteger;

/// An object that manages the UI of TOC for Media Book
/// A HDMediaBookTOCController_V6 object manages the UI and provides call backs for multiple actions performed on TOC for Chapter/Transcript/Bookmark segment/view
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK27HDMediaBookTOCController_V6")
@interface HDMediaBookTOCController_V6 : UIViewController <UITableViewDataSource, UITableViewDelegate>
@property (nonatomic) BOOL isAudioBook;
/// The object that acts as the delegate of the HDMediaBookTOCController_V6.
/// The delegate must adopt the HDMediaBookTOCController_V6Delegate protocol.
@property (nonatomic, weak) id <HDMediaBookTOCController_V6Delegate> _Nullable delegate;
/// An Object to get TOC controller section mode type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
@property (nonatomic) enum MediaBookTOCFilter_V6 selectedMode;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
@property (nonatomic, readonly, strong) UIView * _Nonnull segmentView;
/// Initializes the HDAudioBookTOCViewController object
/// This method should be called to initialize the HDAudioBookTOCViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nonnull)mediaBookModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// To set the data to specific selected segment/view i.e, Chapter/Transcript/Bookmark
/// This method should be called every time when user receive the callback for selected segment/view i.e, Chapter/Transcript/Bookmark to set the relative data of the selected segment/view.
/// \param data data is the NSArray instance.When user select Chapter segment/view then it should be an array of HDMediaBookChapterVO.When user select Transcript segment/view then it should be an array of HDMediaBookTranscriptVO.When user select Bookmark segment/view then it should be an array of SDKBookmarkVO.
///
- (void)setData:(NSArray * _Nullable)data;
- (void)addBookMarkFooterView;
- (void)swipeUpDownBtnHiddenOrShow;
/// To set the theme color to various UI components of the HDMediaBookTOCController_V6
/// This method should be called to set the color to various UI components of the HDMediaBookTOCController_V6. The colors will be fetched from the json provided. If this method is not called, then the default colors will be applied to UI components
/// \param themeVO themeVO is the HDKitabooMediaBookThemeVO instance.If this object is not set, then the default colors will be applied to UI components
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Transcript segment in TOC.
/// This method should be called to hide/unhide the Transcript segment from TOC.If this method is not called then by default the Transcript segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the transcript segment in TOC will be hidden and vice versa.
///
- (void)hideTranscript:(BOOL)hide;
/// To hide/unhide the Bookmark segment in TOC.
/// This method should be called to hide/unhide the Bookmark segment from TOC.If this method is not called then by default the Bookmark segment will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark segment in TOC will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To update the table view cell for the current playing chapter of the AudioBook
/// This method should be called to update the UI the table view cell for the current playing chapter of the AudioBook i.e, to change the background color of the tableViewCell and play/pause icon.
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)updateTOCForCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To update the play/pause button title according to the current state of the AudioBook
/// This method should be called to update the play/pause button title according to the current state of the AudioBook.
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)setPlayPauseState:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To reload the data of the selected segment
/// This method should be called to reload the data of the selected segment
- (void)refresh;
/// To reload the data of the bookmark segment.
/// This method should be called to reload the data of the bookmark segment.
- (void)reloadBookmarkSection;
- (void)updateTableBottomConstraintWithConstraint:(CGFloat)constraint;
- (void)actionForButtonWithSender:(UIButton * _Nonnull)sender;
- (void)onClickSwipUpDownBtnWithSender:(UIButton * _Nonnull)sender;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface HDMediaBookTOCController_V6 (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)reloadTable;
@end


/// The delegate of a HDMediaBookTOCController_V6 object must adopt the HDMediaBookTOCController_V6Delegate protocol.
/// HDMediaBookTOCController_V6Delegate Protocol used to handle all the callbacks of HDMediaBookTOCController_V6 Class.The HDMediaBookTOCController_V6Delegate protocol defines methods to provide callback when user perform any action on HDMediaBookTOCController_V6.
/// When configuring the HDMediaBookTOCController_V6 object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK35HDMediaBookTOCController_V6Delegate_")
@protocol HDMediaBookTOCController_V6Delegate
@optional
/// Delegate method when user tap on chapter segment/view of the TOC
/// This method will be called when the user taps on the chapter segment/view.It allows the user to set the data related to the chapters of the AudioBook.
- (void)didTapOnChapterSegment;
/// Delegate method when user tap on Transcript segment/view of the TOC
/// This method will be called when the user taps on the Transcript segment.It allows the user to set the data related to the Transcript of the AudioBook.
- (void)didTapOnTranscriptSegment;
/// Delegate method when user tap on Bookmark segment/view of the TOC
/// This method will be called when the user taps on the Bookmark segment.It allows the user to set the data related to the Bookmark of the AudioBook.
- (void)didTapOnBookmarkSegment;
/// Delegate method when user tap on specific table view cell in the chapter segment/view
/// This method will be called when user tap on specific table view cell in the chapter segment/view
/// \param chapterVO chapterVO is the HDMediaBookChapterVO instance.This instance contains the details related to the selected chapter
///
- (void)didTapOnChapter:(HDMediaBookChapterVO * _Nonnull)chapterVO;
/// Delegate method when user tap on specific table view cell in the transcript segment/view
/// This method will be called when user tap on specific table view cell in the transcript segment/view
/// \param transcriptVO transcriptVO is the HDMediaBookTranscriptVO instance.This instance contains the details related to the selected transcript
///
- (void)didTapOnTranscript:(HDMediaBookTranscriptVO * _Nonnull)transcriptVO;
/// Delegate method when user tap on specific table view cell in the bookmark segment/view
/// This method will be called when user tap on specific table view cell in the bookmark segment/view
/// \param audioBookParser bookmarkVO is the SDKBookmarkVO instance.This instance contains the details related to the selected bookmark
///
- (void)didTapOnBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on play/pause button on any specific tableViewCell of the chapter segment/view
/// This method will be called when user tap on play/pause button on any specific tableViewCell of the chapter segment/view
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnChapterPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on delete button on any specific table view cell of the Bookmark segment/view
/// This method will be called when user tap on delete button on any specific table view cell of the Bookmark segment
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnBookmarkDelete:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when tapped on edit button on any specific table view cell of the Bookmark segment/view
/// This method will be called when user tap on edit button on any specific table view cell of the Bookmark segment
/// \param bookmarkVO bookmarkVO is the SDKBookmarkVO instance.
///
- (void)didTapOnBookmarkEdit:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Delegate method when user tap on swipe up down
- (void)didTapOnSwipeUpDown:(BOOL)swipeUp;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK27HDMediaBookTOCTableViewCell")
@interface HDMediaBookTOCTableViewCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK30HDMediaBookTOCTableViewCell_V6")
@interface HDMediaBookTOCTableViewCell_V6 : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HDMediaBookTimeIndexVO")
@interface HDMediaBookTimeIndexVO : NSObject
@property (nonatomic) NSInteger startTime;
@property (nonatomic) NSInteger endTime;
@property (nonatomic, copy) NSString * _Nullable folio;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable chapterTitle;
@property (nonatomic) NSInteger chapterTotalTime;
@property (nonatomic) NSInteger chapterContentIndex;
@property (nonatomic, strong) HDMediaBookTimeIndexVO * _Nullable parent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23HDMediaBookTranscriptVO")
@interface HDMediaBookTranscriptVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HDMediaTOCBookmarkCell")
@interface HDMediaTOCBookmarkCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23HDMoviePlayerController")
@interface HDMoviePlayerController : MPMoviePlayerController <UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithContentURL:(NSURL * _Nullable)url SWIFT_UNAVAILABLE;
@property (nonatomic, getter=isFullscreen) BOOL fullscreen;
@property (nonatomic, copy) NSURL * _Nullable contentURL;
- (void)setFullscreen:(BOOL)fullscreen animated:(BOOL)animated;
- (void)play;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21HDMultiLevelDataModel")
@interface HDMultiLevelDataModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("HDPDFCreator")
@interface HDPDFCreator : NSObject
- (nonnull instancetype)initWithHighlights:(NSArray * _Nonnull)highlights OBJC_DESIGNATED_INITIALIZER;
- (void)createPDFWithCompletion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23HDReaderSliderActionBar")
@interface HDReaderSliderActionBar : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

enum READER_MODE : NSInteger;

SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK36HDReflowableLayoutControllerDelegate_")
@protocol HDReflowableLayoutControllerDelegate
@optional
/// Will be called when user enable/disable the pagination configuration for reflowable epub books
/// \param enabled Boolean value which represents the pagination configuration
///
- (void)didEnablePagination:(BOOL)enabled;
/// Will be called when user enable/disable the night mode configuration for reflowable epub books
/// \param enabled Boolean value which represents the night mode configuration
///
- (void)didEnableNightMode:(BOOL)enabled;
/// Will be called when user change/drap the slider to vary the font size for reflowable epub books
/// \param fontValue Integer value which represents the current/updated font size
///
- (void)didChangeFontValue:(NSInteger)fontValue;
/// Will be called when user taps on the outer view in iPhones for reflowable epub books
- (void)didTapOnView;
/// Will be called when user change the Reader mode for reflowable epub books
/// \param mode Selected Reader Mode
///
- (void)didTapOnReaderMode:(enum READER_MODE)mode;
@end


/// An Object that manage a view For Reflowable Layout Settings.
/// <ul>
///   <li>
///     The HDReflowableLayoutSettingController class defines a Layout for Reflowable Books where user can change the Background color, Theme color,Font Size, Reader Mode, Text Alignment,Brightness for the particular book.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK35HDReflowableLayoutSettingController")
@interface HDReflowableLayoutSettingController : UIViewController <UIGestureRecognizerDelegate, UIPickerViewDataSource, UIPickerViewDelegate>
/// <ul>
///   <li>
///     resetReaderSettingis a block that would be called when a user taps “Reset” button on reflowable setting view controller, Provide action that needs to be performed on tap of “Reset” button.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable resetReaderSetting)(void);
/// fontFamilyDidChange is a block that would be called when a user taps on any font family from given drop down box on reflowable setting view controller, Provide action that needs to be performed on tap of that font family.
/// Returns The Selected Font of type String.
@property (nonatomic, copy) void (^ _Nullable fontFamilyDidChange)(NSString * _Nonnull);
/// <ul>
///   <li>
///     fontSizeDidChangeis a block that would be called when a user selects any option on slider on reflowable setting view controller, Provide action that needs to be performed on selecting option on slider.
///   </li>
/// </ul>
/// Returns The font size of type CGFloat.
@property (nonatomic, copy) void (^ _Nullable fontSizeDidChange)(CGFloat);
/// <ul>
///   <li>
///     didEnablePaginationis a block that would be called when a user taps on “Scroll Mode ON/OFF” switch on reflowable setting view controller, Provide action that needs to be performed on tap of “Scroll Mode ON/OFF” switch.
///   </li>
/// </ul>
/// Returns A BOOL value.
@property (nonatomic, copy) void (^ _Nullable didEnablePagination)(BOOL);
/// <ul>
///   <li>
///     didChangeReaderMode is a block that would be called when a user taps any mode on reflowable setting view controller, Provide action that needs to be performed on tap of that mode.
///   </li>
/// </ul>
/// Returns The mode type of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeReaderMode)(NSInteger);
/// <ul>
///   <li>
///     didChangeTextAliginmentis a block that would be called when a user taps any text alignment on reflowable setting view controller, Provide action that needs to be performed on tap of that text alignment.
///   </li>
/// </ul>
/// Returns The text alignment of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeTextAliginment)(NSInteger);
/// <ul>
///   <li>
///     didChangeLineSpacing is a block that would be called when a user taps any line spacing on a reflowable setting view controller, Provide action that needs to be performed on tap of that line spacing.
///   </li>
/// </ul>
/// Returns The line spacing of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeLineSpacing)(NSInteger);
/// <ul>
///   <li>
///     didChangeMargin is a block that would be called when the user taps any margin on the reflowable setting view controller, Provide action that needs to be performed on tap of that margin.
///   </li>
/// </ul>
/// Returns The line spacing of Type Int.
@property (nonatomic, copy) void (^ _Nullable didChangeMargin)(NSInteger);
/// <ul>
///   <li>
///     willDismissController is a block that would be called when a user taps on outside of a reflowable setting to remove the view controller.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable willDismissController)(void);
/// List of font families to apply on page text.
@property (nonatomic, strong) NSArray * _Nonnull fontFamilyArray;
@property (nonatomic, strong) UIColor * _Nonnull backgroundThemeColor;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic, strong) UIColor * _Nullable themeColor;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic, strong) UIColor * _Nullable titleTextColor;
@property (nonatomic, strong) UIColor * _Nullable buttonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable buttonBorderColor;
@property (nonatomic, strong) UIColor * _Nullable selectedButtonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable selectedButtonBorderColor;
@property (nonatomic, strong) UIColor * _Nullable resetButtonTitleColor;
@property (nonatomic, strong) UIColor * _Nullable sliderThumbColor;
@property (nonatomic, strong) UIColor * _Nullable sliderTrackTintColor;
@property (nonatomic, strong) UIColor * _Nullable scrollSwitchTintColor;
@property (nonatomic, strong) UIColor * _Nullable fontFamilyThemeColor;
@property (nonatomic, strong) UIColor * _Nullable separationLineColor;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// To enable font family view.
/// \param isEnable Bool value
///
- (void)enableFontFamilyView:(BOOL)isEnable;
/// To enable font size view.
/// \param isEnable Bool value
///
- (void)enableFontSizeView:(BOOL)isEnable;
/// To enable alignment view.
/// \param isEnable Bool value
///
- (void)enableAlignmentView:(BOOL)isEnable;
/// To enable line spacing view.
/// \param isEnable Bool value
///
- (void)enableLineSpacingView:(BOOL)isEnable;
/// To enable margin view.
/// \param isEnable Bool value
///
- (void)enableMarginView:(BOOL)isEnable;
/// To enable reader mode view.
/// \param isEnable Bool value
///
- (void)enableReaderModeView:(BOOL)isEnable;
/// To enable scroll mode view.
/// \param isEnable Bool value
///
- (void)enableScrollModeView:(BOOL)isEnable;
/// This method is used to set font to text available in layout.
/// \param fontName “fontName” is the value to create font for layout.
///
- (void)setCustomFontNameForLayoutWithFontName:(NSString * _Nonnull)fontName;
/// This method is used to  set background color to HDReflowableFontSettingViewController view.
/// \param color Color of type UIColor to set the background color.
///
- (void)setBackgroundColorForView:(UIColor * _Nonnull)color;
/// This method is used to  set Theme color to HDReflowableFontSettingViewController controls.
/// \param color Color of type UIColor to set the Theme color.
///
- (void)setThemeColorToView:(UIColor * _Nonnull)color;
/// This method is used to  set the list of available options for text alignment.
/// \param options Array of type NSArray to set the alignment options[LEFT_ALIGNMENT,CENTER_ALIGNMENT,RIGHT_ALIGNMENT,JUSTIFY_ALIGNMENT & DEFAULT_ALIGNMENT].
///
- (void)setTextAlignmentOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for text linespacing.
/// \param options Array of type NSArray to set the text linespacing options[DEFAULT_LINESPACING,SMALL_LINESPACING,MEDIUM_LINESPACING & LARGE_LINESPACING].
///
- (void)setLineSpacingOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for reader margin.
/// \param options Array of type NSArray to set the reader margin option[DEFAULT_MARGIN,SMALL_MARGIN,MEDIUM_MARGIN & LARGE_MARGIN]s.
///
- (void)setReaderMarginOptions:(NSArray * _Nonnull)options;
/// This method is used to  set the list of options for reader mode.
/// \param options Array of type NSArray to set the reader mode options[DAY_MODE,SEPIA_MODE,NIGHT_MODE & DEFAULT_MODE].
///
- (void)setReaderModeOptions:(NSArray * _Nonnull)options;
/// This method is used to set font size to text for whole Page of reflowable epub books.
/// \param currentFontSize currentFontSize is the value of changed font.
///
- (void)setFontSize:(NSInteger)currentFontSize;
/// <ul>
///   <li>
///     If enabled value is YES, page navigation direction will be left to right or in case of NO it will be vertical scrolling.
///   </li>
/// </ul>
/// \param enabled enabled is the boolean value which represents the pagination configuration.
///
- (void)setPaginationEnable:(BOOL)enabled;
/// This method used to set current Reader mode configuration for reflowable epub books.
/// @discussion  With the help of Reader mode Enable Feature user can change an appearance of Page to Day mode, Sepia mode or to night mode.
/// <ul>
///   <li>
///     Day Mode Uses a colour scheme that displays dark text on a light background.
///   </li>
///   <li>
///     Sepia Mode Is a reddish brown monochrome tint. When applied to a Page, it gives the Page a warm, antique feeling.
///   </li>
///   <li>
///     Night Mode Uses a colour scheme that displays light text on a dark background.
///   </li>
///   <li>
///     Default Mode uses a colour scheme that displays text & background as per book package details.
///   </li>
/// </ul>
/// \param modeType modeType is the ReaderModeType raw value which represents mode configuration
///
- (void)setReaderModeEnable:(NSInteger)modeType;
/// <ul>
///   <li>
///     Justify Alignment aligns text with right and left margins and tries to fill as much empty space as possible. It enables a straight margin on both of the page’s horizontal edges.
///   </li>
///   <li>
///     Default Alignment aligns text as per book package details.
///   </li>
/// </ul>
/// \param alignmentType alignmentType represents the current text alignment configuration.
///
- (void)setCurrentTextAlignment:(NSInteger)alignmentType;
/// This method used to set current font family configuration for reflowable epub books.
/// \param fontName fontName represents current font family configuration
///
- (void)setCurrentFontFamily:(NSString * _Nonnull)fontName;
/// \param lineSpacing lineSpacing represents the current line spacing configuration.
///
- (void)setCurrentLineSpacing:(NSInteger)lineSpacing;
/// \param margin margin represents the current margin configuration.
///
- (void)setCurrentMargin:(NSInteger)margin;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPickerView;

@interface HDReflowableLayoutSettingController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK40HDReflowableLayoutSettingsViewController")
@interface HDReflowableLayoutSettingsViewController : UIViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface HDReflowableLayoutSettingsViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("HDReflowablePageCountView")
@interface HDReflowablePageCountView : UIView
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull dotLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull pageLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull readingTimeLeftLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setPageData:(NSString * _Nonnull)pageNumber;
- (void)setTimeLeftData:(NSString * _Nonnull)text;
- (void)setCustomFontFamily:(NSString * _Nonnull)fontName;
- (void)setViewColors:(UIColor * _Nonnull)textColor backgroundColor:(UIColor * _Nonnull)backgroundColor;
- (void)enableDotLabel:(BOOL)enable;
@end


SWIFT_CLASS_NAMED("HDReflowableSliderPopUpView")
@interface HDReflowableSliderPopUpView : UIView
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull chapterNameLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull readingTimeLeftLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class ReflowableCustomSlider;
@class NSLayoutConstraint;

SWIFT_CLASS_NAMED("HDSliderBarView")
@interface HDSliderBarView : UIView
@property (nonatomic, strong) ReflowableCustomSlider * _Nonnull pageSlider;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable sliderContainerVewHeight;
@property (nonatomic, readonly, strong) UIView * _Nonnull sliderContainerVew;
@property (nonatomic, readonly, strong) UILabel * _Nonnull percentageLabel;
@property (nonatomic, copy) void (^ _Nullable sliderValueChanged)(float);
@property (nonatomic, copy) void (^ _Nullable sliderMoves)(float);
- (nonnull instancetype)initWithVerticalSliderValue:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)enableVerticalSlider:(BOOL)enable;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)updatePercentage;
- (void)enableSliderThumbImage:(BOOL)enable;
- (void)setSliderThumbColour:(UIColor * _Nonnull)thumbColor maxTintColor:(UIColor * _Nonnull)maxColor minTintColor:(UIColor * _Nonnull)minTint;
- (void)setImageForSlider:(UIImage * _Nonnull)image withColour:(UIColor * _Nonnull)color;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18HDThemeManager_6_0")
@interface HDThemeManager_6_0 : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HDThemeManager_6_0 * _Nonnull shared;)
+ (HDThemeManager_6_0 * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) BookShelfThemeFor_V6_0 * _Nullable mediaTheme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)updateTheme;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14HDThemeReferer")
@interface HDThemeReferer : NSObject
- (NSString * _Nonnull)getMediaThemeNameForReader SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInverseThemeNameforReader SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDarkModeOn SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HDUserResizableTextView;

SWIFT_PROTOCOL_NAMED("HDUserResizableTextDelegate")
@protocol HDUserResizableTextDelegate <NSObject>
- (void)userResizableViewDidBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
- (void)userResizableViewDidEndEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
- (void)userResizableViewDidValueChanged:(HDUserResizableTextView * _Nonnull)userResizableView;
- (BOOL)userResizableViewShouldBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView SWIFT_WARN_UNUSED_RESULT;
@end

@class UIEvent;

SWIFT_CLASS_NAMED("HDUserResizableTextView")
@interface HDUserResizableTextView : UIView <UITextViewDelegate>
@property (nonatomic, copy) NSString * _Nullable localID;
@property (nonatomic, readonly, strong) UIView * _Nullable border;
@property (nonatomic, strong) UIView * _Nullable contentView;
@property (nonatomic, weak) id <HDUserResizableTextDelegate> _Nullable delegate;
- (void)adjustFontSizeForTextViewWithTextView:(UITextView * _Nonnull)textView;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame withInset:(CGFloat)withInset OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)showEditingHandles;
- (void)hideEditingHandles;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)enterEditingMode;
@end

@protocol HDVideoBookPlayerViewControllerDelegate;
enum VideoPlayerViewStateUpdate : NSInteger;

/// An object that manages the UI of Video Player View
/// A HDVideoBookPlayerViewController object manages the UI and provides call backs for multiple actions performed
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HDVideoBookPlayerViewController")
@interface HDVideoBookPlayerViewController : UIViewController
/// The object that acts as the delegate of the HDVideoBookPlayerViewController.
/// The delegate must adopt the HDVideoBookPlayerViewControllerDelegate protocol.
@property (nonatomic, weak) id <HDVideoBookPlayerViewControllerDelegate> _Nullable delegate;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the HDVideoBookPlayerViewController object
/// This method should be called to initialize the HDVideoBookPlayerViewController object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
/// \param videoPlayer UIView object where the video will be played/displayed.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel withVideoPlayer:(UIView * _Nonnull)videoPlayer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
/// To set the video player view to full screen for Iphone.
- (void)setViewFullScreenForIphone;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum VideoPlayerViewStateUpdate)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the text color for the button title and selected narrated speed value
/// This method should be called to set the text color for apply button title and selected narrated speed value
/// \param color color is the UIColor instance.This is used to update the components apply button title and selected narrated speed value
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the previous bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param disable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To enable/disable the Subtitle view.
/// This method should be called to enable/disable the previous Subtitle view. If this method is not called then by default the view will be in enabled state.
/// \param disable disable is a boolean. If the boolean is set to true then the view will be in disabled state and vice-versa.
///
- (void)setSubtitleViewState:(BOOL)disable;
/// To enable/disable the mute button.
/// This method should be called to enable/disable the mute button.
/// \param enable enable is a boolean.
///
- (void)enableDisbleMuteButton:(BOOL)enable;
/// To set color to  the Subtitle view.
/// This method should be called to set the color to Subtitle view. If this method is not called then by default the view color will be transparent.
/// \param color color is the color for view.
///
- (void)setSubtitleViewColor:(UIColor * _Nonnull)color;
/// To delete all the bookmarks on the view of the seek bar of the video player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To update the user that whether the video is ready to play or not
/// This method should be called to update the user that whether the video is ready to play or not
/// \param isLoaded isLoaded is a boolean value. If the value is true then video is loaded and ready to play and vice versa
///
- (void)isVideoReadyToPlay:(BOOL)isLoaded;
/// This method should be called when view layout needed or device orientation changes.
- (void)updateViewOnOrientationChange;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




/// The delegate of a HDVideoBookPlayerViewController object must adopt the HDVideoBookPlayerViewControllerDelegate protocol.
/// HDVideoBookPlayerViewControllerDelegate Protocol used to handle all the callbacks of HDVideoBookPlayerViewController Class.The HDVideoBookPlayerViewControllerDelegate protocol defines methods to provide callback when user perform any action on HDVideoBookPlayerViewController.
/// When configuring the HDVideoBookPlayerViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK39HDVideoBookPlayerViewControllerDelegate_")
@protocol HDVideoBookPlayerViewControllerDelegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnVideoBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnVideoPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnVideoNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnVideoForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnVideoRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnVideoNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnVideoPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didVideoSeekBarValueChanged;
/// Delegate method when tapped on video mute button
/// This method will be called when user tap on the video mute  button
- (void)didTapOnVideoMute:(BOOL)isMute;
/// Delegate method when user tap on back button
/// This method will be called when user tap on the back button
- (void)didTapOnVideoBack;
/// Delegate method when user tap on full screen button
/// This method will be called when user tap on the full screen button
- (void)didTapOnVideoFullScreen:(BOOL)isFullScreen;
/// Delegate method when user taps on subtitle button.
/// This method will be called when user taps on subtitle button.
- (void)didTapOnSubtitleView:(BOOL)enabled;
/// Delegate method when user taps on the video more options button.
/// This method will be called when the user taps on the video more options button.
- (void)didTapOnVideoMoreOptions:(UIView * _Nonnull)view;
/// Delegate method when user taps on the video view.
/// This method will be called when the user taps on the video view.
- (void)didTapOnVideoView:(BOOL)enableControls;
@end

@protocol HDVideoBookPlayerViewController_V6Delegate;
enum VideoPlayerViewStateUpdate_V6 : NSInteger;

/// An object that manages the UI of Video Player View
/// A HDVideoBookPlayerViewController_V6 object manages the UI and provides call backs for multiple actions performed
/// <ul>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK34HDVideoBookPlayerViewController_V6")
@interface HDVideoBookPlayerViewController_V6 : UIViewController
/// The object that acts as the delegate of the HDVideoBookPlayerViewController_V6.
/// The delegate must adopt the HDVideoBookPlayerViewController_V6Delegate protocol.
@property (nonatomic, weak) id <HDVideoBookPlayerViewController_V6Delegate> _Nullable delegate;
/// To set HDMediaBookModel instance.
@property (nonatomic, strong) HDMediaBookModel * _Nullable _mediaBookModel;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes the HDVideoBookPlayerViewController_V6 object
/// This method should be called to initialize the HDVideoBookPlayerViewController_V6 object
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
/// \param videoPlayer UIView object where the video will be played/displayed.
///
- (nonnull instancetype)init:(HDMediaBookModel * _Nullable)mediaBookModel withVideoPlayer:(UIView * _Nonnull)videoPlayer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)bookmarkButtonTapped:(UIButton * _Nonnull)sender;
- (void)hideControlWithDelay;
- (void)didTapOnViewww;
/// To set the video player view to full screen for Iphone.
- (void)setViewFullScreenForIphone;
/// To update the player view according to the state received
/// This method should be called to update the player view according to the state received.Set the state to kAudioBookUpdatePlayPauseState to update the play/pause button title according to the current state of the AudioBook.Set the state to kAudioBookUpdateReadingSpeed to update the text of the narration speed label.Set the state to kAudioBookUpdateCurrentTime to update the slider progress and time label text.
/// \param state state is an enum of  AudioBookStateUpdate
///
/// \param mediaBookModel mediaBookModel is a HDMediaBookModel object
///
- (void)updatePlayerView:(enum VideoPlayerViewStateUpdate_V6)state mediaBookModel:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// To update the chapter name and number for the current playing chapter of the AudioBook
/// This method should be called to update the chapter name and number for the current playing chapter of the AudioBook
/// \param enable chapterVO is the HDMediaBookChapterVO instance.This is instance of the current playing chapter.
///
- (void)setCurrentChapter:(HDMediaBookChapterVO * _Nullable)chapterVO;
/// To set the text color for the button title and selected narrated speed value
/// This method should be called to set the text color for apply button title and selected narrated speed value
/// \param color color is the UIColor instance.This is used to update the components apply button title and selected narrated speed value
///
- (void)setTheme:(HDKitabooMediaBookThemeVO * _Nullable)themeVO;
/// To hide/unhide the Bookmark
/// This method should be called to hide/unhide the Bookmark button.If this method is not called then by default the Bookmark button will be displayed.
/// \param hide hide is a boolean.If this boolean is set as true, then the Bookmark button will be hidden and vice versa.
///
- (void)hideBookmark:(BOOL)hide;
/// To disable the next chapter button.
/// This method should be called to disable the next chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableNextChapter:(BOOL)disable;
/// To disable the previous chapter button.
/// This method should be called to disable the previous chapter button.If this method is not called then by default the button will be in enabled state.
/// \param enable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disablePreviousChapter:(BOOL)disable;
/// To disable the Bookmark  button.
/// This method should be called to disable the previous bookmark button.If this method is not called then by default the button will be in enabled state.
/// \param disable disable is a boolean.If the boolean is set to true then the button will be in disabled state and vice versa.
///
- (void)disableBookmark:(BOOL)disable;
/// To enable/disable the Subtitle view.
/// This method should be called to enable/disable the previous Subtitle view. If this method is not called then by default the view will be in enabled state.
/// \param disable disable is a boolean. If the boolean is set to true then the view will be in disabled state and vice-versa.
///
- (void)setSubtitleViewState:(BOOL)disable;
/// To enable/disable the mute button.
/// This method should be called to enable/disable the mute button.
/// \param enable enable is a boolean.
///
- (void)enableDisbleMuteButton:(BOOL)enable;
/// To set color to  the Subtitle view.
/// This method should be called to set the color to Subtitle view. If this method is not called then by default the view color will be transparent.
/// \param color color is the color for view.
///
- (void)setSubtitleViewColor:(UIColor * _Nonnull)color;
/// To delete all the bookmarks on the view of the seek bar of the video player.
- (void)deleteAllBookmarks:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarksVO;
/// To add the bookmark view on the seek bar of the audio player
/// This method should be called to add the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)addBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To delete the bookmark view on the seek bar of the audio player
/// This method should be called to delete the bookmark view on the seek bar of the audio player
/// \param bookmarkVO bookmarkVO is a SDKBookmarkVO instance
///
- (void)deleteBookmark:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To update the user that whether the video is ready to play or not
/// This method should be called to update the user that whether the video is ready to play or not
/// \param isLoaded isLoaded is a boolean value. If the value is true then video is loaded and ready to play and vice versa
///
- (void)isVideoReadyToPlay:(BOOL)isLoaded;
/// This method should be called when view layout needed or device orientation changes.
- (void)updateViewOnOrientationChange;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




/// The delegate of a HDVideoBookPlayerViewController_V6 object must adopt the HDVideoBookPlayerViewController_V6Delegate protocol.
/// HDVideoBookPlayerViewController_V6Delegate Protocol used to handle all the callbacks of HDVideoBookPlayerViewController_V6 Class.The HDVideoBookPlayerViewController_V6Delegate protocol defines methods to provide callback when user perform any action on HDVideoBookPlayerViewController_V6.
/// When configuring the HDVideoBookPlayerViewController_V6 object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK42HDVideoBookPlayerViewController_V6Delegate_")
@protocol HDVideoBookPlayerViewController_V6Delegate
@optional
/// Delegate method when user tap on bookmark button
/// This method will be called when user tap on the bookmark button
- (void)didTapOnVideoBookmark;
/// Delegate method when tapped on play/pause button
/// This method will be called when user tap on the play/pause button
/// \param mediaBookModel mediaBookModel is the HDMediaBookModel instance.
///
- (void)didTapOnVideoPlayPause:(HDMediaBookModel * _Nonnull)mediaBookModel;
/// Delegate method when tapped on Narration Speed button
/// This method will be called when user tap on the Narration Speed button
- (void)didTapOnVideoNarrationSpeed:(UIButton * _Nonnull)button;
/// Delegate method when tapped on forward button
/// This method will be called when user tap on the forward button
- (void)didTapOnVideoForward;
/// Delegate method when tapped on backward button
/// This method will be called when user tap on the backward button
- (void)didTapOnVideoRewind;
/// Delegate method when tapped on next chapter button
/// This method will be called when user tap on the next chapter  button
- (void)didTapOnVideoNextChapter;
/// Delegate method when tapped on previous chapter button
/// This method will be called when user tap on the previous chapter  button
- (void)didTapOnVideoPreviousChapter;
/// Delegate method when update the UISlider position
/// This method will be called when user update the UISlider position
- (void)didVideoSeekBarValueChanged;
/// Delegate method when tapped on video mute button
/// This method will be called when user tap on the video mute  button
- (void)didTapOnVideoMute:(BOOL)isMute;
/// Delegate method when user tap on back button
/// This method will be called when user tap on the back button
- (void)didTapOnVideoBack;
/// Delegate method when user tap on full screen button
/// This method will be called when user tap on the full screen button
- (void)didTapOnVideoFullScreen:(BOOL)isFullScreen;
/// Delegate method when user taps on subtitle button.
/// This method will be called when user taps on subtitle button.
- (void)didTapOnSubtitleView:(BOOL)enabled;
/// Delegate method when user taps on the video more options button.
/// This method will be called when the user taps on the video more options button.
- (void)didTapOnVideoMoreOptions:(UIView * _Nonnull)view;
/// Delegate method when user taps on the video view.
/// This method will be called when the user taps on the video view.
- (void)didTapOnVideoView:(BOOL)enableControls;
@end


/// An object that manages the content of Audio/Video data, This class is only responsible for Audio & Video format file with TOC feature
/// @discussion The HDVideoTOCVO class is responsible for management of a json data such as, videoSeekTime, videoTitle,videoThumbnailURL and videoDescription data .
/// @superclass SuperClass : NSObject
SWIFT_CLASS_NAMED("HDVideoTOCVO")
@interface HDVideoTOCVO : NSObject
@property (nonatomic, copy) NSString * _Nullable videoSeekTime;
@property (nonatomic, copy) NSString * _Nullable videoTitle;
@property (nonatomic, copy) NSString * _Nullable videoThumbnailURL;
@property (nonatomic, copy) NSString * _Nullable videoDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HDVoiceRecognizeManagerDelegate;

SWIFT_CLASS_NAMED("HDVoiceRecognizeManager")
@interface HDVoiceRecognizeManager : NSObject <SFSpeechRecognizerDelegate>
@property (nonatomic, weak) id <HDVoiceRecognizeManagerDelegate> _Nullable delegate;
@property (nonatomic, copy) void (^ _Nullable result)(NSString * _Nullable, NSError * _Nullable);
@property (nonatomic, strong) UIButton * _Null_unspecified voiceSearchButton;
@property (nonatomic, strong) UIColor * _Nullable themeColor;
@property (nonatomic) NSInteger autoStopVoiceRecognizingTime;
@property (nonatomic, copy) NSString * _Nonnull languageCode;
- (void)startRecognize;
- (void)requestPermission;
- (void)cancelRecognization;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK31HDVoiceRecognizeManagerDelegate_")
@protocol HDVoiceRecognizeManagerDelegate
- (void)voiceRecognizerAuthStateWithAuthState:(SFSpeechRecognizerAuthorizationStatus)authState;
- (void)didStopVocieRecognizing;
- (void)recognizerNotAvailable;
@end

@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11HDWKWebView")
@interface HDWKWebView : WKWebView
@property (nonatomic) BOOL isFixedLayout;
@property (nonatomic, strong) EPUBChapter * _Nullable chapter;
@property (nonatomic, copy) NSString * _Nonnull localPath;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (void)enablePaginationWithIsPaginationEnabled:(BOOL)isPaginationEnabled;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (BOOL)canPerformAction:(SEL _Nonnull)action withSender:(id _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (void)reset;
@end

typedef SWIFT_ENUM(NSInteger, HIGHLIGHT_VIEW_TYPE, open) {
  HIGHLIGHT_VIEW_TYPENormal = 0,
  HIGHLIGHT_VIEW_TYPEUnderline = 1,
};


/// An Object that will be responsible for persisting the SDK Data. The data is stored using Core Data (ORM) and will use Sqlite for actual storage.
/// HSDBManager is a manager class which is used to handle all the communication of data with the database, such as saving highlight to the database, deleting any highlight from the database, updating shared data to the database, etc.
/// <ul>
///   <li>
///     superclass: NSObject
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11HSDBManager")
@interface HSDBManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK31HSEpubReflowableLaunchImageView")
@interface HSEpubReflowableLaunchImageView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(NSString * _Nullable)imageURL withBookTitle:(NSString * _Nullable)bookTitle bookAuthor:(NSString * _Nullable)bookAuthor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setThumbnailView;
- (void)setWidth:(float)width;
- (void)setViewWithShadow:(UIView * _Nullable)view;
- (void)setGradientTo:(UIView * _Nullable)view;
- (void)layoutSubviews;
@end

@protocol HSModalPopupControllerDelegate;

/// An Object that manage a view For Modal Popup.
/// <ul>
///   <li>
///     The HSModalPopupController class defines a Layout where user can show any view with caption.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HSModalPopupController")
@interface HSModalPopupController : UIViewController
- (void)viewDidLoad;
@property (nonatomic, weak) id <HSModalPopupControllerDelegate> _Nullable delegate;
/// To set Content View.
/// User can send any view and the view will added to current view with required size.
/// \param view view type Any.
///
- (void)setContentViewWithView:(id _Nonnull)view;
/// To set caption text for element.
/// \param text text type String.
///
- (void)setCaptionTextWithText:(NSString * _Nonnull)text;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("HSModalPopupControllerDelegate")
@protocol HSModalPopupControllerDelegate
- (void)didCloseModalPopupController;
@end

@class SDKHighlightVO;

/// The delegate of a <code>HSNoteController</code> object must adopt the <code>HSNoteControllerDelegate</code> protocol.
/// <code>HSNoteControllerDelegate</code> protocol is used to handle all the callbacks of <code>HSNoteController</code> class.
/// All delegate methods are optional. Delegate method gets called when the user selects any one of the buttons
/// (Cancel, Post, Share, Delete, Comment) available on the note controller.
/// When configuring the <code>HSNoteController</code> object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK24HSNoteControllerDelegate_")
@protocol HSNoteControllerDelegate
@optional
/// This method gets called when the user taps on the cancel button on the note.
/// <ul>
///   <li>
///     Discussion: <code>highlight</code> is used to identify the selected note for which NoteController is initiated.
///     User can dismiss the note controller in this method.
///   </li>
/// </ul>
/// \param highlight The object of <code>SDKHighlightVO</code>.
///
- (void)didTapOnCancelNote:(SDKHighlightVO * _Nonnull)highlight;
/// This method gets called when the user taps on the Post button on the note.
/// <ul>
///   <li>
///     Discussion: <code>highlight</code> is used to identify the selected note for which NoteController is initiated.
///     User can save or update the note and dismiss the note controller in this method.
///   </li>
/// </ul>
/// \param highlight The object of <code>SDKHighlightVO</code>.
///
- (void)didTapOnPostNote:(SDKHighlightVO * _Nonnull)highlight;
/// This method gets called when the user taps on the Delete button on the note.
/// <ul>
///   <li>
///     Discussion: <code>highlight</code> is used to identify the selected note for which NoteController is initiated.
///     User can delete the note object from the array or database and remove that note from the screen.
///   </li>
/// </ul>
/// \param highlight The object of <code>SDKHighlightVO</code>.
///
- (void)didTapOnDeleteNote:(SDKHighlightVO * _Nonnull)highlight;
/// This method gets called when the user taps on the Share button on the note.
/// <ul>
///   <li>
///     Discussion: <code>highlight</code> is used to identify the selected note for which NoteController is initiated.
///     User can update the note object or can open a new view to show a list of members to which he/she can share the note.
///   </li>
/// </ul>
/// \param highlight The object of <code>SDKHighlightVO</code>.
///
- (void)didTapOnShareNote:(SDKHighlightVO * _Nonnull)highlight;
/// This method gets called when the user taps on the Post Comment button on the note.
/// <ul>
///   <li>
///     Discussion: <code>highlight</code> is used to identify the selected note for which NoteController is initiated.
///     User can update the note object or can update the view to add comments on the note view.
///   </li>
/// </ul>
/// \param highlight The object of <code>SDKHighlightVO</code>.
///
- (void)didTapOnPostNoteComment:(SDKHighlightVO * _Nonnull)highlight;
@end

@protocol HSOPFParserDelegate;
@class NSXMLParser;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11HSOPFParser")
@interface HSOPFParser : NSObject <NSXMLParserDelegate>
@property (nonatomic, copy) NSString * _Nonnull rootPath;
@property (nonatomic, copy) NSString * _Nonnull coverImagePath;
@property (nonatomic, strong) EPUBMeta * _Nonnull epubMeta;
@property (nonatomic, weak) id <HSOPFParserDelegate> _Nullable delegate;
- (void)parse:(NSString * _Nonnull)filePath error:(NSError * _Nullable * _Nullable)error;
- (void)parserDidStartDocument:(NSXMLParser * _Nonnull)parser;
- (void)parserDidEndDocument:(NSXMLParser * _Nonnull)parser;
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
- (void)parser:(NSXMLParser * _Nonnull)parser validationErrorOccurred:(NSError * _Nonnull)validationError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK19HSOPFParserDelegate_")
@protocol HSOPFParserDelegate
@optional
- (void)didOPFParsingUpdateWithPercentage:(float)progress;
@end

@protocol HSParserDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8HSParser")
@interface HSParser : NSObject <HSOPFParserDelegate>
@property (nonatomic, weak) id <HSParserDelegate> _Nullable delegate;
@property (nonatomic, copy) NSString * _Nonnull isbn;
- (void)parseEPUB:(NSString * _Nonnull)path;
- (void)didOPFParsingUpdateWithPercentage:(float)progress;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK16HSParserDelegate_")
@protocol HSParserDelegate
@optional
- (void)parsingDidBegin;
- (void)parsingDidCompleted:(EPUBBookVO * _Nonnull)book;
- (void)parsingDidFailed:(NSError * _Nonnull)error;
- (void)parsingDidUpdateWithPercentage:(NSInteger)percentage;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16HSResourceParser")
@interface HSResourceParser : NSObject <NSXMLParserDelegate>
- (void)parse:(NSString * _Nonnull)filePath error:(NSError * _Nullable * _Nullable)error;
- (void)parserDidStartDocument:(NSXMLParser * _Nonnull)parser;
- (void)parserDidEndDocument:(NSXMLParser * _Nonnull)parser;
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
- (void)parser:(NSXMLParser * _Nonnull)parser validationErrorOccurred:(NSError * _Nonnull)validationError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14HSSearchParser")
@interface HSSearchParser : NSObject
- (id _Nullable)parseSearchJSONFromFilePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15HSWebkitManager")
@interface HSWebkitManager : NSObject <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16HSXHTMLTOCParser")
@interface HSXHTMLTOCParser : NSObject <NSXMLParserDelegate>
@property (nonatomic, copy) NSArray<EPUBToc *> * _Nonnull tocs;
@property (nonatomic, copy) NSArray<EPUBTOCPage *> * _Nonnull tocPageList;
@property (nonatomic, copy) NSString * _Nonnull _isbn;
@property (nonatomic, weak) id <HSOPFParserDelegate> _Nullable _delegate;
- (nonnull instancetype)initWithBook:(EPUBBookVO * _Nonnull)book OBJC_DESIGNATED_INITIALIZER;
- (void)parseWithFilePath:(NSString * _Nonnull)filePath error:(NSError * _Nullable * _Nonnull)error;
- (void)parseEncryptedTOCWithFilePath:(NSString * _Nonnull)filePath error:(NSError * _Nullable * _Nonnull)error;
- (void)parserDidStartDocument:(NSXMLParser * _Nonnull)parser;
- (void)parserDidEndDocument:(NSXMLParser * _Nonnull)parser;
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
- (void)parser:(NSXMLParser * _Nonnull)parser validationErrorOccurred:(NSError * _Nonnull)validationError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9Help_V6_0")
@interface Help_V6_0 : NSObject
@property (nonatomic, strong) OverlayPanel_V6_V6_0 * _Nullable overlayPanel;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable descriptionTextColor;
@property (nonatomic, copy) NSString * _Nullable lineColor;
@property (nonatomic, copy) NSString * _Nullable pointerColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HighlightItem;

SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK21HighlightItemDelegate_")
@protocol HighlightItemDelegate
- (void)didSelectItemWithItem:(HighlightItem * _Nonnull)item;
@end

@protocol HighlightActionViewDelegate;

/// An Object that will be responsible for Creation of Highlight pop up,HighlightActionView is a container, which can contain multiple Items of Type HighlightItem.
/// @superclass SuperClass : UIView
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19HighlightActionView")
@interface HighlightActionView : UIView <HighlightItemDelegate>
- (nonnull instancetype)initWithItemSize:(CGSize)itemSize OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)addHighlightItem:(HighlightItem * _Nonnull)view;
- (void)observeValueFor:(NSString * _Nonnull)keyPath of:(id _Nonnull)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nonnull)change context:(void * _Nonnull)context;
- (void)didSelectItemWithItem:(HighlightItem * _Nonnull)item;
- (void)resetHighlightSelection;
- (void)remove;
@property (nonatomic) CGSize itemSize;
@property (nonatomic) NSInteger pageNumber;
@property (nonatomic, strong) SDKHighlightVO * _Nullable highlightVO;
@property (nonatomic, copy) NSArray<HighlightItem *> * _Nullable highlightItems;
@property (nonatomic, weak) id <HighlightActionViewDelegate> _Nullable delegate;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK27HighlightActionViewDelegate_")
@protocol HighlightActionViewDelegate <NSObject>
@optional
- (void)didSelectItem:(HighlightItem * _Nonnull)item;
- (void)didUpdatedHighlight;
- (void)didHighlightClosed;
@end

typedef SWIFT_ENUM(NSInteger, HighlightColor, open) {
  HighlightColorYELLOW_COLOR = 0,
  HighlightColorRED_COLOR = 1,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23HighlightColorHTML_V6_0")
@interface HighlightColorHTML_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable orange;
@property (nonatomic, copy) NSString * _Nullable pink;
@property (nonatomic, copy) NSString * _Nullable purple;
@property (nonatomic, copy) NSString * _Nullable green;
@property (nonatomic, copy) NSString * _Nullable blue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITapGestureRecognizer;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13HighlightItem")
@interface HighlightItem : UIView
@property (nonatomic, copy) void (^ _Nullable itemAction)(void);
@property (nonatomic, readonly, strong) UITapGestureRecognizer * _Nonnull singleTap;
@property (nonatomic, strong) id <HighlightItemDelegate> _Nullable delegate;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metaData;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)addItemActionButtonWithTapGesture:(UITapGestureRecognizer * _Nonnull)tapGesture;
- (void)setSelectedWithSelected:(BOOL)selected;
- (void)setEnabledWithEnabled:(BOOL)enabled;
- (void)performActin;
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HighlightOnScreen_V6_0")
@interface HighlightOnScreen_V6_0 : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable highlightColor;
@property (nonatomic, strong) ColorHTML_V6_0 * _Nullable highlightColorHTML;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19HighlightPopup_V6_0")
@interface HighlightPopup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable border;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13HighlightTool")
@interface HighlightTool : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithData:(NSDictionary<NSString *, id> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (void)setBookGuid:(NSNumber * _Nonnull)bookGuid;
- (void)setStartLineId:(NSNumber * _Nonnull)startLineId;
- (void)setCreatedOn:(NSString * _Nonnull)creationTime;
- (void)setModifiedOn:(NSString * _Nonnull)modifiedTime;
- (void)setEndLineId:(NSNumber * _Nonnull)endLineId;
- (void)setStartWordId:(NSNumber * _Nonnull)startWordId;
- (void)setEndWordId:(NSNumber * _Nonnull)endWordId;
- (void)setHighlightUUID:(NSString * _Nonnull)highlightUUID;
- (void)setHighlightColor:(NSString * _Nonnull)highlightColor;
- (void)setHighlightedText:(NSString * _Nonnull)highlightedText;
- (void)setIsImportant:(BOOL)isImportant;
- (void)setDeleted:(BOOL)deleted;
- (void)setIsNote:(BOOL)isNote;
- (void)setIsSynced:(BOOL)isSynced;
- (void)setIsShared:(BOOL)isShared;
- (void)setNoteText:(NSString * _Nonnull)noteText;
- (void)setNoteType:(NSNumber * _Nonnull)noteType;
- (void)setNoteXPosition:(NSNumber * _Nonnull)noteXPosition;
- (void)setNoteYPosition:(NSNumber * _Nonnull)noteYPosition;
- (void)setPageNumber:(NSNumber * _Nonnull)pageNumber;
- (void)setCommentsArray:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)commentsArray;
- (void)setChapterTitle:(NSString * _Nonnull)chapterTitle;
- (void)setChapterNumber:(NSNumber * _Nonnull)chapterNumber;
- (void)setCreatorId:(NSNumber * _Nonnull)creatorId;
- (void)setDateTime:(NSString * _Nonnull)dateTime;
- (void)setIsAnswered:(BOOL)isAnswered;
- (void)setSharedWithUsersArray:(NSArray<NSNumber *> * _Nonnull)sharedWithUsersArray;
- (void)setIsReceived:(BOOL)isReceived;
- (void)setIsCollabSubmitted:(BOOL)isCollabSubmitted;
- (void)setCreatorName:(NSString * _Nonnull)userName;
- (NSNumber * _Nonnull)getBookGuid SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getEndLineId SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getEndWordId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getHighlightedColor SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getHighlightedText SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNote SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSynced SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isImportant SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeleted SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNoteText SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getNoteType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCreatedOn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getModifiedOn SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getNoteXPosition SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getNoteYPosition SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getPageNumber SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getStartLineId SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getStartWordId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getServerId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getHighlightedUUID SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)getCommentsArray SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getChapterNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getChapterTitle SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nonnull)getCreatorId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isShared SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAnswered SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isReceived SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCollabSubmitted SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getSharedWithUsersArray SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIconString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStickyNote SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateTime SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCreatorName SWIFT_WARN_UNUSED_RESULT;
- (void)updateComments:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)comments;
- (void)setIsUpdate:(BOOL)isUpdate;
- (BOOL)getIsUpdate SWIFT_WARN_UNUSED_RESULT;
- (void)setIsNewhighlightCreated:(BOOL)isNewHighlightCreated;
- (BOOL)getIsNewhighlightCreated SWIFT_WARN_UNUSED_RESULT;
- (void)setIsNoteAlreadyShared:(BOOL)isNoteShared;
- (BOOL)getIsNoteAlreadyShared SWIFT_WARN_UNUSED_RESULT;
- (void)setServerID:(NSString * _Nonnull)serverID;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17Highlight_V6_V6_0")
@interface Highlight_V6_V6_0 : NSObject
@property (nonatomic, strong) HighlightPopup_V6_0 * _Nullable popup;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable selectedBorderColor;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable highlightColor;
@property (nonatomic, strong) HighlightColorHTML_V6_0 * _Nullable highlightColorHTML;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22HighlightedTextFetcher")
@interface HighlightedTextFetcher : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger MAX_TEXT_LENGTH;)
+ (NSInteger)MAX_TEXT_LENGTH SWIFT_WARN_UNUSED_RESULT;
+ (void)setMAX_TEXT_LENGTH:(NSInteger)value;
- (nonnull instancetype)initWithDbPath:(NSString * _Nonnull)dbPath OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)fetchTextWithStartWord:(NSInteger)startWord endWord:(NSInteger)endWord length:(NSInteger)length SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8IconFont")
@interface IconFont : NSObject
+ (IconFont * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)getKitaboo6_0FontWithFontSize:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSession;
@protocol ImageDownloadTaskDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17ImageDownloadTask")
@interface ImageDownloadTask : NSObject
@property (nonatomic, strong) UIImage * _Nullable image;
- (nonnull instancetype)initWithPosition:(NSInteger)position urlString:(NSString * _Nonnull)urlString session:(NSURLSession * _Nonnull)session delegate:(id <ImageDownloadTaskDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)resume;
- (void)pause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25ImageDownloadTaskDelegate_")
@protocol ImageDownloadTaskDelegate
- (void)imageDownloadedWithPosition:(NSInteger)position;
- (void)imageDownloadingFailedWithError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16ImageMarkup_V6_0")
@interface ImageMarkup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable topBarBackground;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InfomationPopOverContentViewController")
@interface InfomationPopOverContentViewController : UIViewController
/// To set Instruction Text View Top constraint.
@property (nonatomic, strong) NSLayoutConstraint * _Nullable instructionTextViewTopConstraint;
- (void)viewDidLoad;
/// The current text that is displayed by the Instruction.
/// <ul>
///   <li>
///     This property is nil by default. Assigning Instruction Description to instruction content view.
///   </li>
/// </ul>
/// \param instruction Text value that will set to Instruction content view.
///
- (void)setInstructionText:(NSString * _Nonnull)instruction;
/// To set Instruction Text Font
/// Assigning Font to Instruction Description.
/// \param font Font That will set to Instruction Text
///
- (void)setInstructionTextFont:(UIFont * _Nonnull)font;
/// The color  which will be set as background color for Instruction text
/// <ul>
///   <li>
///     This property is white by default. Assigning background color  to instruction text view.
///   </li>
/// </ul>
/// \param color Text background color
///
- (void)setInstructionTextBackgroundColor:(UIColor * _Nonnull)color;
- (CGSize)getInstructionTextSize SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)getInstructionTextLineHeight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface InfomationPopOverContentViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
/// This is used to save linkvo related to information popup
/// \param link KFLinkVO object related to information popup
///
- (void)setLinkVo:(KFLinkVO * _Nonnull)link;
/// This is used to get linkvo related to information popup
- (KFLinkVO * _Nullable)getLinkVo SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK24KAIActionButtonMain_V6_0")
@interface KAIActionButtonMain_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29KAIActionButtonSecondary_V6_0")
@interface KAIActionButtonSecondary_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable borderColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20KAIActionButton_V6_0")
@interface KAIActionButton_V6_0 : NSObject
@property (nonatomic, strong) KAIActionButtonMain_V6_0 * _Nullable main;
@property (nonatomic, strong) KAIActionButtonSecondary_V6_0 * _Nullable secondary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11KAIFIB_V6_0")
@interface KAIFIB_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable blankOutline;
@property (nonatomic, copy) NSString * _Nullable correctAnswer;
@property (nonatomic, copy) NSString * _Nullable incorrectAnswer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17KAIFlashCard_V6_0")
@interface KAIFlashCard_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable cardBackground;
@property (nonatomic, copy) NSString * _Nullable cardOutline;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable navigationIcon;
@property (nonatomic, copy) NSString * _Nullable navigationIconDisable;
@property (nonatomic, copy) NSString * _Nullable navigationText;
@property (nonatomic, copy) NSString * _Nullable bottomFlipBG;
@property (nonatomic, copy) NSString * _Nullable bottomFlipText;
@property (nonatomic, copy) NSString * _Nullable boxShadow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14KAIHeader_V6_0")
@interface KAIHeader_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21KAIInputDropdown_V6_0")
@interface KAIInputDropdown_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable outline;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, copy) NSString * _Nullable text;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK32KAILearningObjectiveSummary_V6_0")
@interface KAILearningObjectiveSummary_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable cardOutline;
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11KAIMCQ_V6_0")
@interface KAIMCQ_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable defaultIcon;
@property (nonatomic, copy) NSString * _Nullable selectedIcon;
@property (nonatomic, copy) NSString * _Nullable correctAnswer;
@property (nonatomic, copy) NSString * _Nullable incorrectAnswer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK26KAIQuestionComplexity_V6_0")
@interface KAIQuestionComplexity_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable defaultButtonOutline;
@property (nonatomic, copy) NSString * _Nullable defaultButtonText;
@property (nonatomic, copy) NSString * _Nullable selectedButtonBG;
@property (nonatomic, copy) NSString * _Nullable selectedButtonTextOutline;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8KAI_V6_0")
@interface KAI_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable floatingIconBackground;
@property (nonatomic, copy) NSString * _Nullable kaiIcon;
@property (nonatomic, copy) NSString * _Nullable canvasBackground;
@property (nonatomic, copy) NSString * _Nullable panelBackground;
@property (nonatomic, strong) KAIHeader_V6_0 * _Nullable header;
@property (nonatomic, copy) NSString * _Nullable headingText;
@property (nonatomic, copy) NSString * _Nullable subtext;
@property (nonatomic, copy) NSString * _Nullable checkboxDefault;
@property (nonatomic, copy) NSString * _Nullable checkboxSelected;
@property (nonatomic, copy) NSString * _Nullable activityIcon;
@property (nonatomic, copy) NSString * _Nullable activityTitleText;
@property (nonatomic, copy) NSString * _Nullable activityTypeText;
@property (nonatomic, copy) NSString * _Nullable divider;
@property (nonatomic, strong) KAIInputDropdown_V6_0 * _Nullable inputDropdown;
@property (nonatomic, strong) KAIQuestionComplexity_V6_0 * _Nullable questionComplexity;
@property (nonatomic, strong) KAIActionButton_V6_0 * _Nullable actionButton;
@property (nonatomic, copy) NSString * _Nullable loadingHeadingText;
@property (nonatomic, copy) NSString * _Nullable loadingSubtext;
@property (nonatomic, strong) KAIMCQ_V6_0 * _Nullable mcq;
@property (nonatomic, strong) KAIFlashCard_V6_0 * _Nullable flashCard;
@property (nonatomic, strong) KAIFIB_V6_0 * _Nullable fib;
@property (nonatomic, strong) KAILearningObjectiveSummary_V6_0 * _Nullable learningObjectiveSummary;
@property (nonatomic, copy) NSString * _Nullable disclaimer;
@property (nonatomic, copy) NSString * _Nullable bookCoverBorder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// KFAudioSyncVO refers to the data of each and every word of the book that needs to be synced for audio
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13KFAudioSyncVO")
@interface KFAudioSyncVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// KFBookVO refers to data of the Kitaboo Fixed book.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8KFBookVO")
@interface KFBookVO : KitabooBookVO
@property (nonatomic, strong) NSDictionary * _Nullable pages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// KFChapterVO refers to data of the chapter of the book
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11KFChapterVO")
@interface KFChapterVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// KFResourceVO refers to data of the glossary which are present in the page
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12KFGlossaryVO")
@interface KFGlossaryVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MarkupLinkType : NSInteger;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8KFLinkVO")
@interface KFLinkVO : NSObject
- (NSString * _Nonnull)getIconForLinkType:(enum MarkupLinkType)linkType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// KFPageVO refers to data of the page of the book
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8KFPageVO")
@interface KFPageVO : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol Kitaboo3dPlayerViewControllerDelegate;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK29Kitaboo3dPlayerViewController")
@interface Kitaboo3dPlayerViewController : UIViewController <UIGestureRecognizerDelegate, UIScrollViewDelegate, WKNavigationDelegate>
@property (nonatomic, weak) id <Kitaboo3dPlayerViewControllerDelegate> _Nullable delegate;
- (void)initDataWithVideoPath:(NSString * _Nullable)videoPath with:(KFBookVO * _Nullable)bookVO with:(KFLinkVO * _Nullable)linkVO SWIFT_METHOD_FAMILY(none);
- (void)viewDidLoad;
- (void)play;
- (UIView * _Nonnull)getInlineVideoPlayer SWIFT_WARN_UNUSED_RESULT;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK37Kitaboo3dPlayerViewControllerDelegate_")
@protocol Kitaboo3dPlayerViewControllerDelegate <NSObject>
@optional
- (void)kitaboo3dPlayerDidClosed;
- (void)kitaboo3dPlayerFullscreenButtonTappedWithIsFullScreen:(BOOL)isFullScreen linkVo:(KFLinkVO * _Nonnull)linkVo;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15Kitaboo6_0_V6_0")
@interface Kitaboo6_0_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable fontFace;
@property (nonatomic, copy) NSString * _Nullable clientName;
@property (nonatomic, copy) NSString * _Nullable bookshelfFontfamily;
@property (nonatomic, copy) NSString * _Nullable bookshelfFontfamilySemiBold;
@property (nonatomic, copy) NSString * _Nullable bookshelf_fontfamily_italic;
@property (nonatomic, copy) NSString * _Nullable font_face_Arabic;
@property (nonatomic, copy) NSString * _Nullable bookshelfFontfamilyMedium;
@property (nonatomic, copy) NSString * _Nullable loginFontfamily;
@property (nonatomic, copy) NSString * _Nullable loginFontfamilyBold;
@property (nonatomic, copy) NSString * _Nullable readerFontfamily;
@property (nonatomic, copy) NSString * _Nullable readerFontfamilyHeader;
@property (nonatomic, copy) NSString * _Nullable readerFontfamilyMedium;
@property (nonatomic, copy) NSString * _Nullable fontFaceIconColor;
@property (nonatomic, copy) NSString * _Nullable scrollbarShadow;
@property (nonatomic, copy) NSString * _Nullable deselected_checkbox_border;
@property (nonatomic, copy) NSString * _Nullable selected_checkbox_background;
@property (nonatomic, copy) NSString * _Nullable active_icon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that manage analytics.
/// @discussion The KitabooAnalyticsAdapter class is responsible to convert the data of AnalyticsManager to specific json format which is required for Kitaboo.
/// @superclass SuperClass : NSObject
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23KitabooAnalyticsAdapter")
@interface KitabooAnalyticsAdapter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18KitabooAudioPlayer")
@interface KitabooAudioPlayer : NSObject <AVAudioPlayerDelegate, UIGestureRecognizerDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK25KitabooDataSyncingManager")
@interface KitabooDataSyncingManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     The delegate of a KitabooDataSyncingManager object must adopt the KitabooDataSyncingManagerDelegate protocol.
///   </li>
///   <li>
///     KitabooDataSyncingManagerDelegate Protocol used to handle all the callbacks of KitabooDataSyncingManager Class.
///   </li>
///   <li>
///     The KitabooDataSyncingManagerDelegate protocol defines methods that allow the user to perform actions when data is saved, fetched, or synchronized successfully. The methods of this protocol are all optional.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK33KitabooDataSyncingManagerDelegate_")
@protocol KitabooDataSyncingManagerDelegate <NSObject>
@optional
/// Will be called when Fetch UGC request is succeeded.
/// note:
/// This is a delegate method used when Fetch UGC request executes successfully.
- (void)didFetchedUGCSuccessfully;
/// Will be called when Fetch UGC request fails.
/// \param error The Fetch UGC fail error of type Error.
///
- (void)didFailedToFetchUGCWithError:(NSError * _Nonnull)error;
/// Will be called when Save UGC request is succeeded.
/// note:
/// This is a delegate method used when Save UGC request executes successfully.
- (void)didSavedUGCSuccessfully;
/// Will be called when Save UGC request fails.
/// \param error The Save UGC fail error of type Error.
///
- (void)didFailedToSaveUGCWithError:(NSError * _Nonnull)error;
/// Will be called when UGC Sync request executes successfully.
/// note:
/// UGC Sync is a process that fetches UGC Data from the server and saves it to local storage, and vice versa.
- (void)didUGCSynchCompletedSuccessfully;
/// Will be called when UGC Sync request fails.
/// \param error The UGC Sync fail error of type Error.
///
- (void)didUGCSynchFailedWithError:(NSError * _Nonnull)error;
/// Will be called when save teacher annotation request executes successfully.
/// note:
/// Save Teacher Annotation is a process when a teacher wants to save student’s data with his/her reviews.
- (void)didSavedStudentAnotationSuccessfully;
/// Will be called when save student annotation request fails.
/// \param error The save student annotation fail error of type Error.
///
- (void)didFailedToSaveStudentAnotationWithError:(NSError * _Nonnull)error;
/// Will be called when save student annotation request executes successfully.
/// note:
/// Save Student Annotation is a process when a student wants to save his/her data to the teacher.
- (void)didSubmitedAnotationSuccessfully;
/// Will be called when save student annotation request fails.
/// \param error The save student annotation fail error of type Error.
///
- (void)didFailedToSubmitAnotationWithError:(NSError * _Nonnull)error;
/// Will be called when save SCORM request executes successfully.
- (void)didSavedScormDataSuccessfully;
/// Will be called when save SCORM request is succeeded.
/// \param bookID The book ID for which save SCORM is successful.
///
/// \param scormID The SCORM ID for which save SCORM is successful.
///
/// \param classID The class ID for which save SCORM is successful.
///
- (void)didSavedScormDataSuccessfullyWithBookID:(NSNumber * _Nonnull)bookID scormID:(NSString * _Nonnull)scormID classID:(NSString * _Nonnull)classID;
/// Will be called when save SCORM request fails.
/// \param error The SCORM request fail error of type Error.
///
- (void)didFailedToSaveScormWithError:(NSError * _Nonnull)error;
/// Will be called when save SCORM request is failed.
/// \param error The SCORM request fail error of type Error.
///
/// \param bookID The book ID for which save SCORM is failed.
///
/// \param scormID The SCORM ID for which save SCORM is failed.
///
/// \param classID The class ID for which save SCORM is failed.
///
- (void)didFailedToSaveScormWithError:(NSError * _Nonnull)error bookID:(NSNumber * _Nonnull)bookID scormID:(NSString * _Nonnull)scormID classID:(NSString * _Nonnull)classID;
/// Will be called when fetch SCORM data request executes successfully.
- (void)didFetchScormDataSuccessfully;
/// Will be called when fetch SCORM data request fails.
/// \param error The Fetch request fail error of type Error.
///
- (void)didFailedToFetchScormWithError:(NSError * _Nonnull)error;
/// Will be called when UGC Sync request executes successfully for the given userID and bookID.
/// \param userID The userID for which sync succeeded.
///
/// \param bookID The bookID for which sync succeeded.
///
- (void)didUGCSynchCompletedSuccessfullyWithUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when UGC Sync request fails for the given userID and bookID.
/// \param error The sync UGC request fail error of type Error.
///
/// \param userID The userID for which sync failed.
///
/// \param bookID The bookID for which sync failed.
///
- (void)didUGCSynchFailedWithError:(NSError * _Nonnull)error withUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when UGC save request executes successfully for the given userID and bookID.
/// \param userID The userID for which save succeeded.
///
/// \param bookID The bookID for which save succeeded.
///
- (void)didUGCSaveCompletedSuccessfullyWithUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when UGC save request is succeeded for given userID and bookID with filtered partial UGC.
/// \param userID The user ID for which save succeeded.
///
/// \param bookID The book ID for which save succeeded.
///
- (void)didPartialUGCSaveCompletedSuccessfullyWithUserID:(NSString * _Nonnull)userID bookID:(NSString * _Nonnull)bookID;
/// Will be called when UGC save request fails for the given userID and bookID.
/// \param error The save UGC request fail error of type Error.
///
/// \param userID The userID for which save failed.
///
/// \param bookID The bookID for which save failed.
///
- (void)didUGCSaveFailedWithError:(NSError * _Nonnull)error withUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when UGC save request is failed for given userID and bookID with filtered partial UGC.
/// \param error The save UGC request fail error of type Error.
///
/// \param userID The user ID for which save failed.
///
/// \param bookID The book ID for which save failed.
///
- (void)didPartialUGCSaveFailedWithError:(NSError * _Nonnull)error userID:(NSString * _Nonnull)userID bookID:(NSString * _Nonnull)bookID;
/// Will be called when UGC fetch request executes successfully for the given userID and bookID.
/// \param userID The userID for which fetch succeeded.
///
/// \param bookID The bookID for which fetch succeeded.
///
- (void)didUGCFetchCompletedSuccessfullyWithUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when UGC fetch request fails for the given userID and bookID.
/// \param error The save UGC request fail error of type Error.
///
/// \param userID The userID for which fetch failed.
///
/// \param bookID The bookID for which fetch failed.
///
- (void)didUGCFetchFailedWithError:(NSError * _Nonnull)error withUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when save highlight request executes successfully.
/// note:
/// This method is used for Shared/Received Highlights. When a user wants to save shared highlight list and received highlight list, they will use this method.
- (void)didSaveHighlightDataSuccessfully;
/// Will be called when save highlight request fails.
/// \param error The save highlight request fail error of type Error.
///
- (void)didSaveHighlightDataFailedWithError:(NSError * _Nonnull)error;
/// Will be called when save highlight request fails.
/// \param error The save highlight request fail error of type Error.
///
/// \param shareAndRecieveDict An object of type NSDictionary with highlight lists shareList and receiveList.
///
/// \param bookID The BookId of the current book.
///
- (void)didSaveHighlightDataFailedWithError:(NSError * _Nonnull)error withShareAndRecieveDict:(NSDictionary * _Nonnull)shareAndRecieveDict forBookID:(NSNumber * _Nonnull)bookID;
/// Will be called when save tracking request executes successfully.
/// note:
/// This method is called when a user wants to save tracked data (e.g., Highlight created, Note shared, User closes the book) for a particular given book ID. Data will be fetched from local storage and saved on the server.
- (void)didSaveTrackingDataSuccessfully;
/// Will be called when save tracking request executes successfully.
/// \param userID The user ID for which save tracking request succeeded.
///
/// \param bookID The book ID for which save tracking request succeeded.
///
- (void)didSaveTrackingDataSuccessfullyWithUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when save tracking request fails.
/// \param error The save tracking request fail error of type Error.
///
- (void)didSaveTrackingDataFailedWithError:(NSError * _Nonnull)error;
/// Will be called when save tracking request fails.
/// \param error The save tracking request fail error of type Error.
///
/// \param bookID The book ID for which save tracking request failed.
///
/// \param userID The user ID for which save tracking request failed.
///
- (void)didSaveTrackingDataFailedWithError:(NSError * _Nonnull)error forBookID:(NSNumber * _Nonnull)bookID forUserId:(NSNumber * _Nonnull)userID;
/// Will be called when AcceptOrReject request executes successfully.
/// note:
/// This method is used for acceptance and rejection of collab (Note). The <code>accepted</code> parameter decides whether the note will be accepted or rejected by the user. The <code>ugcID</code> parameter is the specific shared UGC (Collab/Note) that will be accepted or rejected.
- (void)didAcceptOrRejectDataSuccessfully;
/// Will be called when AcceptOrReject request executes successfully.
/// \param ugcID The specific UGC (Collab/Note).
///
/// \param accepted A boolean value indicating whether the note is accepted (true) or rejected (false).
///
- (void)didAcceptOrRejectDataSuccessfullyWithUGCId:(NSString * _Nonnull)ugcID andIsAccepted:(BOOL)accepted;
/// Will be called when AcceptOrReject request fails.
/// \param error The AcceptOrReject request fail error of type Error.
///
- (void)didAcceptOrRejectDataFailedWithError:(NSError * _Nonnull)error;
/// Will be called when AcceptOrReject request fails.
/// \param error The AcceptOrReject request fail error of type Error.
///
/// \param ugcID The specific UGC (Collab/Note).
///
/// \param accepted A boolean value indicating whether the note is accepted (true) or rejected (false).
///
- (void)didAcceptOrRejectDataFailedWithError:(NSError * _Nonnull)error withUGCId:(NSString * _Nonnull)ugcID andIsAccepted:(BOOL)accepted;
/// Will be called when save collab request executes successfully.
/// note:
/// This method is used for Shared Notes (Collab Data). When a user wants to save collab Data for a book, they will use this method. Data will be fetched from local storage and saved on the server.
- (void)didSaveCollabDataSuccessfully;
/// Will be called when save collab request fails.
/// \param error The save collab request fail error of type Error.
///
- (void)didSaveCollabDataFailedWithError:(NSError * _Nonnull)error;
/// Will be called when save collab request fails.
/// \param error The save collab request fail error of type Error.
///
/// \param bookID The book ID for which save collab request failed.
///
/// \param userID The user ID for which save collab request failed.
///
- (void)didSaveCollabDataFailedWithError:(NSError * _Nonnull)error forBookID:(NSNumber * _Nonnull)bookID forUserId:(NSNumber * _Nonnull)userID;
/// Will be called when save collab request executes successfully for filtered partial save collab data.
/// \param userID The user ID for which save collab request succeeded.
///
/// \param bookID The book ID for which save collab request succeeded.
///
- (void)didSavePartialCollabDataSuccessfullyWithUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when save collab request fails for filtered partial save collab data.
/// \param error The save collab request fail error of type Error.
///
/// \param userID The user ID for which save collab request failed.
///
/// \param bookID The book ID for which save collab request failed.
///
- (void)didSavePartialCollabDataFailedWithError:(NSError * _Nonnull)error withUserID:(NSString * _Nonnull)userID withBookID:(NSString * _Nonnull)bookID;
/// Will be called when fetch furthest page data request executes successfully.
/// \param bookID The bookId for which furthest page data has been fetched.
///
/// \param furthestPageData The fetched furthestPageData.
///
- (void)didFetchFurthestPageDataSuccessfullyForBookID:(NSNumber * _Nonnull)bookID withFurthestPageData:(NSString * _Nonnull)furthestPageData;
/// Will be called when fetch furthest page data request fails.
/// \param error The Fetch request fail error of type Error.
///
/// \param bookID The bookId for which fetch furthest page data has failed.
///
- (void)didFailedToFetchFurthestPageDataWithError:(NSError * _Nonnull)error forBookID:(NSNumber * _Nonnull)bookID;
/// Will be called when save furthest page data request executes successfully.
/// \param bookID The bookId for which furthest page data has been saved.
///
- (void)didSaveFurthestPageDataSuccessfully:(NSNumber * _Nonnull)bookID;
/// Will be called when save furthest page data request fails.
/// \param error The Fetch request fail error of type Error.
///
/// \param bookID The bookId for which save furthest page data has failed.
///
- (void)didFailedToSaveFurthestPageDataWithError:(NSError * _Nonnull)error forBookID:(NSNumber * _Nonnull)bookID;
@end

enum KitabooLogType : int32_t;

SWIFT_PROTOCOL_NAMED("KitabooLogProtocol")
@protocol KitabooLogProtocol
+ (void)logWithType:(enum KitabooLogType)type className:(Class _Nonnull)className message:(NSString * _Nonnull)message verboseMesage:(NSString * _Nonnull)verboseMesage;
@end


SWIFT_CLASS_NAMED("KitabooDebugLog")
@interface KitabooDebugLog : NSObject <KitabooLogProtocol>
+ (void)logWithType:(enum KitabooLogType)type className:(Class _Nonnull)className message:(NSString * _Nonnull)message verboseMesage:(NSString * _Nonnull)verboseMesage;
+ (void)enableLogsWithIsenabled:(BOOL)isenabled;
+ (void)enableVerboseWithIsenabled:(BOOL)isenabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPrintInteractionController;
@class UIPrintPaper;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21KitabooDocumentPlayer")
@interface KitabooDocumentPlayer : UIViewController <UIPrintInteractionControllerDelegate, WKNavigationDelegate, WKUIDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (UIPrintPaper * _Nonnull)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController choosePaper:(NSArray<UIPrintPaper *> * _Nonnull)paperList SWIFT_WARN_UNUSED_RESULT;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18KitabooFixedParser")
@interface KitabooFixedParser : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewCell;
@class UICollectionViewLayout;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22KitabooImageController")
@interface KitabooImageController : UIViewController <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (void)viewDidLoad;
/// Called when the scroll view zooms.
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// Returns the collection view cell for the specified index path.
/// \param collectionView The collection view.
///
/// \param indexPath The index path of the cell.
///
///
/// returns:
/// The collection view cell.
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface KitabooImageController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <ImageDownloadTaskDelegate>
- (void)imageDownloadedWithPosition:(NSInteger)position;
- (void)imageDownloadingFailedWithError:(NSError * _Nonnull)error;
@end

@class UITraitCollection;

@interface KitabooImageController (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;
- (void)viewDidLayoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)didReceiveMemoryWarning;
@end


typedef SWIFT_ENUM_NAMED(int32_t, KitabooLogType, "KitabooLogType", open) {
  KitabooLogTypeError = 0,
  KitabooLogTypeInformation = 1,
  KitabooLogTypeWarning = 2,
};

enum TEXT_ALIGNMENT : NSInteger;
enum TEXT_LINESPACING : NSInteger;
enum READER_MARGIN : NSInteger;
@class PenDrawingView;
@class SDKPentoolVO;
@class TextSearchResult;
@class SDKTextAnnotationVO;
@class PrintPageButton;
@class WatermarkHolderView;

SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK16RendererProtocol_")
@protocol RendererProtocol
@optional
- (BOOL)openHighlightView:(HighlightActionView * _Nonnull)highlightView onPageNo:(NSInteger)pageNo atCoordinates:(CGPoint)coordinates SWIFT_WARN_UNUSED_RESULT;
- (void)addBookmarkView:(BookMarkView * _Nonnull)bookmarkView onPageNO:(NSInteger)pageNo;
- (void)highlight:(HighlightActionView * _Nonnull)highlightView withTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor withIsImportant:(BOOL)isImportant;
- (SDKHighlightVO * _Nonnull)getHighlightForSelectedTextWithTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor SWIFT_WARN_UNUSED_RESULT;
- (void)getHighlightForSelectedTextEpubWithTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor callback:(void (^ _Nonnull)(SDKHighlightVO * _Nonnull))callback;
- (NSString * _Nonnull)getSelectedText SWIFT_WARN_UNUSED_RESULT;
- (void)postNoteWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO;
- (void)deleteNoteWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO;
- (void)removeHighlightView;
- (void)deleteSelectedHighlight:(SDKHighlightVO * _Nonnull)highlight;
- (void)navigateToPageNumber:(NSString * _Nonnull)pageNo;
- (void)enablePagination:(BOOL)enable;
- (BOOL)isPaginationEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)enableNightMode:(BOOL)enable;
- (void)setReaderMode:(enum READER_MODE)mode;
- (void)setTextAlignment:(enum TEXT_ALIGNMENT)textAlignment;
- (void)setLineSpacing:(enum TEXT_LINESPACING)lineSpacing;
- (void)setMargin:(enum READER_MARGIN)margin;
- (void)resetReaderSetting;
- (void)resetReaderFontSetting;
- (void)setFontFamily:(NSString * _Nonnull)fontFamily;
- (void)didFontSizeChanged:(NSUInteger)fontSize;
- (void)setBrightnessForReflowable:(CGFloat)brightnessValue;
- (SDKBookmarkVO * _Nullable)getBookmarkVOForPageNo:(NSInteger)pageNo SWIFT_WARN_UNUSED_RESULT;
/// TO set Bookmark.
/// @discussion This method is used to set data/model to bookmark view. SDKBookmarkVO contains all the details about the bookmark. Eg. Text, Start Offset, End Offset etc.
/// @param bookmarkVO Object of type SDKBookmarkVO.
/// <ul>
///   <li>
///     @code
///   </li>
///   <li>
///     rendererViewController.setBookmarkVO(bookmarkVO)
///   </li>
///   <li>
///     @endcode
///   </li>
/// </ul>
- (void)setBookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// To draw highlights on given Page number.
/// <ul>
///   <li>
///     @discussion The method is used to draw highlights on given page number. Parameter <code>highlights</code> contains all the highlights of type SDKHighlightVO, which to be drawn on page.
///   </li>
///   <li>
///     @param highlights Array of type SDKHighlightVO Objects
///   </li>
///   <li>
///     @param pageNo page number of page.
///   </li>
///   <li>
///     @code
///   </li>
///   <li>
///     rendererViewController.drawHighlights(highlights, onPageNo: pageNo)
///   </li>
///   <li>
///     @endcode
///   </li>
/// </ul>
- (void)drawHighlights:(NSArray<SDKHighlightVO *> * _Nonnull)highlights onPageNo:(NSInteger)pageNo;
/// TO add Bookmark on given page.
/// *@discussion This method is used to add data/model to bookmark view, Parameter <code>bookmarks</code> contains all the elements of type SDKBookmarkVO, that contains all the details about the bookmark. Eg. Text, Start Offset, End Offset etc.
/// <ul>
///   <li>
///     @param bookmarks Array of type SDKBookmarkVO Objects.
///   </li>
///   <li>
///     @code
///   </li>
///   <li>
///     rendererViewController.addBookmark(bookmarks, onPageNo: pageNo)
///   </li>
///   <li>
///     @endcode
///   </li>
/// </ul>
- (void)addBookmark:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarks onPageNo:(NSInteger)pageNo;
/// TO get the object of SDKHighlightVO for Sticky Note Touch Point.
/// <ul>
///   <li>
///     @discussion Validate the Sticky note touch points and returns HighlightVO Object if note can be created on the touch points.
///   </li>
///   <li>
///     @param touchPoint Sticky Note touch point.
///   </li>
///   <li>
///     @return Object of type SDKHighlightVO.
///   </li>
///   <li>
///     @code
///   </li>
///   <li>
///     rendererViewController.getHighlightVOForStickyNoteTouchPoint(CGPoint(x: x, y: y))
///   </li>
///   <li>
///     @endcode
///   </li>
/// </ul>
- (SDKHighlightVO * _Nullable)getHighlightVOForStickyNoteTouchPoint:(CGPoint)touchPoint SWIFT_WARN_UNUSED_RESULT;
/// To enable drawing mode for renderer view.
/// @discussion This method permits user to perform drawing on any page based on parameter’s value. If it is YES, user will be able to draw anything on Page and in case of NO this action will not be performed.
/// note:
/// This method is not used for Epub Reflowable Books.
/// @param enabled Enable the mode by passing boolean value
/// @code
/// rendererViewController.setPenDrawingModeEnabled(true)
/// @endcode
/// <ul>
///   <li>
///     To draw anything on the canvas, simply call @c rendererViewController.drawPenDrawings(penToolArray, onPageNo: pageNo)
///   </li>
/// </ul>
- (void)setPenDrawingModeEnabled:(BOOL)enabled;
/// To enable drag box mode for renderer view for teacher review.
/// @discussion This method permits user to select multiple fibs at once on any page based on parameter’s value. If it is YES, user will be able to select fibs by draging the dotted box around the fibs on Page and in case of NO this action will not be performed.
/// note:
/// This method is not used for Epub Reflowable Books.
/// @param enabled Enable the mode by passing boolean value
/// @code
/// rendererViewController.setTeacherReviewDragBoxModeEnabled(true)
/// @endcode
- (void)setTeacherReviewDragBoxModeEnabled:(BOOL)enabled;
/// To enable drawing mode for Teacher Review.
/// @discussion This method permits user to perform drawing on any page based on parameter’s value. If it is YES, user will be able to draw anything on Page and in case of NO pen drawing will not be performed and ReviewModeEnable YES this allowed user(Teacher) to interact with Markups.
/// note:
/// This method is not used for Epub Reflowable Books.
/// @param enabled Enable the mode by passing boolean value
/// @param reviewModeEnabled Enable the mode by passing boolean value
/// @code
/// rendererViewController.setPenDrawingModeEnabled(true, withReviewModeEnable: true)
/// @endcode
- (void)setPenDrawingModeEnabled:(BOOL)enabled withReviewModeEnable:(BOOL)reviewModeEnabled;
/// To get Pen Drawing Canvas for rendered pages, The value returned from this is used in Pen Tool Controller.
/// @return Array of Pen Drawing Canvas. (For Portait Mode, It would return one canvas and for landscape mode it will return 2 canvas)
/// @code
/// rendererViewController.getPenDrawingCanvas()
/// @endcode
- (NSArray<PenDrawingView *> * _Nonnull)getPenDrawingCanvas SWIFT_WARN_UNUSED_RESULT;
/// To draw pen drawings on canvas.
/// <ul>
///   <li>
///     @discussion This method is used to draw anything on canvas. All the details related to the drawing will be contained in penToolArray objects, of type SDKPentoolVO.
///   </li>
///   <li>
///     @param penToolArray Array of SDKPentoolVO Object to be drawn on canvas
///   </li>
///   <li>
///     @param pageNo page number of canvas
///   </li>
///   <li>
///     @code
///   </li>
///   <li>
///     rendererViewController.drawPenDrawings(penToolArray, onPageNo: pageNo)
///   </li>
///   <li>
///     @endcode
///   </li>
/// </ul>
- (void)drawPenDrawings:(NSArray<SDKPentoolVO *> * _Nonnull)penToolArray onPageNo:(NSInteger)pageNo;
/// To get currently rendered pages object.
/// @return Returns currently rendered page.( Type of KFPageVO for Fixed Kitaboo and EpubPage for Epub).
/// @code
/// rendererViewController.getActivePages()
/// @endcode
- (NSArray * _Nonnull)getActivePages SWIFT_WARN_UNUSED_RESULT;
/// *To Reload Active Page.
/// *@discussion Call this method to reload the pages, This menthod can be used in any case, there reloading of pages is required
/// note:
/// This will only work for Kitaboo Fixed books.
/// <ul>
///   <li>
///     @code
///   </li>
///   <li>
///     rendererViewController.reloadPages()
///   </li>
///   <li>
///     @endcode
///   </li>
/// </ul>
- (void)reloadPages;
/// *To highlight Text on page.
/// <ul>
///   <li>
///     @discussion This method is used to highlight particular text on given page with given color.
///   </li>
///   <li>
///     @param text Text to be highlighted
///   </li>
///   <li>
///     @param pageNo Page Number where text presents.
///   </li>
///   <li>
///     @param color Color of highlight.
///   </li>
///   <li>
///     @code
///   </li>
///   <li>
///     rendererViewController.highlightText(text, onPageNo: pageNo, withColor: color)
///   </li>
///   <li>
///     @endcode
///   </li>
/// </ul>
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
/// *To highlight text on page
/// <ul>
///   <li>
///     @param text Text to be highlighted
///   </li>
///   <li>
///     @param color Color of highlight
///   </li>
///   <li>
///     @param selectedWordColor Color of selected word
///   </li>
///   <li>
///     @param searchResultArray is the TextSearchResult array
///   </li>
/// </ul>
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color withSelectedWordHighlightColor:(NSString * _Nonnull)selectedWordColor withSearchArray:(NSArray<TextSearchResult *> * _Nonnull)searchResultArray withSelectedResult:(TextSearchResult * _Nonnull)searchResult;
/// Returns Next Search Result status for navigating
- (BOOL)isNextSearchResultAvailable SWIFT_WARN_UNUSED_RESULT;
/// Returns Previous Search Result status for navigating
- (BOOL)isPreviousSearchResultAvailable SWIFT_WARN_UNUSED_RESULT;
/// Returns Last Previous Search Result status of Page for navigating
- (BOOL)isLastPreviousSearchResult SWIFT_WARN_UNUSED_RESULT;
/// Returns Last Next Search Result status of Page for navigating
- (BOOL)isLastNextSearchResult SWIFT_WARN_UNUSED_RESULT;
/// To move to next selected search
- (void)moveToNextSelectedSearch;
/// To move to previous selected search
- (void)moveToPreviousSelectedSearch;
/// Returns Next Search Result status for navigating
- (BOOL)isNextSearchResultAvailableFor:(TextSearchResult * _Nonnull)searchResult SWIFT_WARN_UNUSED_RESULT;
/// Returns Last Previous Search Result status of Page for navigating
- (BOOL)isPreviousSearchResultAvailableFor:(TextSearchResult * _Nonnull)searchResult SWIFT_WARN_UNUSED_RESULT;
/// To move to next selected search
- (void)moveToNextSelectedSearchFor:(TextSearchResult * _Nonnull)searchResult;
/// To move to previous selected search
- (void)moveToPreviousSelectedSearchFor:(TextSearchResult * _Nonnull)searchResult;
/// *To highlight text on page
/// <ul>
///   <li>
///     @param1 text Text to be highlighted
///   </li>
///   <li>
///     @param2 pageNo Page number
///   </li>
///   <li>
///     @param3 color Color of highlight
///   </li>
///   <li>
///     @param4 paragraph Paragraph of highlight
///   </li>
/// </ul>
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color withParagraph:(NSString * _Nonnull)paragraph;
/// *To highlight text with frame on page.
/// <ul>
///   <li>
///     @discussion This method is used to add highlight on given page number with highlight color and given frame. Currently this is used for Audio Sync feature.
///   </li>
///   <li>
///     @param1 frame Frame to be highlighted on the page.
///   </li>
///   <li>
///     @param2 pageNo Page Number where text will be highlighted.
///   </li>
///   <li>
///     @param3 color Color of highlight.
///   </li>
/// </ul>
- (void)highlightTextWithFrame:(CGRect)frame onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
/// *To highlight sentence with frames on page for same group id.
/// <ul>
///   <li>
///     @discussion This method is used to add highlight on given page number with highlight color and given frames. Currently this is used for Audio Sync feature.
///   </li>
///   <li>
///     @param1 frames Frames to be highlighted on the page.
///   </li>
///   <li>
///     @param2 pageNo Page Number where sentence will be highlighted.
///   </li>
///   <li>
///     @param3 color Color of highlight.
///   </li>
/// </ul>
- (void)highlightSentenceWithWordFrames:(NSArray * _Nonnull)frames onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
- (void)highlightSentenceWithWordFramesForTTS:(NSArray * _Nonnull)frames onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
/// *To update the color of word & sentence highlight on page.
/// <ul>
///   <li>
///     @discussion This method is used to update the highlight color for existing word & sentence. Currently this is used for Audio Sync feature.
///   </li>
///   <li>
///     @param1 color Color of highlight.
///   </li>
/// </ul>
- (void)updateBackgroundForAudioSyncFramesWithColor:(NSString * _Nonnull)color;
/// To draw Markups on page
/// <ul>
///   <li>
///     @param1 links Array of KFLinkVO Object to be drawn on page
///   </li>
///   <li>
///     @param2 pageNo Page number of canvas
///   </li>
/// </ul>
- (void)drawMarkups:(NSArray<KFLinkVO *> * _Nonnull)links onPageNo:(NSInteger)pageNo;
/// To add Inline Video on page.
/// <ul>
///   <li>
///     @discussion Inline video refers to a video that need to added on page at a specific position , Parameter <code>view</code> is used to add a view  for Inline Video Player on the page.
///   </li>
///   <li>
///     @param1 view Inline Video Player view to add on page.
///   </li>
///   <li>
///     @param2 frame Frame of Inline Video Player’s view.
///   </li>
///   <li>
///     @param3 pageNo Page Number.
///   </li>
/// </ul>
- (void)addInLineVideo:(UIView * _Nonnull)view atRect:(CGRect)frame onPageNO:(NSInteger)pageNo;
/// To add MultiLinkController on page.
/// <ul>
///   <li>
///     @discussion This method is used to add/show MultiLinkController on given page number with respective to the position of given source view, multiLinkController is object of type UIViewController which will be added.
///   </li>
///   <li>
///     @param1 multiLinkController Object of type UIViewController.
///   </li>
///   <li>
///     @param2 sourceView To add MultiLinkController with respective Position of source View.
///   </li>
///   <li>
///     @param3 pageNo Page Number
///   </li>
/// </ul>
- (void)addMultiLinkController:(UIViewController * _Nonnull)multiLinkController atSourceView:(UIView * _Nonnull)sourceView onPageNO:(NSInteger)pageNo;
/// To add Instruction mark up Popup on page.
/// <ul>
///   <li>
///     @discussion This method is used to add/show Instruction Popup on given page number with respective to the position of given source view, instructionPopupController is object of type UIViewController which will be added.
///   </li>
///   <li>
///     @param1 instructionPopupController Object of type UIViewController.
///   </li>
///   <li>
///     @param2 sourceView To add Instruction mark up with respective Position of source View.
///   </li>
///   <li>
///     @param3 pageNo Page Number
///   </li>
/// </ul>
- (void)addInstructionPopup:(UIViewController * _Nonnull)instructionPopupController atSourceView:(UIView * _Nonnull)sourceView onPageNO:(NSInteger)pageNo;
/// To draw FIBs (Objects Of Type HDFIB) on page
/// <ul>
///   <li>
///     @param1 fibs Array of FIB (Objects Of Type HDFIB) to be drawn on page
///   </li>
///   <li>
///     @param2 pageNo Page number of canvas.
///   </li>
/// </ul>
- (void)drawFIBs:(NSArray * _Nonnull)fibs onPageNo:(NSInteger)pageNo;
/// To add review view on FIBs for teacher review on page.
/// <ul>
///   <li>
///     @param1 fibVo View to be added on fib
///   </li>
/// </ul>
- (void)addReviewViewOnFib:(SDKFIBVO * _Nonnull)fibVo;
/// To remove review view on FIBs for teacher review from page.
/// <ul>
///   <li>
///     @param1 pageNo Page number of canvas.
///   </li>
/// </ul>
- (void)removeFibReviewViewOnPageNo:(NSInteger)pageNo;
/// To Open Highlight Popup on given page number.
/// <ul>
///   <li>
///     @discussion  This method is used to open Highlight Popup on given page number at the particular coordinates with Rect of highlighted text. And returns Boolen value, to know if highlight is shown or not. Highlight is shown for YES value and not shown for NO value.
///   </li>
/// </ul>
/// note:
/// This will only work for Kitaboo Fixed type books.
/// <ul>
///   <li>
///     @param1 pageNo Page number of page
///   </li>
///   <li>
///     @param2 coordinates Coordinates on the page where highlight view needs to be shown.
///   </li>
///   <li>
///     @param3 highlightedTextRect Coordinates of highlighted text.
///   </li>
/// </ul>
- (BOOL)openHighlightView:(HighlightActionView * _Nonnull)highlightView onPageNo:(NSInteger)pageNo atCoordinates:(CGPoint)coordinates withHighlightedTextRect:(CGPoint)highlightedTextRect SWIFT_WARN_UNUSED_RESULT;
/// To set the color for shared Highlight/Notes.
/// <ul>
///   <li>
///     @discussion This method is used to set color to that Highlight or note, which is shared to any user. If the hexColor is nil then the default color ugc will be applied.
///   </li>
///   <li>
///     @param1 hexColor is hex color for shared Highlight/Notes.
///   </li>
/// </ul>
- (void)setColorForSharedUGC:(NSString * _Nonnull)hexColor;
/// To set Book Orientation Mode, whether it is Portrait or Landscape.
/// @param bookOrientation Orientation Mode.
- (void)setBookOrientationMode:(enum BookOrientationMode)bookOrientation;
/// To get Book Orientation Mode.
/// @return Book Orientation Mode.
- (enum BookOrientationMode)getBookOrientationMode SWIFT_WARN_UNUSED_RESULT;
/// To get SDKHighlightVO Object for StickyNote with Default Position (Center of Page in case of Landscape Left Page/or Portait Mode, and Center Left Position in case of Landscape mode right mode).
/// @return Returns Object of type SDKHighlightVO.
- (SDKHighlightVO * _Nullable)getHighlightVOForStickyNoteWithDefaultPosition SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     To get SDKHighlightVO Object for StickyNote with Default Position (Center of Page in case of Landscape Left Page/or Portait Mode, and Center Left Position in case of Landscape mode right mode). This method is used only for Kitaboo epub fixed books.
///   </li>
/// </ul>
- (void)getHighlightVOForStickyNoteWithDefaultPositionWithCallBack:(void (^ _Nonnull)(SDKHighlightVO * _Nullable, NSError * _Nullable))callback;
/// To get TextAnnotationVO Object with Default Position.
/// @return Returns Object of type SDKTextAnnotationVO.
- (SDKTextAnnotationVO * _Nullable)getTextAnnotationVOWithDefaultPosition SWIFT_WARN_UNUSED_RESULT;
/// To draw TextAnnotations on page.
/// @discussion The method is used to draw TextAnnotations on given page number. First Parameter contains all the text annotation of type SDKTextAnnotationVO, which to be drawn on page.
/// @param1 textAnnotation Array of SDKTextAnnotationVO Objects.
/// @param2 pageNo page number of canvas.
- (void)drawTextAnnotation:(NSArray<SDKTextAnnotationVO *> * _Nonnull)textAnnotation onPageNo:(NSInteger)pageNo;
/// To add new created TextAnnotation.
/// @discussion This method is used to add newly created text annotation. SDKTextAnnotationVO object has all the details about the text annotation eg. Text, Font Name, Font Size, Meta Data etc.
/// @param1 sdkTextAnnotationVO object of newly created SDKTextAnnotationVO
- (void)addTextAnnotation:(SDKTextAnnotationVO * _Nonnull)sdkTextAnnotationVO;
/// To exit textAnnotation mode.
- (void)exitTextAnnotationMode;
/// To delete text annotation.
- (void)deleteTextAnnotation;
/// To remove the text annotation without saving.
- (void)removeTextAnnotationModeWithoutSave;
/// To update the alignment of the text in the text annotation.
/// @param1 alignment object to set alignment of the text in the text annotation
- (void)updateTextAnnotationAlignment:(NSTextAlignment)alignment;
/// To update the text color of the text and the background color of the text annotation.
/// @param1 background object to update the background color of the text annotation.
/// @param2 textColor object to update the text color of the text annotation
- (void)updateTextAnnotationWithBackground:(UIColor * _Nonnull)background withTextColor:(UIColor * _Nonnull)textColor;
/// To set the Vertical margin For Reflowable Epub Books
/// @discussion This method is used to set Vertical margin For Reflowable Epub Books i.e,top and bottom.
/// @param1 marginValue Object is the integer value to be set.
- (void)setVerticalMarginForReflowableEpubBook:(NSNumber * _Nonnull)marginValue;
/// This method is used to set Zoom Scale to Default.
- (void)resetZoomScaleToDefault;
/// To draw protractor drawings on canvas.
/// @discussion This method is used to draw protractor on canvas. All the details related to the drawing will be contained in protractorArray objects, of type SDKProtractorVO.
/// @param1 protractorArray Array of SDKProtractorVO Object to be drawn on canvas
/// @param2 pageNo Page number of canvas
- (void)drawProtractorDrawings:(NSArray * _Nonnull)protractorArray onPageNo:(NSInteger)pageNo;
/// To get the FIBView for linkID.
/// @param1 linkID linkID of FIBView.
/// @return FIBView.
- (UIView * _Nullable)getFIBViewForLinkId:(NSInteger)linkID SWIFT_WARN_UNUSED_RESULT;
/// To add Print page view on given page number.
/// @discussion This method is responsible for managing PrintView on the respective Page.
/// @param1 printPageView Object of type PrintPageView.
/// @param2 pageNo Page Number where PrintPage view should be added.
- (void)addPrintPageView:(PrintPageButton * _Nonnull)printPageView onPageNO:(NSInteger)pageNo;
/// To get the Page Image for Page Number.
/// @param1 pageNo Page Number of page.
/// @return Image of Page.
- (UIImage * _Nullable)getPageImageToPrintForPageNumber:(NSInteger)pageNo SWIFT_WARN_UNUSED_RESULT;
/// To get the print Pages for Page Numbers with a watermark text on it.
/// @param1 watermarkText text to be added on page to print.
/// @param2 textColor Watermark text color.
/// @param3 pageNumbers Page Number of page.
- (void)printPagesWithWatermark:(NSString * _Nonnull)watermarkText withTextColor:(NSString * _Nonnull)textColor forPageNumbers:(NSArray<NSNumber *> * _Nonnull)pageNumbers withCallback:(void (^ _Nonnull)(id _Nullable))callback;
/// To get the print Pages for Page Numbers with a watermark text on it.
/// - Parameters:
/// - watermarkText: Text to be added on page to print.
/// - textColor: Watermark text color.
/// - customPages: Custom Page Numbers.
/// - isCurrentPage: Current Page.
/// - callback: Callback function.
- (void)printPagesWithWatermarkWithWatermark:(NSString * _Nonnull)watermarkText textColor:(NSString * _Nonnull)textColor forCustomPageNumbers:(NSString * _Nonnull)customPages forCurrentPage:(BOOL)isCurrentPage callback:(void (^ _Nonnull)(id _Nullable))callback;
/// To configure the view with current settings by exiting the print mode.
- (void)exitPrintMode;
/// To add WaterMark on page.
/// @discussion This method is responsible for adding WaterMark on the respective Page.
/// @param1 watermarkHolderView Object of type WatermarkHolderView.
/// @param2 pageNo Page Number where WaterMark should be added.
- (void)addWatermark:(WatermarkHolderView * _Nonnull)watermarkHolderView onPageNumber:(NSInteger)pageNo;
- (void)updateUGC:(NSArray<UGC *> * _Nonnull)UGCs onPageNo:(NSInteger)pageNo;
- (void)disableTwoPageSeperation:(BOOL)disableSeperation;
/// TO get selected text for Epub books.
/// @discussion This method is used to get selected text on the Page.
/// note:
/// This method will only work for Epub Books.
- (void)getSelectedTextForEpub:(void (^ _Nonnull)(NSString * _Nonnull))callback;
/// To enable teacher review mode.
/// @discussion This method is used to enable the teacher review mode with student submitted page array.
/// note:
/// This method will only work for PDF Books.
- (void)enableTeacherReviewModeWithPageArray:(NSArray<NSString *> * _Nonnull)pageArray;
/// To disable teacher review mode.
/// @discussion This method is used to disable the teacher review mode.
/// note:
/// This method will only work for PDF Books.
- (void)disableTeacherReviewMode;
- (void)addWatermarkImageOnEpub:(NSString * _Nonnull)watermarkImagePath onPageNumber:(NSInteger)pageNo;
- (void)set3dVideoModeEnabled:(BOOL)enabled;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25TextHighlightViewDelegate_")
@protocol TextHighlightViewDelegate
@optional
- (void)didBeginPan;
- (void)didEndPanAt:(CGRect)targetFrame viewsDifference:(CGFloat)viewsDifference presentStart:(CGFloat)presentStart presentEnd:(CGFloat)presentEnd previousStart:(CGFloat)previousStart previousEnd:(CGFloat)previousEnd startingTextSelectionPointY:(CGFloat)startingTextSelectionPointY;
- (void)didClickOnSaveButton;
- (void)didClickOnNoteButton;
- (void)didTapOutside;
- (void)performSearchFor:(NSString * _Nonnull)searchString;
- (void)loadWebViewDictionaryWith:(NSString * _Nonnull)dicID word:(PdfWordExtractVO * _Nonnull)word selectedWordDictionaryData:(NSData * _Nonnull)selectedWordDictionaryData;
- (void)didClickONDeleteNoteButton;
- (UIColor * _Nonnull)colorForTextSelectionView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21KitabooPageController")
@interface KitabooPageController : UIViewController <HDUserResizableTextDelegate, RendererProtocol, TextHighlightViewDelegate, UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)removePageViewImage;
/// Adds an instruction popup at the specified source view on the given page number.
/// \param instructionPopupController The view controller for the instruction popup.
///
/// \param sourceView The source view where the instruction popup should be added.
///
/// \param pageNo The page number where the instruction popup should be added.
///
- (void)addInstructionPopup:(UIViewController * _Nonnull)instructionPopupController atSourceView:(UIView * _Nonnull)sourceView onPageNO:(NSInteger)pageNo;
/// Opens the highlight view on a specific page at given coordinates.
/// \param highlightView The highlight action view.
///
/// \param pageNo The page number.
///
/// \param coordinates The coordinates of the highlight view.
///
///
/// returns:
/// A boolean value indicating whether the highlight view was opened successfully.
- (BOOL)openHighlightView:(HighlightActionView * _Nonnull)highlightView onPageNo:(NSInteger)pageNo atCoordinates:(CGPoint)coordinates SWIFT_WARN_UNUSED_RESULT;
/// Returns the color for the text selection view.
///
/// returns:
/// The color for the text selection view.
- (UIColor * _Nonnull)colorForTextSelectionView SWIFT_WARN_UNUSED_RESULT;
/// Opens the highlight view on a specific page at given coordinates with highlighted text rect.
/// \param highlightView The highlight action view.
///
/// \param pageNo The page number.
///
/// \param coordinates The coordinates of the highlight view.
///
/// \param highlightedTextRect The rect of the highlighted text.
///
///
/// returns:
/// A boolean value indicating whether the highlight view was opened successfully.
- (BOOL)openHighlightView:(HighlightActionView * _Nonnull)highlightView onPageNo:(NSInteger)pageNo atCoordinates:(CGPoint)coordinates withHighlightedTextRect:(CGPoint)highlightedTextRect SWIFT_WARN_UNUSED_RESULT;
/// Removes the highlight view.
- (void)removeHighlightView;
/// Deletes the selected highlight.
/// \param highlight The SDKHighlightVO object representing the highlight to be deleted.
///
- (void)deleteSelectedHighlight:(SDKHighlightVO * _Nonnull)highlight;
/// Highlights the text with the specified text color, background color, and importance.
/// \param highlightView The highlight action view.
///
/// \param textColor The text color.
///
/// \param backgroundColor The background color.
///
/// \param isImportant A boolean value indicating whether the highlight is important.
///
- (void)highlight:(HighlightActionView * _Nonnull)highlightView withTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor withIsImportant:(BOOL)isImportant;
/// Returns the SDKHighlightVO object for the selected text with the specified text color and background color.
/// \param textColor The text color.
///
/// \param backgroundColor The background color.
///
///
/// returns:
/// The SDKHighlightVO object.
- (SDKHighlightVO * _Nonnull)getHighlightForSelectedTextWithTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the selected text.
///
/// returns:
/// The selected text as a string.
- (NSString * _Nonnull)getSelectedText SWIFT_WARN_UNUSED_RESULT;
/// Draws the highlights on the specified page.
/// \param highlights An array of highlights to be drawn.
///
/// \param pageNo The page number on which the highlights should be drawn.
///
- (void)drawHighlights:(NSArray<SDKHighlightVO *> * _Nonnull)highlights onPageNo:(NSInteger)pageNo;
/// Posts a note with the specified highlight.
/// \param highlightVO The SDKHighlightVO object representing the highlight.
///
- (void)postNoteWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO;
/// Deletes the note associated with the specified highlight.
/// \param highlightVO The SDKHighlightVO object representing the highlight.
///
- (void)deleteNoteWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO;
/// Sets the pen drawing mode enabled or disabled.
/// \param enabled A boolean value indicating whether to enable or disable the pen drawing mode.
///
- (void)setPenDrawingModeEnabled:(BOOL)enabled;
/// Sets the teacher review drag box mode enabled or disabled.
/// \param enabled A boolean value indicating whether to enable or disable the teacher review drag box mode.
///
- (void)setTeacherReviewDragBoxModeEnabled:(BOOL)enabled;
/// Sets the pen drawing mode enabled or disabled with the teacher review mode enabled or disabled.
/// \param enabled A boolean value indicating whether to enable or disable the pen drawing mode.
///
/// \param reviewModeEnabled A boolean value indicating whether the teacher review mode is enabled or disabled.
///
- (void)setPenDrawingModeEnabled:(BOOL)enabled withReviewModeEnable:(BOOL)reviewModeEnabled;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// Called when the pan gesture ends at the target frame.
/// \param targetFrame The target frame.
///
/// \param startViewEndViewDifference The difference between the start view and end view.
///
/// \param presentStart The present start value.
///
/// \param presentEnd The present end value.
///
/// \param previousStart The previous start value.
///
/// \param previousEnd The previous end value.
///
/// \param startingTextSelectionPointY The starting text selection point Y value.
///
- (void)didEndPanAt:(CGRect)targetFrame viewsDifference:(CGFloat)startViewEndViewDifference presentStart:(CGFloat)presentStart presentEnd:(CGFloat)presentEnd previousStart:(CGFloat)previousStart previousEnd:(CGFloat)previousEnd startingTextSelectionPointY:(CGFloat)startingTextSelectionPointY;
- (void)didClickOnSaveButton;
- (void)didTapOutside;
- (void)didClickOnNoteButton;
- (void)performSearchFor:(NSString * _Nonnull)searchString;
- (void)didClickONDeleteNoteButton;
/// Draws the text annotation on the specified page number.
/// \param annotation The array of SDKTextAnnotationVO to be drawn.
///
/// \param pageNo The page number on which the text annotation should be drawn.
///
- (void)drawTextAnnotation:(NSArray<SDKTextAnnotationVO *> * _Nonnull)annotation onPageNo:(NSInteger)pageNo;
/// Determines whether the user resizable view should begin editing.
/// \param userResizableView The HDUserResizableTextView object.
///
///
/// returns:
/// A boolean value indicating whether the user resizable view should begin editing.
- (BOOL)userResizableViewShouldBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView SWIFT_WARN_UNUSED_RESULT;
/// Called when the value of the user resizable view has changed.
/// \param userResizableView The HDUserResizableTextView object.
///
- (void)userResizableViewDidValueChanged:(HDUserResizableTextView * _Nonnull)userResizableView;
/// Called when the user resizable view has begun editing.
/// \param userResizableView The HDUserResizableTextView object.
///
- (void)userResizableViewDidBeginEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
/// Called when the user resizable view has ended editing.
/// \param userResizableView The HDUserResizableTextView object.
///
- (void)userResizableViewDidEndEditing:(HDUserResizableTextView * _Nonnull)userResizableView;
- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@property (nonatomic, readonly) BOOL shouldAutorotate;
- (void)setBookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO;
/// Get the page image to print for the specified page number.
/// \param pageNo The page number.
///
///
/// returns:
/// The image to print.
- (UIImage * _Nullable)getPageImageToPrintForPageNumber:(NSInteger)pageNo SWIFT_WARN_UNUSED_RESULT;
/// Draw pen drawings on a specific page.
/// \param penToolArray The array of pen tool drawings.
///
/// \param pageNo The page number.
///
- (void)drawPenDrawings:(NSArray<SDKPentoolVO *> * _Nonnull)penToolArray onPageNo:(NSInteger)pageNo;
/// Draw markups on a specific page.
/// \param links The array of markups.
///
/// \param pageNo The page number.
///
- (void)drawMarkups:(NSArray<KFLinkVO *> * _Nonnull)links onPageNo:(NSInteger)pageNo;
/// Draw FIBs on a specific page.
/// \param fibs The array of FIBs.
///
/// \param pageNo The page number.
///
- (void)drawFIBs:(NSArray * _Nonnull)fibs onPageNo:(NSInteger)pageNo;
/// Add a review view on a FIB.
/// \param fibVo The FIB VO.
///
- (void)addReviewViewOnFib:(SDKFIBVO * _Nonnull)fibVo;
/// Removes the TeacherReviewFibView from the specified page number.
/// \param pageNo The page number.
///
- (void)removeFibReviewViewOnPageNo:(NSInteger)pageNo;
/// Adds an in-line video view to the specified page number.
/// \param view The video view to be added.
///
/// \param frame The frame of the video view.
///
/// \param pageNo The page number.
///
- (void)addInLineVideo:(UIView * _Nonnull)view atRect:(CGRect)frame onPageNO:(NSInteger)pageNo;
- (void)addMultiLinkController:(UIViewController * _Nonnull)viewController atSourceView:(UIView * _Nonnull)sourceView onPageNO:(NSInteger)pageNo;
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color withSelectedWordHighlightColor:(NSString * _Nonnull)selectedWordColor withSearchArray:(NSArray<TextSearchResult *> * _Nonnull)searchResultArray withSelectedResult:(TextSearchResult * _Nonnull)searchResult;
/// Highlights the text within the specified frame on a specific page with the specified color.
/// \param frame The frame to highlight.
///
/// \param pageNo The page number.
///
/// \param color The color of the highlight.
///
- (void)highlightTextWithFrame:(CGRect)frame onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
/// Highlights the sentence with word frames for text-to-speech on a specific page with the specified color.
/// \param frames The word frames.
///
/// \param pageNo The page number.
///
/// \param color The color of the highlight.
///
- (void)highlightSentenceWithWordFramesForTTS:(NSArray * _Nonnull)frames onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
/// Highlights the sentence with word frames on a specific page with the specified color.
/// \param frames The word frames.
///
/// \param pageNo The page number.
///
/// \param color The color of the highlight.
///
- (void)highlightSentenceWithWordFrames:(NSArray * _Nonnull)frames onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
/// Updates the background color for audio sync frames with the specified color.
/// \param color The color of the background.
///
- (void)updateBackgroundForAudioSyncFramesWithColor:(NSString * _Nonnull)color;
/// Draw protractor drawings on a specific page.
/// \param protractorArray An array of protractor drawings.
///
/// \param pageNo The page number.
///
- (void)drawProtractorDrawings:(NSArray * _Nonnull)protractorArray onPageNo:(NSInteger)pageNo;
/// Get FIB view for link ID.
/// \param linkID The link ID.
///
///
/// returns:
/// The FIB view with the specified link ID.
- (UIView * _Nullable)getFIBViewForLinkId:(NSInteger)linkID SWIFT_WARN_UNUSED_RESULT;
/// Add watermark to the page.
/// \param waterMarkHolderView The watermark holder view.
///
/// \param pageNo The page number.
///
- (void)addWatermark:(WatermarkHolderView * _Nonnull)waterMarkHolderView onPageNumber:(NSInteger)pageNo;
/// Update UGCs on a specific page.
/// \param UGCs An array of UGCs.
///
/// \param pageNo The page number.
///
- (void)updateUGC:(NSArray<UGC *> * _Nonnull)UGCs onPageNo:(NSInteger)pageNo;
/// Handle accessibility scroll.
/// \param direction The scroll direction.
///
///
/// returns:
/// A boolean value indicating whether the scroll was successful.
- (BOOL)accessibilityScroll:(UIAccessibilityScrollDirection)direction SWIFT_WARN_UNUSED_RESULT;
@end

@class UIPageViewController;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13KitabooReader")
@interface KitabooReader : UIViewController <UIGestureRecognizerDelegate, UIPageViewControllerDataSource, UIPageViewControllerDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
- (void)pageViewController:(UIPageViewController * _Nonnull)pageViewController willTransitionToViewControllers:(NSArray<UIViewController *> * _Nonnull)pendingViewControllers;
- (UIPageViewControllerSpineLocation)pageViewController:(UIPageViewController * _Nonnull)pageViewController spineLocationForInterfaceOrientation:(UIInterfaceOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;
- (void)viewDidLayoutSubviews;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface KitabooReader (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23KitabooRenderingManager")
@interface KitabooRenderingManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class WKWindowFeatures;

/// A custom web player for Kitaboo SDK.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16KitabooWebPlayer")
@interface KitabooWebPlayer : UIViewController <UIAlertViewDelegate, WKNavigationDelegate, WKUIDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21KitabooScormWebPlayer")
@interface KitabooScormWebPlayer : KitabooWebPlayer
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class NetworkDataTaskOperation;
@class NSHTTPURLResponse;

SWIFT_CLASS_NAMED("KitabooServiceInterface")
@interface KitabooServiceInterface : NSObject
/// To initialize class.
/// <h3>Usage Example:</h3>
/// \code
/// [[KitabooServiceInterface alloc] initWithBaseURLString:@BASE_URL_STRING clientID:@API_CLIENT_ID];
///
/// \endcode\param baseURLString base url of sevice
///
/// \param clientID client id
///
- (nonnull instancetype)initWithBaseURLString:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBaseURLString:(NSString * _Nonnull)baseURLString clientID:(NSString * _Nonnull)clientID isMultisessionEnabled:(BOOL)isMultisessionEnabled OBJC_DESIGNATED_INITIALIZER;
/// For authenticating user credential , use for login purpose.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface authenticateWithUserName:signInUserNameTextField.text password:signInPasswordTextField.text successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *addUUIDerror) {
///
/// }];
///
/// \endcode\param userName username to authenticate.
///
/// \param password password to authenticate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)authenticateWithUserName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// For authenticating user credential , use for login purpose.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface authenticateWithUserName:signInUserNameTextField.text encryptedPassword:signInPasswordTextField.text successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *addUUIDerror) {
///
/// }];
///
/// \endcode\param userName username to authenticate.
///
/// \param encryptedPassword encrypted password to authenticate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)authenticateWithUserNameAndEncryptedPassword:(NSString * _Nonnull)userName encryptedPassword:(NSString * _Nonnull)encryptedPassword successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)registerAccessCodeUser:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password accessCode:(NSString * _Nonnull)accessCode successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// For authenticating user credential , use for login purpose.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface authenticateGoogleClassRoomUserWithTokenSchema:tokenSchema successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param tokenSchema googleClassRoomTokenSchema to authenticate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)authenticateGoogleClassRoomUserWithTokenSchema:(NSDictionary<NSString *, id> * _Nonnull)tokenSchema successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// When user token gets expired then to renew/refresh it use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface refreshUserTokenWithToken:_user.userToken successHandler:^(NSDictionary<NSString *,id> * dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken userToken to refresh.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)refreshUserTokenWithToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To send user pushnotification token to server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface registerDeviceToken:_user.userToken,apnsToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param apnsToken current users device Token
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)registerDeviceToken:(NSString * _Nonnull)userToken apnsToken:(NSString * _Nonnull)apnsToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To deregister user from pushnotification  to server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deRegisterDeviceToken:_user.userToken,apnsToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param apnsToken current users device Token
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deRegisterDeviceToken:(NSString * _Nonnull)userToken apnsToken:(NSString * _Nonnull)apnsToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get  push notification list for a user from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface getNotificationListWithUserToken:_user.userToken userId:_user.userId successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError *error) {
///
/// }
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To delete all  push notifications for a user from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface deleteNotificationListWithUserToken:_user.userToken userId:_user.userId successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To mark notifications as read  from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface markReadNotificationListWithUserToken:@"" userId:@"" messageIds:@[@""] markAll:false successHandler:^(NSDictionary *dic)
/// {
/// NSLog(@"%@",dic);
/// } failureHandler:^(NSError *error)
/// {
/// NSLog(@"error %@",error);
///
/// }];
///
/// \endcode\param userId current users id
///
/// \param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)markReadNotificationListWithUserToken:(NSString * _Nonnull)userToken userId:(NSString * _Nonnull)userId messageIds:(NSArray<NSString *> * _Nonnull)messageIds markAll:(BOOL)markAll successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getUserInfo:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// This service is used, when user token gets expired and user wants to get NetworkDataTaskOperation to renew the expired token.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface renewUserTokenWithToken:_user.userToken successHandler:^(NSDictionary<NSString *,id> * dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken userToken to refresh.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)renewUserTokenWithToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To Fetch UGC for a book from given timestamp.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUGCOperation:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] timestamp:[dbManager getLastSyncedDateForBookID:bookID ForUserID:userID] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchUGCOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Fetch UGC for a book from given timestamp.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUGC:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] timestamp:[dbManager getLastSyncedDateForBookID:bookID ForUserID:userID] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCData:userToken bookId:@"" ugcData:data successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get kaltura video url for playing kaltura video use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getKalturaSessionURL:_user.userToken entryID:linkVo.url type:TYPE_KALTURA successHandler:^(NSDictionary *dict)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param entryID url of link
///
/// \param type as of now we are passing 1
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getKalturaSessionURL:(NSString * _Nonnull)userToken entryID:(NSString * _Nonnull)entryID type:(NSInteger)type successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCData:userToken bookId:@"" ugcData:data successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCDataOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Save UGC for a book with Meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveUGCDataOperation:userToken bookId:@"" ugcData:data metaDataObject:metaData successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookId Id of book for which UGC has to save
///
/// \param ugcData ugcData which has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveUGCDataOperation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId ugcData:(NSData * _Nonnull)ugcData metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save shared data with meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabData:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] metaDataObject:metaData successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save shared data with meta Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabDataForPagination:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] metaDataObject:metaData successHandler:^(NSDictionary<NSString *,id> * json, NSData *successedcollabData) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param metaData Meta Data
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabDataForPagination:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId metaDataObject:(KitabooServiceMetaData * _Nullable)metaData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSData * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Validate access code.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface validateAccessCode:@"1234" successHandler:^(NSDictionary *json){
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param accessCode access code to validate.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)validateAccessCodeWith_userToken:(NSString * _Nonnull)_userToken withAccessCode:(NSString * _Nonnull)accessCode successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To Change password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface changePasswordForUserWith:userToken username:@"abc@gmail.com" password:@"abc" toNewPassword:@"def" newPassword:@"def" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param username username of user for which password has to change
///
/// \param password password of user which has to change
///
/// \param toNewPassword toNewPassword which has to set
///
/// \param newPassword newPassword which has to set
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)changePasswordForUserWith:(NSString * _Nonnull)userToken username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password toNewPassword:(NSString * _Nonnull)newPassword successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To Change password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface changePasswordForUserWith:userToken username:@"abc@gmail.com" encryptedPassword:@"abc" toEncryptedNewPassword:@"def" newPassword:@"def" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param username username of user for which password has to change
///
/// \param encryptedPassword password of user which has to change
///
/// \param encryptedNewPassword toNewPassword which has to set
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)changePasswordForUserWith:(NSString * _Nonnull)userToken username:(NSString * _Nonnull)username encryptedPassword:(NSString * _Nonnull)encryptedPassword toEncryptedNewPassword:(NSString * _Nonnull)encryptedNewPassword successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To reset password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface resetPasswordWithUsername:@"abc@gmail.com" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param username username of user for which password has to reset
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getLocalizationFileUrlWithClient_id:(NSString * _Nonnull)client_id successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To reset password of user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface resetPasswordWithUsername:@"abc@gmail.com" successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param username username of user for which password has to reset
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)resetPasswordWithUsername:(NSString * _Nonnull)username successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nullable))failureHandler;
/// To fetch book class information(for example how many teachers or students assigned for class).
/// <h3>Usage Example:</h3>
/// \code
/// [[kitabooServiceInterface fetchBookClassInfo:userToken bookIds:(@[[NSString stringWithFormat:@"%@",bookID]]) successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param bookIds id of book for which class information has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookClassInfo:(NSString * _Nonnull)userToken bookIds:(NSArray<NSString *> * _Nonnull)bookIds successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To download all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param state state offline/online
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)downloadAllBooks:(NSString * _Nonnull)userToken withState:(NSString * _Nonnull)state withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To delete all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)deleteAllBooks:(NSString * _Nonnull)userToken withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To save Session history.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param SessionHistory List of books id and time stamp
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveSessionHistory:(NSString * _Nonnull)userToken withSessionHistory:(NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull)SessionHistory successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To get updated list of books being assigned to the user, if user do not send time stamp then currnet time is taken by default.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param bookIdAndTypeDict Dictionary of bookIds and type(UPDATE,NEW,DELETE). If not sent then all three will be return
///
/// \param timeStamp time from which user needs to fetch books that has been added
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)refreshBookList:(NSString * _Nonnull)userToken withBookIdAndType:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict withTimeStamp:(NSString * _Nullable)timeStamp successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To mark book as favourite.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param book bookid which needs to be marked as favourite
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)markFavourite:(NSString * _Nonnull)userToken withFavouriteBook:(NSDictionary<NSString *, id> * _Nonnull)book successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To unmark book as favourite.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param book bookid which needs to be unmarked as favourite
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)unmarkFavourite:(NSString * _Nonnull)userToken withFavouriteBook:(NSString * _Nonnull)book successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To getTOCList api when open more info screen and get chapters.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param serviceUrl service base url
///
/// \param userToken current users userToken
///
/// \param book bookid which needs to be get chapters
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getTOCList:(NSString * _Nonnull)serviceUrl userToken:(NSString * _Nonnull)userToken withBook:(NSString * _Nonnull)book assetType:(NSString * _Nonnull)assetType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSString * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To getTOCListDataFromURL api when open more info screen and get chapters.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param serviceUrl service base url
///
/// \param userToken current users userToken
///
/// \param book bookid which needs to be get chapters
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getTOCListDataFromURL:(NSString * _Nonnull)serviceUrl userToken:(NSString * _Nonnull)userToken withBook:(NSString * _Nonnull)book assetType:(NSString * _Nonnull)assetType successHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSInteger))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch favourite books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchFavourite:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch booklist for user.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookList:_user.userToken successHandler:^(NSDictionary *jsonDic)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken.
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookList:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch book list for category .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookListForCategory:_user.userToken withCategoryName:@"abc" withStartIndex:nil withEndIndex:nil successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name for which book list has to fetch
///
/// \param startIndex Index from which booklist has to start(optional)
///
/// \param endIndex Index on which booklist has to end(optional)
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategory:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch category list.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCategoryList:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCategoryList:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch books of collection present in category.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBooksForCollection:_user.userToken withCategoryName:@"abc" withCollectionName:@"ab" withStartIndex:nil withEndIndex:nil successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name which has collection of books
///
/// \param collectionName collection name for which book list has to fetch
///
/// \param startIndex Index from which booklist has to start(optional)
///
/// \param endIndex Index on which booklist has to end(optional)
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBooksForCollection:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withCollectionName:(NSString * _Nonnull)collectionName withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch recently viewed books.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchRecentlyViewedBooks:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the responsere
///
- (NetworkDataTaskOperation * _Nonnull)fetchRecentlyViewedBooks:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch user settings.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUserSettings:[json objectForKey:@"userToken"] successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchUserSettings:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch shared data and list of users with whom data has been shared.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabShare:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabShare:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabUGC:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCollabUGC:userToken bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to fetch
///
/// \param timestamp to fetch ugc from given time
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCollabUGC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId timestamp:(NSString * _Nonnull)timestamp bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch teacher annotations.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchTeacherAnnotations:_user.userToken bookId:@"101" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which teacher annotation has to fetch
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchTeacherAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch student annotations.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchStudentAnnotations:_user.userToken bookId:@"101" learnerId:@"111" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which student annotation has to fetch
///
/// \param learnerId learner id of student
///
/// \param bookVersion book version number
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchStudentAnnotations:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId bookVersion:(NSString * _Nonnull)bookVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To save shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveColllabData:userToken collabData:unsynedCollabUGCdata bookId:[bookID stringValue] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveColllabData:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save highlights .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveHighlightData:userToken highlightData:data bookId:[bookID stringValue] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param highlightData highlight data which has to save
///
/// \param bookId Id of book for which data has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)saveHighlightData:(NSString * _Nonnull)userToken highlightData:(NSData * _Nonnull)highlightData bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// The data which is needed to be tracked (for a instance opening note , deleting note etc.), should be tracked with this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveTrackingData:userToken bookId:[bookID stringValue] analyticsData:data successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to save
///
/// \param analyticsData analytics data which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveTrackingData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId analyticsData:(NSData * _Nonnull)analyticsData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch Analytics Data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getAnalyticsData:userToken bookId:[bookID stringValue] classId:classId] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which data has to be fetched
///
/// \param classId Id of class for which data has to be fetched
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)getAnalyticsData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSNumber * _Nonnull)classId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch search response for word.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface elasticSearch:userToken searchData:jsonBodyData successHandler:^(NSDictionary *dict) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param searchData the data on which search action needs to be performed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)elasticSearch:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)newElasticSearch:(NSString * _Nonnull)microServiceUrl userToken:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getBookshelfStateData:(NSString * _Nonnull)microServiceUrl userToken:(NSString * _Nonnull)userToken feedBackData:(NSData * _Nullable)feedBackData type:(NSString * _Nonnull)type successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)bookLevelSearch:(NSString * _Nonnull)microServiceUrl userToken:(NSString * _Nonnull)userToken searchData:(NSData * _Nonnull)searchData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To chnage user information such as name,profile photo,cover photo use this service.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface updateUserDetailsWith:_user.userToken profilePhotoData:profileData coverPhotoData:coverData firstName:@"abc" lastName:@"def" successHandler:^{
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param profilePhotoData profile photo data to update
///
/// \param coverPhotoData cover photo data to update
///
/// \param firstName first name to update
///
/// \param lastName last name to update
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)updateUserDetailsWith:(NSString * _Nonnull)userToken profilePhotoData:(NSData * _Nonnull)profilePhotoData coverPhotoData:(NSData * _Nonnull)coverPhotoData firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save accepted or rejected shared data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface acceptRejectCollab:userToken collabData:data successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param collabData shared data which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)acceptRejectCollab:(NSString * _Nonnull)userToken collabData:(NSData * _Nonnull)collabData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To download book url.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface downloadBookURLWith:userToken bookId:bookID formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)downloadBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadMediaBookURLWith:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadMediaBookURLServerlessWith:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadBookOnlineURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)downloadBookOnlineServerlessURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType timeStamp:(int64_t)timeStamp successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)authenticateHLSPackageWith:(int64_t)packageId baseURL:(NSString * _Nonnull)baseURL userToken:(NSString * _Nonnull)userToken timeStamp:(int64_t)timeStamp successHandler:(void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To delete book url, when book is deleted from local storage then to mark it as deleted we use this.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface releaseBookURLWith:userToken bookId:cell.bookID formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)releaseBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// When book is downloaded then to mark it as consumed use this.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiveInterface consumeBookURLWith:userToken bookId:[[path lastPathComponent] integerValue] formatType:bookInfo.formatName successHandler:^(NSDictionary *dic){
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book which is to download
///
/// \param formatType As of now for all books we pass ‘IPAD’
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)consumeBookURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save teacher annotations for a student.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveTeacherAnnotation:userToken annotation:data bookId:[NSString stringWithFormat:@"%d",bookId.intValue] learnerId:learnerId successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param annotation annotation which has to save
///
/// \param bookId Id of book for which annotation has to save
///
/// \param learnerId learner id of student
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveTeacherAnnotation:(NSString * _Nonnull)userToken annotation:(NSData * _Nonnull)annotation bookId:(NSString * _Nonnull)bookId learnerId:(NSString * _Nonnull)learnerId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save student annotations(such as pentool,FIB).
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface submitAnotation:userToken bookId:[NSString stringWithFormat:@"%ld",[bookID integerValue]] successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which annotation has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)submitAnotation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To save SCORM data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface saveSCORMData:userToken bookId:[NSString stringWithFormat:@"%@",bookID] scormData:data  successHandler:^(NSDictionary *json) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param bookId Id of book for which SCORM data has to save
///
/// \param scormData scormData which has to save
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)saveSCORMData:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId scormData:(NSData * _Nonnull)scormData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch SCORM data.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchScromData:userToken classID:classId bookId:[NSString stringWithFormat:@"%@",bookID] successHandler:^(NSDictionary *json)  {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param classID Id of class
///
/// \param bookId Id of book for which SCORM data has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchScromData:(NSString * _Nonnull)userToken classID:(NSString * _Nonnull)classID bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)getBookDetails:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)getBookDetailsWithID:(NSString * _Nonnull)bookId userToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)forceUpdate:(NSString * _Nonnull)appVersion successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)packageURLWith:(NSString * _Nonnull)userToken bookId:(NSInteger)bookId formatType:(NSString * _Nonnull)formatType currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchReadingSpeedInformation:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchLastPageAccessed:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)saveLastPageAccessed:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId lastPageData:(NSString * _Nonnull)lastPageData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchFurthestPage:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)saveFurthestPageData:(NSString * _Nonnull)userToken furthestPageData:(NSData * _Nonnull)furthestPageData successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategorySecured:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)fetchBooksForCollectionSecured:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withCollectionName:(NSString * _Nonnull)collectionName withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)getBookDetailsSecured:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchRecentlyViewedBooksSecured:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch favourite books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchFavouriteSecured:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To get updated list of books being assigned to the user, if user do not send time stamp then currnet time is taken by default.
/// <h3>Usage Example:</h3>
/// \code
///
/// \endcode\param userToken current users userToken
///
/// \param bookIdAndTypeDict Dictionary of bookIds and type(UPDATE,NEW,DELETE). If not sent then all three will be return
///
/// \param timeStamp time from which user needs to fetch books that has been added
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)refreshBookListSecured:(NSString * _Nonnull)userToken withBookIdAndType:(NSDictionary<NSString *, id> * _Nonnull)bookIdAndTypeDict withTimeStamp:(NSString * _Nullable)timeStamp currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (NetworkDataTaskOperation * _Nonnull)refreshCategoryListSecured:(NSString * _Nonnull)userToken categoryIdList:(NSDictionary<NSString *, id> * _Nonnull)categoryIdList currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To download all books.
/// <h3>Usage Example:</h3>
/// \code
///
///
/// \endcode\param userToken current users userToken
///
/// \param state state offline/online
///
/// \param bookList List of books of which download url is needed
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)downloadAllBooksSecured:(NSString * _Nonnull)userToken withState:(NSString * _Nonnull)state withBookList:(NSDictionary<NSString *, NSArray *> * _Nonnull)bookList currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch book list for category .
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchBookListForCategoryV1:_user.userToken withCategoryName:@"abc" successHandler:^(NSDictionary * jsonDic) {
///
/// } failureHandler:^(NSError * error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param categoryName category name for which book list has to fetch
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchBookListForCategoryV1:(NSString * _Nonnull)userToken withCategoryName:(NSString * _Nonnull)categoryName categoryId:(NSString * _Nullable)categoryId withStartIndex:(NSNumber * _Nullable)startIndex withEndIndex:(NSNumber * _Nullable)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// To fetch category list.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchCategoryListV1:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (NetworkDataTaskOperation * _Nonnull)fetchCategoryListV1:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
- (void)fetchPrefferedLanguage:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)savePrefferedLanguage:(NSString * _Nonnull)userToken languauge:(NSString * _Nonnull)languauge successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchBookTOC:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (NetworkDataTaskOperation * _Nonnull)fetchStudentMarkupReport:(NSString * _Nonnull)userToken bookId:(NSString * _Nonnull)bookId classId:(NSString * _Nonnull)classId chapters:(NSString * _Nonnull)chapters emailID:(NSString * _Nonnull)emailID userIds:(NSString * _Nonnull)userIds successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To get screenshot count from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getScreenshotCount:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getScreenshotCountWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To update screenshot count from server..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface updateScreenshotCount:_user.userToken,screenshotCount successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param screenshotCount screenshot count to update on server
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)updateScreenshotCountWithUserToken:(NSString * _Nonnull)userToken screenshotCount:(NSInteger)screenshotCount successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get list of all active sessions..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchAllDeviceSession:_user.userToken successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchAllDeviceSessionWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get delete session..
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deleteSession:_user.userToken, uuId:uuid, successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param uuId uuId of the session to be deleted
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteSessionWithUserToken:(NSString * _Nonnull)userToken uuId:(NSString * _Nonnull)uuId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To   get delete all sessions.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface deleteAllSession:_user.userToken, successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current users userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)deleteAllSessionWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)refreshUserTokenWithDate:(NSString * _Nonnull)userToken currentDate:(NSDate * _Nullable)currentDate successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To fetch user partner details.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface fetchUserPartnerDetailsWithUserToken: userToken startIndex: startIndex endIndex: endIndex successHandler:^(NSDictionary *json)
/// {
///
/// } failureHandler:^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param startIndex Index from which booklist has to start
///
/// \param endIndex Index on which booklist has to end
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)fetchUserPartnerDetailsWithUserToken:(NSString * _Nonnull)userToken startIndex:(NSString * _Nonnull)startIndex endIndex:(NSString * _Nonnull)endIndex successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To switch partner.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface switchPartner: userToken partnerReferenceId: partnerReferenceId successHandler: ^(NSDictionary *json)
/// {
///
/// } failureHandler: ^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param partnerReferenceId partner reference Id for which the books has to be fetched
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)switchPartnerWithUserToken:(NSString * _Nonnull)userToken partnerReferenceId:(NSString * _Nonnull)partnerReferenceId successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
/// To switch partner.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooServiceInterface getImmersiveReaderToken: userToken successHandler: ^(NSDictionary *json)
/// {
///
/// } failureHandler: ^(NSError *error) {
///
/// }];
///
/// \endcode\param userToken current user userToken
///
/// \param successHandler Handler which gets executed when get success in the response
///
/// \param failureHandler Handler which gets executed when get failure in the response
///
- (void)getImmersiveReaderTokenWithUserToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getUserPrintDataWithUserToken:(NSString * _Nonnull)userToken bookID:(NSString * _Nonnull)bookID successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)saveUserPrintData:(NSString * _Nonnull)userToken lastPageData:(NSMutableDictionary * _Nonnull)lastPageData bookID:(NSString * _Nonnull)bookID successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getCustomePDFPages:(NSString * _Nonnull)userToken pagesData:(NSMutableDictionary * _Nonnull)pagesData bookID:(NSString * _Nonnull)bookID successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (void)getKAIStatusWithMicroServiceUrl:(NSString * _Nonnull)microServiceUrl userToken:(NSString * _Nonnull)userToken successHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(NSError * _Nonnull))failureHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Object that will be contains additional infromation to hit a service e.g. initialisedValue or actionType.
SWIFT_CLASS_NAMED("KitabooServiceMetaData")
@interface KitabooServiceMetaData : NSObject
/// A Value from where service is being Initialised.E.g.Reader or Bookshelf etc.
/// <h3>Usage Example:</h3>
/// \code
/// kitabooServiceMetaData.initialisedValue = "A";
///
/// \endcode
@property (nonatomic, copy) NSString * _Nonnull initialisedValue;
/// A Value which will represent the service action type. E.g. Send or Resend.
/// <h3>Usage Example:</h3>
/// \code
/// kitabooServiceMetaData.actionType = "S";
///
/// \endcode
@property (nonatomic, copy) NSString * _Nonnull actionType;
/// To initialize KitabooServiceMetaData class.
/// <h3>Usage Example:</h3>
/// \code
/// let kitabooServiceMetaData = KitabooServiceMetaData();
///
/// \endcode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("KitabooUGC")
@interface KitabooUGC : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface KitabooUGC (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, strong) NSNumber * _Nullable bookID;
@property (nonatomic, copy) NSDate * _Nullable createdOn;
@property (nonatomic, strong) NSNumber * _Nullable creatorId;
@property (nonatomic, copy) NSString * _Nullable creatorName;
@property (nonatomic, copy) NSString * _Nullable displayNum;
@property (nonatomic, strong) NSNumber * _Nullable isAnswered;
@property (nonatomic, strong) NSNumber * _Nullable isCollabSubmitted;
@property (nonatomic, strong) NSNumber * _Nullable isImportant;
@property (nonatomic, strong) NSNumber * _Nullable isReceived;
@property (nonatomic, strong) NSNumber * _Nullable isShare;
@property (nonatomic, strong) NSNumber * _Nullable isSubmitted;
@property (nonatomic, strong) NSNumber * _Nullable isSynced;
@property (nonatomic, strong) NSNumber * _Nullable linkID;
@property (nonatomic, copy) NSString * _Nullable localID;
@property (nonatomic, strong) NSObject * _Nullable metaData;
@property (nonatomic, copy) NSDate * _Nullable modifiedDate;
@property (nonatomic, copy) NSString * _Nullable pageID;
@property (nonatomic, copy) NSString * _Nullable serverID;
@property (nonatomic, strong) NSNumber * _Nullable status;
@property (nonatomic, strong) NSObject * _Nullable ugcData;
@property (nonatomic, strong) NSNumber * _Nullable ugcType;
@property (nonatomic, strong) NSNumber * _Nullable userID;
@end


/// KitabooUser is responsible for storing user information.
/// <ul>
///   <li>
///     KitabooUser defines all the parameters/atrributes which are required to store user information(Ex- emailID, name, id, profile pic etc..).
///   </li>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KitabooUser")
@interface KitabooUser : NSObject
@property (nonatomic, copy) NSString * _Nullable clientID;
@property (nonatomic, copy) NSString * _Nullable coverPhotoURL;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable level;
@property (nonatomic, copy) NSString * _Nullable profilePicURL;
@property (nonatomic, copy) NSArray * _Nullable roles;
@property (nonatomic, copy) NSString * _Nullable userID;
@property (nonatomic, copy) NSString * _Nullable userToken;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, copy) NSString * _Nullable userName;
@property (nonatomic, copy) NSString * _Nullable userLoggedInTime;
@property (nonatomic, copy) NSString * _Nullable serverUserID;
@property (nonatomic, copy) NSString * _Nullable partnerReferenceId;
/// Initiate KitabooUser with userInfo, userToken and role.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] role:[json objectForKey:@"role"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param role Is string value which specify role of user (teacher/student).
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken role:(NSString * _Nonnull)role OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo and userToken.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo and userToken.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithUserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] userLoggedInTime:[json objectForKey:@"timestamp"]];
///
/// \endcode\param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param loggedInTime Is string value which is user login time received from server.
///
- (nonnull instancetype)initWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken userLoggedInTime:(NSString * _Nullable)loggedInTime OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo, userToken and userID.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithuUerId:@"123456" UserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"]];
///
/// \endcode\param userId User id of the user
///
/// \param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken OBJC_DESIGNATED_INITIALIZER;
/// Initiate KitabooUser with userInfo, userToken and userID.
/// <h3>Usage Example:</h3>
/// \code
/// [kitabooUser initWithuUerId:@"123456" UserInfo :[json objectForKey:@"user"] userToken:[json objectForKey:@"userToken"] userLoggedInTime:[json objectForKey:@"timestamp"]];
///
/// \endcode\param userId User id of the user
///
/// \param userInfo Is the dictionary value which contains user information.
///
/// \param userToken Is string value which is received from server.
///
/// \param loggedInTime Is string value of user login time which is received from server.
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo userToken:(NSString * _Nonnull)userToken userLoggedInTime:(NSString * _Nullable)loggedInTime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserToken:(NSString * _Nonnull)userToken userID:(NSString * _Nonnull)userID firstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18KitabooVideoPlayer")
@interface KitabooVideoPlayer : UIViewController <HDMediaBookNarrationSpeedControllerDelegate, UIGestureRecognizerDelegate>
/// A flag indicating whether the view is loaded or not.
@property (nonatomic, getter=isViewLoaded) BOOL viewLoaded;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Updates the video player’s reading speed rate when the narration speed value changes.
- (void)didNarrationSpeedValueChanges:(HDMediaBookModel * _Nullable)mediaBookModel;
/// Dismisses the narration speed controller when the cancel button is tapped.
- (void)didTapOnCancel;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)g shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)og SWIFT_WARN_UNUSED_RESULT;
- (void)removeMoviePlayer;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21KitabooVimeoExtractor")
@interface KitabooVimeoExtractor : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK24KitabooWebPlayerDelegate_")
@protocol KitabooWebPlayerDelegate
@optional
- (void)webPLayerDidClosed;
- (void)webPlayerDidFailedWithError:(NSError * _Nonnull)error;
- (void)webPlayerWillCloseWithScormData:(NSString * _Nonnull)scormData activityName:(NSString * _Nonnull)activityName scormID:(NSString * _Nonnull)scormID pageID:(NSString * _Nonnull)pageID;
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createKitabooPlayerWebViewWith:(WKWebViewConfiguration * _Nonnull)configuration for:(WKNavigationAction * _Nonnull)navigationAction SWIFT_WARN_UNUSED_RESULT;
@end


/// An Object that manage a YouTube Player.
/// <ul>
///   <li>
///     @discussion The KitabooYTPlayer class defines a Player to play a YouTube Video. You implement a delegate to handle, when YouTube player closed.
///   </li>
///   <li>
///     @superclass SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15KitabooYTPlayer")
@interface KitabooYTPlayer : UIViewController
@property (nonatomic) BOOL isInline;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol LinkDropDownViewControllerDelegate;

/// An object that manages the content for links in Dropdown.
/// A LinkDropDownViewController object manages the content of the link in the dropdown list and allows the selection of items from the dropdown list.
SWIFT_CLASS_NAMED("LinkDropDownViewController")
@interface LinkDropDownViewController : UIViewController <UIGestureRecognizerDelegate>
/// The object that acts as the delegate of the LinkDropDownViewController.
/// The delegate must adopt the LinkDropDownViewControllerDelegate protocol. The delegate is not retained.
@property (nonatomic, strong) id <LinkDropDownViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Initializes an allocated LinkDropDownViewController object with DropDown Items and a DropDown.
/// \param dropDownItemsArray DropDown Items
///
/// \param dropDown Selected DropDown
///
- (nonnull instancetype)initWithDropDownData:(NSArray<NSString *> * _Nonnull)dropDownItemsArray withDropDown:(UIButton * _Nonnull)dropDown OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface LinkDropDownViewController (SWIFT_EXTENSION(Kitaboo_Reader_SDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// Methods for managing selection, close actions in a DropDown.
SWIFT_PROTOCOL_NAMED("LinkDropDownViewControllerDelegate")
@protocol LinkDropDownViewControllerDelegate
/// Tells the delegate that the specified DropDown item is now selected.
/// The delegate handles selections in this method. One of the things it can do is save the selected DropDown Text.  This method will be called when the DropDown Item is Select..
/// \param selectedText Selected DropDown Item Text.
///
/// \param dropDown Selected DropDown
///
- (void)didSelectDropDownItemWithText:(NSString * _Nonnull)selectedText forDropDown:(UIButton * _Nonnull)dropDown;
/// Tells the delegate that the specified DropDown needs to be closed.
/// Use this method to detect when a DropDown is need to removed.
- (void)didSelectActionToCloseDropDown;
@end


SWIFT_CLASS_NAMED("LocalizationHelper")
@interface LocalizationHelper : NSObject
/// Used to set the bundle for string localization.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable readerLanguageBundle;)
+ (NSBundle * _Nullable)readerLanguageBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setReaderLanguageBundle:(NSBundle * _Nullable)value;
/// This method should be called to localize the string
/// <h3>Usage Example:</h3>
/// \code
/// [LocalizationHelper localizedStringWithKey:@"A"];
///
/// \endcode\param key The key value of the localized string.
///
+ (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key tableName:(NSString * _Nonnull)tableName bundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MEDIA_PLAYER, open) {
  MEDIA_PLAYERAudio = 0,
  MEDIA_PLAYERImage = 1,
  MEDIA_PLAYERVideo = 2,
  MEDIA_PLAYERWeb = 3,
  MEDIA_PLAYERSlideshow = 4,
  MEDIA_PLAYERInlineVideo = 5,
  MEDIA_PLAYERYoutube = 6,
  MEDIA_PLAYERInlineYoutube = 7,
};

@class Top_V6_0;
@class SideBottom_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16MainToolbar_V6_0")
@interface MainToolbar_V6_0 : NSObject
@property (nonatomic, strong) Top_V6_0 * _Nullable top;
@property (nonatomic, strong) SideBottom_V6_0 * _Nullable sideBottom;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9Main_V6_0")
@interface Main_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable canvasBackground;
@property (nonatomic, copy) NSString * _Nullable navigationArrows;
@property (nonatomic, strong) MainToolbar_V6_0 * _Nullable toolbar;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19MarkupGlossary_V6_0")
@interface MarkupGlossary_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable linkLineColor;
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable iconBorderColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable languageTextColor;
@property (nonatomic, copy) NSString * _Nullable descriptionTextColor;
@property (nonatomic, copy) NSString * _Nullable synonymTextColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18MarkupHitAreaLabel")
@interface MarkupHitAreaLabel : UILabel
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MarkupLinkType, open) {
  MarkupLinkTypeNone = 0,
  MarkupLinkTypeMultiLink = 1,
  MarkupLinkTypeAudio = 2,
  MarkupLinkTypeVideo = 3,
  MarkupLinkTypeImage = 4,
  MarkupLinkTypeInput = 5,
  MarkupLinkTypeComments = 6,
  MarkupLinkTypePageLink = 7,
  MarkupLinkTypeWebLink = 8,
  MarkupLinkTypeDictera = 9,
  MarkupLinkTypeDocument = 10,
  MarkupLinkTypeAudioSync = 11,
  MarkupLinkTypeHtmlWrap = 12,
  MarkupLinkTypeDropDown = 13,
  MarkupLinkTypeSlideShow = 14,
  MarkupLinkTypeWidget = 15,
  MarkupLinkTypeGroupNotes = 16,
  MarkupLinkTypeKaltura = 17,
  MarkupLinkTypeYoutube = 18,
  MarkupLinkTypeSurvey = 19,
  MarkupLinkTypeGlossary = 20,
  MarkupLinkTypeJumpToBook = 21,
  MarkupLinkTypeImageZoom = 22,
  MarkupLinkTypeInstruction = 23,
  MarkupLinkTypeVimeoVideo = 24,
  MarkupLinkTypeTracerMedia = 25,
  MarkupLinkTypeOther = 26,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10MarkupView")
@interface MarkupView : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11Markup_V6_0")
@interface Markup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable markupIconColor;
@property (nonatomic, copy) NSString * _Nullable bookMarkupIconBorderColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An Object to get TOC controller section type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
typedef SWIFT_ENUM(NSInteger, MediaBookTOCFilter, open) {
  MediaBookTOCFilterCHAPTER = 0,
  MediaBookTOCFilterTRANSCRIPT = 1,
  MediaBookTOCFilterBOOKMARK = 2,
};

/// An Object to get TOC controller section type whether it is CHAPTER, TRANSCRIPT or BOOKMARK.
typedef SWIFT_ENUM(NSInteger, MediaBookTOCFilter_V6, open) {
  MediaBookTOCFilter_V6CHAPTER = 0,
  MediaBookTOCFilter_V6TRANSCRIPT = 1,
  MediaBookTOCFilter_V6BOOKMARK = 2,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12Message_V6_0")
@interface Message_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable borderColor;
@property (nonatomic, copy) NSString * _Nullable nameColor;
@property (nonatomic, copy) NSString * _Nullable descriptionColor;
@property (nonatomic, copy) NSString * _Nullable timeTextColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9Mode_V6_0")
@interface Mode_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable selectedTabBorder;
@property (nonatomic, strong) Day_V6_0 * _Nullable day;
@property (nonatomic, strong) Day_V6_0 * _Nullable night;
@property (nonatomic, strong) Day_V6_0 * _Nullable sepia;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21MoviePlayerController")
@interface MoviePlayerController : UIViewController <AVPlayerViewControllerDelegate, UIGestureRecognizerDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate when the player view controller begins full screen presentation.
/// \param playerViewController The player view controller.
///
/// \param coordinator The animation coordinator.
///
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController willBeginFullScreenPresentationWithAnimationCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// Notifies the delegate when the player view controller ends full screen presentation.
/// \param playerViewController The player view controller.
///
/// \param coordinator The animation coordinator.
///
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController willEndFullScreenPresentationWithAnimationCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20MyDataViewController")
@interface MyDataViewController : UIViewController <UITableViewDataSource, UITableViewDelegate>
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)didReceiveMemoryWarning;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) BOOL shouldAutorotate;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UITraitCollection * _Nonnull traitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class SubButton_V6_0;
@class SettingsV6_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11MyData_V6_0")
@interface MyData_V6_0 : NSObject
@property (nonatomic, strong) OverlayPanel_V6_V6_0 * _Nullable overlayPanel;
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable tabBg;
@property (nonatomic, copy) NSString * _Nullable tabBorder;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedTabBorder;
@property (nonatomic, copy) NSString * _Nullable selectedTextColor;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable selectedButton;
@property (nonatomic, strong) DeSelectedButton_V6_0 * _Nullable deSelectedButton;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, strong) DisabledIcon_V6_0 * _Nullable disabledIcon;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable metadataColor;
@property (nonatomic, copy) NSString * _Nullable contextualtextColor;
@property (nonatomic, copy) NSString * _Nullable descriptionColor;
@property (nonatomic, strong) SubButton_V6_0 * _Nullable subButton;
@property (nonatomic, strong) FilterPopup_V6_0 * _Nullable filterPopup;
@property (nonatomic, strong) SettingsV6_V6_0 * _Nullable settings;
@property (nonatomic, copy) NSString * _Nullable notificationCircleColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








SWIFT_CLASS_NAMED("Operation")
@interface Operation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
- (void)start;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NetworkDataTaskOperation")
@interface NetworkDataTaskOperation : Operation <NSURLSessionDataDelegate>
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)requestOperation:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)operationWithRequest:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithRequest:(NSURLRequest * _Nonnull)request andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithURL:(NSURL * _Nonnull)url withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)operationWithURL:(NSURL * _Nonnull)url andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NetworkDataTaskOperation * _Nonnull)sendRequest:(NSURLRequest * _Nonnull)request withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequest:(NSURLRequest * _Nonnull)request withCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequestWithURL:(NSURL * _Nonnull)url withSession:(NSURLSession * _Nonnull)session andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (NetworkDataTaskOperation * _Nonnull)sendRequestWithURL:(NSURL * _Nonnull)url andCompletionHandler:(void (^ _Nullable)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NetworkDataTaskOperation (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)responseData:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (void)responseJSON:(NSJSONReadingOptions)options completionHandler:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSHTTPURLResponse * _Nullable, id _Nullable, NSError * _Nullable))completionHandler;
- (void)responseJSONWithResponseString:(NSJSONReadingOptions)options completionHandler:(void (^ _Nonnull)(NetworkDataTaskOperation * _Nullable, NSHTTPURLResponse * _Nullable, id _Nullable, NSError * _Nullable, NSString * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("NetworkDownloadTaskOperation")
@interface NetworkDownloadTaskOperation : NetworkDataTaskOperation <NSURLSessionDownloadDelegate>
- (void)cancel;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9NoteLabel")
@interface NoteLabel : UILabel
@property (nonatomic, copy) NSString * _Nonnull ugcUUID;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9Note_V6_0")
@interface Note_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable backIconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconBorder;
@property (nonatomic, copy) NSString * _Nullable contextualtextColor;
@property (nonatomic, copy) NSString * _Nullable hintTextColor;
@property (nonatomic, copy) NSString * _Nullable descriptionColor;
@property (nonatomic, copy) NSString * _Nullable actionButtonColor;
@property (nonatomic, strong) OverlayPanel_V6_V6_0 * _Nullable actionButtonColorDisabled;
@property (nonatomic, copy) NSString * _Nullable metadataColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK25NumberLocalizationHandler")
@interface NumberLocalizationHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull languageCode;)
+ (NSString * _Nonnull)languageCode SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguageCode:(NSString * _Nonnull)value;
+ (void)setLanguageCodeForNumberLocalizationWithCodeWithCode:(NSString * _Nonnull)code;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
+ (NSString * _Nonnull)localizeNumberWithNumber:(id _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
/// \param fractionalPoints how many digits needed after decimal point. default is 2
///
+ (NSString * _Nonnull)localizeNumberWithNumber:(id _Nonnull)number fractionalPoints:(NSInteger)fractionalPoints SWIFT_WARN_UNUSED_RESULT;
/// To localize time in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeTime:"10:10"];
///
/// \endcode\param time time/date to be localized
///
+ (NSString * _Nonnull)localizeTimeWithTime:(NSString * _Nonnull)time SWIFT_WARN_UNUSED_RESULT;
/// To localize time in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeTime:"10:10"];
///
/// \endcode\param time time/date to be localized
///
/// \param format In which format passed time is hh:mm:ss. If you don’t pass default format is mm:ss
///
+ (NSString * _Nonnull)localizeTimeWithTime:(NSString * _Nonnull)time format:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// To localize number in system language
/// <h3>Usage Example:</h3>
/// \code
/// [NumberLocalizationHandler localizeNumber:"10"];
///
/// \endcode\param number number to be localized
///
+ (NSString * _Nonnull)localizeNumberWithoutFormatWithNumber:(id _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class ScrollView_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10Other_V6_0")
@interface Other_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, strong) Brightness_V6_0 * _Nullable brightness;
@property (nonatomic, strong) Mode_V6_0 * _Nullable mode;
@property (nonatomic, strong) ScrollView_V6_0 * _Nullable scrollView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20OverlayPanel_V6_V6_0")
@interface OverlayPanel_V6_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable opacity;
@property (nonatomic, copy) NSString * _Nullable backgroundHTML;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PageSequence, open) {
  PageSequenceCURRENT_PAGE = 0,
  PageSequencePREVIOUS_PAGE = 1,
  PageSequenceNEXT_PAGE = 2,
};

@class UGCLabel;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16PdfLineExtractVO")
@interface PdfLineExtractVO : NSObject
@property (nonatomic) NSInteger lineID;
@property (nonatomic) float lineY;
@property (nonatomic) float lineX;
@property (nonatomic) NSInteger paraID;
@property (nonatomic, copy) NSArray<PdfWordExtractVO *> * _Nonnull extractWords;
@property (nonatomic, copy) NSString * _Nonnull lineText;
@property (nonatomic) CGRect transformedFrame;
@property (nonatomic) CGRect highlightedRect;
@property (nonatomic) CGRect savedHighlightedRect;
- (void)addExtractedWord:(PdfWordExtractVO * _Nonnull)word;
- (CGRect)getFrameOnCropBox SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getStartWordId SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getEndWordId SWIFT_WARN_UNUSED_RESULT;
- (PdfWordExtractVO * _Nullable)getClosestWordToPosition:(float)xPosition SWIFT_WARN_UNUSED_RESULT;
- (PdfWordExtractVO * _Nullable)getWordThatContainsPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
- (PdfWordExtractVO * _Nullable)getClosestWordToRect:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
- (PdfWordExtractVO * _Nullable)getWordByWordID:(NSInteger)wordId SWIFT_WARN_UNUSED_RESULT;
- (CGRect)getSelectionRectForMinX:(CGPoint)min andMax:(CGPoint)max withStartLineID:(NSInteger)startlineID andEndLineID:(NSInteger)endLineID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getSelectionTextForMinX:(CGPoint)min andMax:(CGPoint)max withStartLineID:(NSInteger)startlineID andEndLineID:(NSInteger)endLineID SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)getHighlightForRect:(CGRect)selectedRect withBGColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UGCLabel * _Nonnull)getSelectedHighlightedViewForRect:(CGRect)selectedRect withBGColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (BOOL)checkPointWithinSelectionLine:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16PdfWordExtractVO")
@interface PdfWordExtractVO : NSObject
@property (nonatomic) NSInteger paraID;
@property (nonatomic) NSInteger lineID;
@property (nonatomic) float lineY;
@property (nonatomic) float lineH;
@property (nonatomic) NSInteger wordID;
@property (nonatomic) float wordX;
@property (nonatomic) float wordW;
@property (nonatomic, copy) NSArray * _Nullable charWidths;
@property (nonatomic, copy) NSString * _Nonnull wordText;
@property (nonatomic) CGRect frameOnCropBox;
@property (nonatomic) CGRect transformedFrame;
@property (nonatomic, strong) UIView * _Nullable highlightedView;
@property (nonatomic, strong) UIView * _Nullable savedHighlightedView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PenDrawingObject;
enum PenMode : NSInteger;

SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK24PenDrawingChangeDelegate_")
@protocol PenDrawingChangeDelegate
- (void)didCreatePenDrawing:(PenDrawingObject * _Nonnull)drawingObject;
- (void)didUpdatePenDrawing:(PenDrawingObject * _Nonnull)drawingObject;
- (void)didChangeReviewMode:(enum PenMode)penMode;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16PenDrawingObject")
@interface PenDrawingObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK33PenDrawingSelectionChangeDelegate_")
@protocol PenDrawingSelectionChangeDelegate
- (void)didChangePenDrawingSelection:(PenDrawingObject * _Nonnull)drawingObject;
- (void)deleteSelectedDrawing;
- (void)enableUndoRedoButton:(BOOL)enable;
- (void)addUndoObjects:(PenDrawingObject * _Nonnull)pendrawingObject;
- (void)deleteUndoObjects:(PenDrawingObject * _Nonnull)pendrawingObject;
- (void)addRedoObjects:(PenDrawingObject * _Nonnull)pendrawingObject;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14PenDrawingView")
@interface PenDrawingView : UIView
@property (nonatomic, weak) id <PenDrawingChangeDelegate> _Nullable delegate;
@property (nonatomic, weak) id <PenDrawingSelectionChangeDelegate> _Nullable selectionChangeDelegate;
@property (nonatomic) NSInteger pageID;
@property (nonatomic, copy) NSString * _Nonnull displayNum;
@property (nonatomic) enum DRAWING_MODE drawingMode;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)drawRect:(CGRect)rect;
@end

/// <ul>
///   <li>
///     PenMode is used to set the Type of Mode for PenToolController,
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PenMode, open) {
/// To Enable Pen Drawing, When this mode is set, Any touch on the active canvas will result in drawing on pen based on the selected pen configuation (Color,Thickness)
  PenModeDrawing = 0,
/// To Enabled Selection of existing Pen drawing on active canvas.
  PenModeSelection = 1,
/// This should be set when we need to enable Teacher Review, so Teacher can review student submitions, This is same as PenModeDrawing, but adds some additional configuation needed in Teacher Review mode.
  PenModeMarkupTap = 2,
};


/// An Object that manage a Pentool.
/// <ul>
///   <li>
///     discussion: The PenToolController class is responsible for handling customisation of a pen such as pen color, pen thickness etc. It also handles action for pentool elements.
///   </li>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17PenToolController")
@interface PenToolController : NSObject <PenDrawingChangeDelegate, PenDrawingSelectionChangeDelegate>
- (void)enableUndoRedoButton:(BOOL)enable;
/// <ul>
///   <li>
///     This method is use to set the drawing canvas, where user will draw the pen drawings.
///   </li>
///   <li>
///     discussion: User will receive canvas from RendererViewController Object by calling getPenDrawingCanvas (Will Return all active canvas). User can set canvas to drawing view.
///   </li>
///   <li>
///     code
///     penToolController.setPenDrawingCanvas(rendererView.getPenDrawingCanvas())
///   </li>
///   <li>
///     endcode
///   </li>
/// </ul>
/// \param canvasArray Pass array of Canvas on which user will draw the pen drawings.
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)didCreatePenDrawing:(PenDrawingObject * _Nonnull)drawingObject;
- (void)didUpdatePenDrawing:(PenDrawingObject * _Nonnull)drawingObject;
- (void)didChangeReviewMode:(enum PenMode)penMode;
- (void)didChangePenDrawingSelection:(PenDrawingObject * _Nonnull)drawingObject;
/// To Delete the selected drawings.
/// <ul>
///   <li>
///     discussion User can delete selected drawing objcet from array and update drawings on page/canvas.
///   </li>
///   <li>
///     code
///     penToolController.deleteSelectedDrawing()
///   </li>
///   <li>
///     endcode
///   </li>
/// </ul>
- (void)deleteSelectedDrawing;
- (void)addUndoObjects:(PenDrawingObject * _Nonnull)pendrawingObject;
- (void)addRedoObjects:(PenDrawingObject * _Nonnull)pendrawingObject;
- (void)deleteUndoObjects:(PenDrawingObject * _Nonnull)pendrawingObject;
@end


/// protocol PenToolControllerDelegate
/// <ul>
///   <li>
///     The delegate of a PenToolController object must adopt the PenToolControllerDelegate protocol.
///   </li>
///   <li>
///     PenToolControllerDelegate Protocol used to handle all the callbacks of PenToolController Class. All delegate methods are optional.The PenToolControllerDelegate protocol defines methods that allow user to perform actions when any drawing is created, updated or deleted by the user. Also when undoable status of pentool gets updated.
///   </li>
///   <li>
///     When configuring the PenToolController object, assign your delegate object to its delegate property.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK25PenToolControllerDelegate_")
@protocol PenToolControllerDelegate
/// <ul>
///   <li>
///     This method gets called when user create any drawing.
///   </li>
///   <li>
///     When user create any new pen drawing then this method gets called. User can save drawing object in database or can update view.
///   </li>
/// </ul>
/// \param drawingObject Object of SDKPentoolVO
///
- (void)didCreatePenDrawing:(SDKPentoolVO * _Nonnull)drawingObject;
/// <ul>
///   <li>
///     This method gets called when user delete/update any drawing.
///   </li>
///   <li>
///     When user delete any drawing object or redo then this method gets called. User can update drawing object in database and remove/redraw(redo) drawing and update view.
///   </li>
/// </ul>
/// \param drawingObject Object of SDKPentoolVO
///
- (void)didUpdatePenDrawing:(SDKPentoolVO * _Nonnull)drawingObject;
/// <ul>
///   <li>
///     This method gets called when user undo status is changed.
///   </li>
///   <li>
///     further undo can be done or not, And to know this Use:isUndoable method of PenToolController.
///   </li>
/// </ul>
- (void)didChangeUndoableStatus;
/// <ul>
///   <li>
///     This method gets called when user select or unselect any drawings.
///   </li>
///   <li>
///     When user select, unselecct or delete pen drawings on page then this method gets called. User can update pen drawing object status when select or unselect it or can change pentool item  property like if any object is deleted then user can enable undo button if user press on undo button then can disable it.
///   </li>
/// </ul>
- (void)didUpdatedSelectedPenDrawing;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8Pen_V6_0")
@interface Pen_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable shadow;
@property (nonatomic, copy) NSString * _Nullable selectedBorderColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19PentoolToolbar_V6_0")
@interface PentoolToolbar_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, strong) DisabledIcon_V6_0 * _Nullable disabledIcon;
@property (nonatomic, copy) NSString * _Nullable selectedIconBackground;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Thickness_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12Pentool_V6_0")
@interface Pentool_V6_0 : NSObject
@property (nonatomic, strong) PentoolToolbar_V6_0 * _Nullable toolbar;
@property (nonatomic, strong) Pen_V6_0 * _Nullable pen;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable penColor;
@property (nonatomic, strong) ColorHTML_V6_0 * _Nullable penColorHTML;
@property (nonatomic, strong) Thickness_V6_0 * _Nullable thickness;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlayerActionBarItem;

SWIFT_PROTOCOL_NAMED("PlayerItemDelegate")
@protocol PlayerItemDelegate
- (void)didPlayerActionBarSelectItem:(PlayerActionBarItem * _Nonnull)item;
@end

@protocol PlayerActionDelegate;
enum PlayerActionBarAlignment : NSInteger;
enum PlayerActionBarAlignmentMode : NSInteger;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15PlayerActionBar")
@interface PlayerActionBar : UIView <PlayerItemDelegate>
@property (nonatomic, strong) id <PlayerActionDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)addActionBarItem:(PlayerActionBarItem * _Nonnull)item withItemsWidth:(double)width withItemAlignments:(enum PlayerActionBarAlignment)alignment isTappable:(BOOL)tapable;
- (void)didPlayerActionBarSelectItem:(PlayerActionBarItem * _Nonnull)item;
- (void)resetPlayerActionBarSelection;
- (void)enableItemWithTag:(NSInteger)tag isEnabled:(BOOL)enabled;
- (void)hideItemWithTag:(NSInteger)tag isHidden:(BOOL)hidden;
- (void)changeWidthOfItem:(PlayerActionBarItem * _Nonnull)actionItem withHidden:(BOOL)hidden;
- (PlayerActionBarItem * _Nullable)getSelectedItem SWIFT_WARN_UNUSED_RESULT;
- (NSArray<PlayerActionBarItem *> * _Nonnull)getTappableItems SWIFT_WARN_UNUSED_RESULT;
- (void)setPlayerActionBarAlignmentMode:(enum PlayerActionBarAlignmentMode)alignmentMode;
@end

typedef SWIFT_ENUM(NSInteger, PlayerActionBarAlignment, open) {
  PlayerActionBarAlignmentLeft = 0,
  PlayerActionBarAlignmentRight = 1,
  PlayerActionBarAlignmentCenter = 2,
  PlayerActionBarAlignmentTop = 3,
  PlayerActionBarAlignmentBottom = 4,
};

typedef SWIFT_ENUM(NSInteger, PlayerActionBarAlignmentMode, open) {
  PlayerActionBarAlignmentModePlayerActionBarHorizontalMode = 0,
  PlayerActionBarAlignmentModePlayerActionBarVerticalMode = 1,
};


/// An Object that will be responsible for Creation of Player Action Bar Item.
/// SuperClass: UIView
SWIFT_CLASS_NAMED("PlayerActionBarItem")
@interface PlayerActionBarItem : UIView
@property (nonatomic) BOOL isEnabled;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) double width;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull metaData;
/// Initiate Item.
/// \param frame Rect for item.
///
///
/// returns:
/// An initialized view object with the specified frame.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Use this to enable/disable item.
/// \param enabled A boolean value to enable/disable the item.
///
- (void)setEnabled:(BOOL)enabled;
/// A boolean value to know item’s state (Selected/Unselected).
/// If <code>selected</code> is true, item state is Selected else Unselected.
/// \param selected A boolean value to set the item’s state.
///
- (void)setSelected:(BOOL)selected;
@end


SWIFT_PROTOCOL_NAMED("PlayerActionDelegate")
@protocol PlayerActionDelegate
@optional
- (void)didSelectedPlayerActionBar:(PlayerActionBar * _Nonnull)playerActionBar withItem:(PlayerActionBarItem * _Nonnull)item;
- (void)willResetPlayerActionBar:(PlayerActionBar * _Nonnull)playerActionBar;
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10Popup_V6_0")
@interface Popup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable header;
@property (nonatomic, copy) NSString * _Nullable contentTitle;
@property (nonatomic, copy) NSString * _Nullable divider;
@property (nonatomic, copy) NSString * _Nullable optionTextIcon;
@property (nonatomic, copy) NSString * _Nullable outlineTextButton;
@property (nonatomic, copy) NSString * _Nullable fillButton;
@property (nonatomic, copy) NSString * _Nullable fillButtonTextIcon;
@property (nonatomic, copy) NSString * _Nullable deleteButton;
@property (nonatomic, copy) NSString * _Nullable deleteButtonTextIcon;
@property (nonatomic, copy) NSString * _Nullable selectTextTick;
@property (nonatomic, copy) NSString * _Nullable sectionClassHeader;
@property (nonatomic, copy) NSString * _Nullable nonSelect;
@property (nonatomic, copy) NSString * _Nullable boxShadow;
@property (nonatomic, copy) NSString * _Nullable bookmarkPopupInstructionText;
@property (nonatomic, copy) NSString * _Nullable sortByBackground;
@property (nonatomic, copy) NSString * _Nullable titleAuthorPublishedDate;
@property (nonatomic, copy) NSString * _Nullable innerBackground;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PrintPageViewDelegate;

/// A control that executes Print page controller code in response to user interactions.
SWIFT_CLASS_NAMED("PrintPageButton")
@interface PrintPageButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The object that acts as the delegate of the PrintPageButton.
/// The delegate must adopt the PrintPageViewDelegate protocol. The delegate is not retained.
@property (nonatomic, strong) id <PrintPageViewDelegate> _Nullable delegate;
/// An unique page Identifier.
@property (nonatomic, strong) NSNumber * _Nullable pageNumber;
@end

@protocol PrintPageViewControllerDelegate;
@class UIViewPrintFormatter;

/// An object that manages printing user interface.
/// The shared instance of it represents a print job, printing page status.
/// Responding to user interactions with Print Controller.
SWIFT_CLASS_NAMED("PrintPageViewController")
@interface PrintPageViewController : UIViewController <UIPrintInteractionControllerDelegate>
/// The object that acts as the delegate of the PrintPageViewController.
/// The delegate must adopt the PrintPageViewControllerDelegate protocol.
@property (nonatomic, strong) id <PrintPageViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
/// Initializes an allocated PrintPageViewController object with Print Image.
/// \param printImage printImage of Type UIImage for print.
///
- (nonnull instancetype)initWithPrintImage:(UIImage * _Nonnull)printImage;
- (nonnull instancetype)initWithPrintFormatter:(UIViewPrintFormatter * _Nonnull)printFormatter;
- (nonnull instancetype)initWithPrintPage:(id _Nonnull)printPageData;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)printInteractionControllerDidDismissPrinterOptions:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (void)printInteractionControllerDidFinishJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (void)printInteractionControllerWillStartJob:(UIPrintInteractionController * _Nonnull)printInteractionController;
- (UIPrintPaper * _Nonnull)printInteractionController:(UIPrintInteractionController * _Nonnull)printInteractionController choosePaper:(NSArray<UIPrintPaper *> * _Nonnull)paperList SWIFT_WARN_UNUSED_RESULT;
@end


/// The delegate of a PrintPageViewController object must adopt the PrintPageViewControllerDelegate protocol.
/// PrintPageViewControllerDelegate Protocol used to handle all the callbacks of PrintPageViewController Class.The PrintPageViewControllerDelegate protocol defines a method that allow user to manage print task.
/// When configuring the PrintPageViewController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("PrintPageViewControllerDelegate")
@protocol PrintPageViewControllerDelegate
/// Tells the delegate that the PrintPageViewController is being dismissed.
/// This callback will be initialised when the user taps Print on the printing-options view or when the user dismisses the view by tapping outside it.
- (void)printPageViewControllerDidDismiss;
/// Tells the delegate that the PrintPageViewController has finished its Task .
- (void)PrintPageViewControllerDidFinishJob;
/// Tells the delegate that the device does not support printing.
- (void)deviceNotSupportsPagePrinting;
/// Tells the delegate that the Page Printed Successfully.
- (void)didPagePrintedSuccessFully;
/// Tells the delegate that the Page Printing Task failed with error.
/// \param error Instance of Error.
///
- (void)didPagePrintingFailedWithError:(NSError * _Nullable)error;
@end


/// The delegate of a PrintPageButton object must adopt the PrintPageViewDelegate protocol.
/// PrintPageViewDelegate Protocol used to handle all the callbacks of PrintPageButton Class.The PrintPageViewDelegate protocol defines a method that allows the user to manage interactions.
/// When configuring the PrintPageButton object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("PrintPageViewDelegate")
@protocol PrintPageViewDelegate
/// Tells the delegate that the specified Print Button is now Tapped.
/// \param pageNumber Selected Print Button Page Number.
///
- (void)didTapOnPrintPageWithPageNumber:(NSNumber * _Nullable)pageNumber;
@end


/// A control that use to handle Protractor selection.
/// When User selects any  button that has focus, the button performs any actions attached to it.
SWIFT_CLASS_NAMED("ProtractorSelectionButton")
@interface ProtractorSelectionButton : UIButton
/// An universally unique value that can be used to identify a selected Protractor.
@property (nonatomic, copy) NSString * _Nullable penToolUUID;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ProtractorViewControllerDelegate;

/// An object that manages Protractor behaviour.
/// A ProtractorViewController’s main responsibilities include the following:
/// <ul>
///   <li>
///     Responding to user interactions with Protractor.
///   </li>
///   <li>
///     Resizing protractor view and managing the layout of the overall interface.
///   </li>
///   <li>
///     Coordinating with protractor web content data.
///   </li>
///   <li>
///     Updating the contents of the views,  providing detailed data about the protractor.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ProtractorViewController")
@interface ProtractorViewController : UIViewController <WKNavigationDelegate, WKUIDelegate>
/// The object that acts as the delegate of the ProtractorViewController.
/// The delegate must adopt the ProtractorViewControllerDelegate protocol.
@property (nonatomic, strong) id <ProtractorViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
/// To set Protractor canvas.
/// This method is used to set canvas for Protractor
/// \param canvas canvas is a object of type PenDrawingView
///
- (void)setProtractorCanvasWithCanvas:(PenDrawingView * _Nonnull)canvas;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class SDKProtractorVO;

/// The delegate of a ProtractorViewController object must adopt the ProtractorViewControllerDelegate protocol.
/// ProtractorViewControllerDelegate Protocol used to handle all the callbacks of ProtractorViewController Class.The ProtractorViewControllerDelegate protocol defines method that allow user to manage clean-up and saving protractor data.
/// When configuring the Protractor View Controller object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL_NAMED("ProtractorViewControllerDelegate")
@protocol ProtractorViewControllerDelegate
/// Tells the delegate that the Protractor needs to be closed.
/// You can implement this method to do clean-up tasks related to Protractor and save protractor data.
/// \param protractorVO protractorVO is object of type SDKProtractorVO
///
- (void)didCloseProtractorWithProtractorVO:(SDKProtractorVO * _Nullable)protractorVO;
@end

typedef SWIFT_ENUM(NSInteger, READER_MARGIN, open) {
  READER_MARGINDEFAULT_MARGIN = 0,
  READER_MARGINSMALL_MARGIN = 1,
  READER_MARGINMEDIUM_MARGIN = 2,
  READER_MARGINLARGE_MARGIN = 3,
};

typedef SWIFT_ENUM(NSInteger, READER_MODE, open) {
  READER_MODEDAY_MODE = 0,
  READER_MODESEPIA_MODE = 1,
  READER_MODENIGHT_MODE = 2,
  READER_MODEDEFAULT_MODE = 3,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK37RTLorLTRFlowLayoutForUICollectionView")
@interface RTLorLTRFlowLayoutForUICollectionView : UICollectionViewFlowLayout
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL flipsHorizontallyInOppositeLayoutDirection;
@end


SWIFT_CLASS_NAMED("ReaderAnalytics")
@interface ReaderAnalytics : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface ReaderAnalytics (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, copy) NSString * _Nullable analyticsData;
@property (nonatomic, copy) NSString * _Nullable bookID;
@property (nonatomic, strong) NSNumber * _Nullable isSync;
@property (nonatomic, copy) NSString * _Nullable sessionID;
@property (nonatomic, copy) NSString * _Nullable userID;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17ReaderFontSetting")
@interface ReaderFontSetting : NSObject <NSCopying>
@property (nonatomic, copy) NSString * _Nonnull fontFamily;
@property (nonatomic) NSInteger fontSize;
@property (nonatomic) enum TEXT_ALIGNMENT textAlignment;
@property (nonatomic) enum READER_MARGIN margin;
@property (nonatomic) enum TEXT_LINESPACING lineSpacing;
@property (nonatomic) enum READER_MODE readerMode;
@property (nonatomic) BOOL scrollEnabled;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Signout_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18ReaderProfile_V6_0")
@interface ReaderProfile_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable profileBorder;
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable actionTextColor;
@property (nonatomic, strong) Signout_V6_0 * _Nullable signout;
@property (nonatomic, copy) NSString * _Nullable linkColorSelected;
@property (nonatomic, copy) NSString * _Nullable profileTextColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17ReaderSearch_V6_0")
@interface ReaderSearch_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable inputPanelBg;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable mainIconColor;
@property (nonatomic, copy) NSString * _Nullable hintTextColor;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable tabBorder;
@property (nonatomic, copy) NSString * _Nullable selectedTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedBgColor;
@property (nonatomic, copy) NSString * _Nullable seperationBackground;
@property (nonatomic, copy) NSString * _Nullable crossIconColor;
@property (nonatomic, copy) NSString * _Nullable descriptionColor;
@property (nonatomic, copy) NSString * _Nullable subtextColor;
@property (nonatomic, copy) NSString * _Nullable selectionTextColorBg;
@property (nonatomic, copy) NSString * _Nullable selectedTextColorBg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18ReadingTimeManager")
@interface ReadingTimeManager : NSObject
- (id _Nullable)parseCFIJSONFromFilePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16RecentShelf_V6_0")
@interface RecentShelf_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable categoriesTextColor;
@property (nonatomic, copy) NSString * _Nullable viewAll;
@property (nonatomic, copy) NSString * _Nullable readProgressBar;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable format;
@property (nonatomic, copy) NSString * _Nullable moreIcon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ReflowableCustomSlider")
@interface ReflowableCustomSlider : UISlider
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21ReflowableReader_V6_0")
@interface ReflowableReader_V6_0 : NSObject
@property (nonatomic, strong) DayModeClass_V6_0 * _Nullable dayMode;
@property (nonatomic, strong) DayModeClass_V6_0 * _Nullable sepiaMode;
@property (nonatomic, strong) DayModeClass_V6_0 * _Nullable nightMode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12Refresh_V6_0")
@interface Refresh_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable boxBorderColor;
@property (nonatomic, copy) NSString * _Nullable buttonTextColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RendererAvailabilityForActionState, open) {
/// Renderer is about to load (ie. When user navigate the pages/ or When user launch the book) and not completely Available for Action.
  RendererAvailabilityForActionStateBegin = 0,
/// Renderer is loaded completely and Available for Action.
  RendererAvailabilityForActionStateComplete = 1,
};



/// A protocol that allows a delegate to respond when any search result is selected form the TextSearchController view.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK28TextSearchControllerDelegate_")
@protocol TextSearchControllerDelegate
@optional
/// Will be called when user select search result text.
/// \param searchResult User Selected search Result of type TextSearchResult.
///
- (void)didSelectSearchText:(TextSearchResult * _Nonnull)searchResult;
/// Will be called when user select Back button of TextSearchController.
- (void)didSelectActionForCloseSearch;
/// Will be called when user change text in Search Text Field.
- (void)didSearchTextChanged;
/// Will be called when the search data decryption completed successfully.
- (void)didCompleteSearchDecryption;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22RendererViewController")
@interface RendererViewController : UIViewController <HSOPFParserDelegate, RendererProtocol, TextSearchControllerDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didCompleteSearchDecryption;
- (void)setColorForSharedUGC:(NSString * _Nonnull)hexColor;
- (void)viewDidLoad;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)addViewControllerAsSubView:(UIViewController * _Nonnull)controller;
- (BOOL)openHighlightView:(HighlightActionView * _Nonnull)highlightView onPageNo:(NSInteger)pageNo atCoordinates:(CGPoint)coordinates SWIFT_WARN_UNUSED_RESULT;
- (BOOL)openHighlightView:(HighlightActionView * _Nonnull)highlightView onPageNo:(NSInteger)pageNo atCoordinates:(CGPoint)coordinates withHighlightedTextRect:(CGPoint)highlightedTextRect SWIFT_WARN_UNUSED_RESULT;
- (void)removeHighlightView;
- (void)deleteSelectedHighlight:(SDKHighlightVO * _Nonnull)highlight;
- (void)highlight:(HighlightActionView * _Nonnull)highlightView withTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor withIsImportant:(BOOL)isImportant;
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color withSelectedWordHighlightColor:(NSString * _Nonnull)selectedWordColor withSearchArray:(NSArray<TextSearchResult *> * _Nonnull)searchResultArray withSelectedResult:(TextSearchResult * _Nonnull)searchResult;
- (void)moveToNextSelectedSearch;
- (BOOL)isNextSearchResultAvailable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPreviousSearchResultAvailable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLastPreviousSearchResult SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLastNextSearchResult SWIFT_WARN_UNUSED_RESULT;
- (void)moveToPreviousSelectedSearch;
- (void)highlightText:(NSString * _Nonnull)text onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color withParagraph:(NSString * _Nonnull)paragraph;
- (void)highlightTextWithFrame:(CGRect)frame onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
- (void)highlightSentenceWithWordFrames:(NSArray * _Nonnull)frames onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
- (void)highlightSentenceWithWordFramesForTTS:(NSArray * _Nonnull)frames onPageNo:(NSInteger)pageNo withColor:(NSString * _Nonnull)color;
- (void)updateBackgroundForAudioSyncFramesWithColor:(NSString * _Nonnull)color;
- (SDKHighlightVO * _Nonnull)getHighlightForSelectedTextWithTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor SWIFT_WARN_UNUSED_RESULT;
- (void)getHighlightForSelectedTextEpubWithTextColor:(NSString * _Nonnull)textColor withBackgroundColor:(NSString * _Nonnull)backgroundColor callback:(void (^ _Nonnull)(SDKHighlightVO * _Nonnull))callback;
- (NSString * _Nonnull)getSelectedText SWIFT_WARN_UNUSED_RESULT;
- (void)postNoteWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO;
- (void)deleteNoteWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO;
- (void)drawHighlights:(NSArray<SDKHighlightVO *> * _Nonnull)highlights onPageNo:(NSInteger)pageNo;
- (void)drawTextAnnotation:(NSArray<SDKTextAnnotationVO *> * _Nonnull)textAnnotation onPageNo:(NSInteger)pageNo;
- (void)exitTextAnnotationMode;
- (void)deleteTextAnnotation;
- (void)updateTextAnnotationAlignment:(NSTextAlignment)alignment;
- (void)enableTeacherReviewModeWithPageArray:(NSArray<NSString *> * _Nonnull)pageArray;
- (void)disableTeacherReviewMode;
- (void)updateTextAnnotationWithBackground:(UIColor * _Nonnull)background withTextColor:(UIColor * _Nonnull)textColor;
- (void)removeTextAnnotationModeWithoutSave;
- (void)drawPenDrawings:(NSArray<SDKPentoolVO *> * _Nonnull)penToolArray onPageNo:(NSInteger)pageNo;
- (void)drawMarkups:(NSArray<KFLinkVO *> * _Nonnull)links onPageNo:(NSInteger)pageNo;
- (void)drawFIBs:(NSArray * _Nonnull)fibs onPageNo:(NSInteger)pageNo;
- (void)addReviewViewOnFib:(SDKFIBVO * _Nonnull)fibVo;
- (void)removeFibReviewViewOnPageNo:(NSInteger)pageNo;
- (void)addInLineVideo:(UIView * _Nonnull)view atRect:(CGRect)frame onPageNO:(NSInteger)pageNo;
- (void)addMultiLinkController:(UIViewController * _Nonnull)viewController atSourceView:(UIView * _Nonnull)sourceView onPageNO:(NSInteger)pageNo;
- (void)addInstructionPopup:(UIViewController * _Nonnull)instructionPopupController atSourceView:(UIView * _Nonnull)sourceView onPageNO:(NSInteger)pageNo;
- (void)navigateToPageNumber:(NSString * _Nonnull)number;
- (void)enablePagination:(BOOL)enable;
- (void)setBrightnessForReflowable:(CGFloat)brightnessValue;
- (BOOL)isPaginationEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)enableNightMode:(BOOL)enable;
- (void)setReaderMode:(enum READER_MODE)mode;
- (void)setTextAlignment:(enum TEXT_ALIGNMENT)textAlignment;
- (void)resetReaderSetting;
- (void)resetReaderFontSetting;
- (void)setFontFamily:(NSString * _Nonnull)fontFamily;
- (void)didFontSizeChanged:(NSUInteger)fontSize;
- (void)setLineSpacing:(enum TEXT_LINESPACING)lineSpacing;
- (void)setMargin:(enum READER_MARGIN)margin;
- (void)setBookOrientationMode:(enum BookOrientationMode)bookOrientation;
- (enum BookOrientationMode)getBookOrientationMode SWIFT_WARN_UNUSED_RESULT;
- (void)addBookmark:(NSArray<SDKBookmarkVO *> * _Nonnull)bookmarks onPageNo:(NSInteger)pageNo;
- (void)setBookmarkVO:(SDKBookmarkVO * _Nonnull)bookmarkVO;
- (SDKBookmarkVO * _Nullable)getBookmarkVOForPageNo:(NSInteger)pageNo SWIFT_WARN_UNUSED_RESULT;
- (void)addBookmarkView:(BookMarkView * _Nonnull)bookmarkView onPageNO:(NSInteger)pageNo;
- (void)addPrintPageView:(PrintPageButton * _Nonnull)printPageView onPageNO:(NSInteger)pageNo;
- (UIImage * _Nullable)getPageImageToPrintForPageNumber:(NSInteger)pageNo SWIFT_WARN_UNUSED_RESULT;
- (void)exitPrintMode;
- (SDKHighlightVO * _Nullable)getHighlightVOForStickyNoteTouchPoint:(CGPoint)touchPoint SWIFT_WARN_UNUSED_RESULT;
- (SDKHighlightVO * _Nullable)getHighlightVOForStickyNoteWithDefaultPosition SWIFT_WARN_UNUSED_RESULT;
- (void)getHighlightVOForStickyNoteWithDefaultPositionWithCallBack:(void (^ _Nonnull)(SDKHighlightVO * _Nullable, NSError * _Nullable))callback;
- (SDKTextAnnotationVO * _Nullable)getTextAnnotationVOWithDefaultPosition SWIFT_WARN_UNUSED_RESULT;
- (void)addTextAnnotation:(SDKTextAnnotationVO * _Nonnull)sdkTextAnnotationVO;
- (void)setPenDrawingModeEnabled:(BOOL)enabled;
- (void)setTeacherReviewDragBoxModeEnabled:(BOOL)enabled;
- (void)setPenDrawingModeEnabled:(BOOL)enabled withReviewModeEnable:(BOOL)reviewModeEnabled;
- (NSArray<PenDrawingView *> * _Nonnull)getPenDrawingCanvas SWIFT_WARN_UNUSED_RESULT;
- (void)resetZoomScaleToDefault;
- (NSArray * _Nonnull)getActivePages SWIFT_WARN_UNUSED_RESULT;
- (void)reloadPages;
- (void)setVerticalMarginForReflowableEpubBook:(NSNumber * _Nonnull)marginValue;
- (void)drawProtractorDrawings:(NSArray * _Nonnull)protractorArray onPageNo:(NSInteger)pageNo;
- (UIView * _Nullable)getFIBViewForLinkId:(NSInteger)linkID SWIFT_WARN_UNUSED_RESULT;
- (void)addWatermark:(WatermarkHolderView * _Nonnull)watermarkHolderView onPageNumber:(NSInteger)pageNo;
- (void)updateUGC:(NSArray<UGC *> * _Nonnull)UGCs onPageNo:(NSInteger)pageNo;
- (void)moveToNextSelectedSearchFor:(TextSearchResult * _Nonnull)searchResult;
- (void)moveToPreviousSelectedSearchFor:(TextSearchResult * _Nonnull)searchResult;
- (BOOL)isNextSearchResultAvailableFor:(TextSearchResult * _Nonnull)searchResult SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPreviousSearchResultAvailableFor:(TextSearchResult * _Nonnull)searchResult SWIFT_WARN_UNUSED_RESULT;
- (void)disableTwoPageSeperation:(BOOL)disableSeperation;
- (void)didTapOnMarkupHitArea:(MarkupHitAreaLabel * _Nonnull)markupHitAreaLabel;
- (ReaderFontSetting * _Nonnull)getReaderFontSetting SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAvailableReaderFontSetting SWIFT_WARN_UNUSED_RESULT;
- (void)addWatermarkImageOnEpub:(NSString * _Nonnull)watermarkImagePath onPageNumber:(NSInteger)pageNo;
- (BOOL)isAutoPageScrollingDisableInAudioSync SWIFT_WARN_UNUSED_RESULT;
- (void)didPauseTTS;
- (void)didPlayTTS;
- (void)didChangeSpeedRate:(CGFloat)rate;
- (void)set3dVideoModeEnabled:(BOOL)enabled;
- (void)didJumpToSentenceWithWordFramesForTTS:(NSArray * _Nonnull)frames withPageIdentifier:(NSString * _Nonnull)pageIdentifier;
- (void)currentPageNumberForTTS:(NSNumber * _Nonnull)pageNumber;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The delegate of a <code>RendererViewController</code> object must adopt the <code>RendererViewControllerDelegate</code> protocol.
/// The <code>RendererViewControllerDelegate</code> protocol is used to handle all the callbacks of the <code>RendererViewController</code> class.
/// The <code>RendererViewControllerDelegate</code> protocol defines methods that allow the user to manage the selection, highlighting, page loading, zoom in/out, and all actions/events that are directly related to rendering of the book (KitabooFixed, Epub).
/// All the methods of this protocol are optional.
/// When configuring the renderer view object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK30RendererViewControllerDelegate_")
@protocol RendererViewControllerDelegate
@optional
- (void)didFailToReadTTS;
- (void)didPauseTTS;
- (void)didPlayTTS;
- (void)didJumpToSentenceWithWordFramesForTTSWithFrames:(NSArray * _Nonnull)frames pageIdentifier:(NSString * _Nonnull)pageIdentifier;
- (void)didChangeSpeedRateWithRate:(CGFloat)rate;
- (void)currentPageNumberForTTSWithPageNumber:(NSNumber * _Nonnull)pageNumber;
/// Will be called every time when a page is about to load (i.e., when the user navigates the pages or when the user launches the book).
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     rendererViewController: Object of <code>RendererViewController</code> class.
///   </li>
///   <li>
///     number: The page number which will be loaded.
///   </li>
///   <li>
///     displayNum: The number which will be displayed, e.g., I, II, III.
///   </li>
/// </ul>
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController willLoadPageWithPageNumber:(NSNumber * _Nonnull)number withDisplayNumber:(NSString * _Nonnull)displayNum;
/// Will be called every time when a page is about to unloaded.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     rendererViewController: Object of <code>RendererViewController</code> class.
///   </li>
///   <li>
///     number: The loaded Page Number which will be unloaded.
///   </li>
///   <li>
///     displayNum: The number, e.g., I, II, III.
///   </li>
/// </ul>
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController willUnloadPageWithPageNumber:(NSNumber * _Nonnull)number withDisplayNumber:(NSString * _Nonnull)displayNum;
/// Will be called every time when a page is loaded (i.e., when the user navigates the pages or when the user launches the book).
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     rendererViewController: Object of <code>RendererViewController</code> class.
///   </li>
///   <li>
///     number: The loaded Page Number.
///   </li>
///   <li>
///     displayNum: The number, e.g., I, II, III.
///   </li>
/// </ul>
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didLoadPageWithPageNumber:(NSNumber * _Nonnull)number withDisplayNumber:(NSString * _Nonnull)displayNum;
/// Will be called when page loading is failed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     rendererViewController: Object of <code>RendererViewController</code> class.
///   </li>
///   <li>
///     number: The Page number for which Page loading failed.
///   </li>
///   <li>
///     error: The NSError object when Page loading failed.
///   </li>
/// </ul>
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didPageLoadingFailedForPageNumber:(NSNumber * _Nonnull)number withError:(NSError * _Nonnull)error;
/// Will be called when book loading is failed.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param error The NSError object when Book loading failed.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didBookLoadingFailedWithError:(NSError * _Nonnull)error;
/// Will be called when book is loaded successfully.
/// <ul>
///   <li>
///     Discussion:
///     Here User gets loaded book instance which is bookVO. The method permits user to perform all the actions which can be done after loading of the book such as, save the book instance in database or implementation of all reflowable customization if bookVO is type of Epub reflowable books. If this method is not implemented user can not get the book instance.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param bookVO book Object of KitabooBookVO class.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didBookLoadedSuccessfullyWithBook:(KitabooBookVO * _Nonnull)bookVO;
/// Will be called when page/chapter is scrolled.
/// <ul>
///   <li>
///     Discussion:
///     If book is type of Epub reflowable books, Only then this method will be called.
///   </li>
/// </ul>
/// \param pageNumber The Page number which will be loaded.
///
- (void)didPageBeginScrollWithPageNumber:(NSNumber * _Nonnull)pageNumber;
/// Will be called when page/chapter is scrolled.
/// <ul>
///   <li>
///     Discussion:
///     If book is type of Epub reflowable books, Only then this method will be called.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param pageNumber The Page number which will be loaded.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didPageBeginScroll:(NSNumber * _Nonnull)pageNumber;
/// Will be called when the page is Zoom In.
/// <ul>
///   <li>
///     Discussion:
///     <ul>
///       <li>
///         If Zooming is performed in portrait mode pageNumbers Array will have one page.
///       </li>
///       <li>
///         In landscape mode pageNumbers Array will have two pages.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param pageNumbers Array of Loaded Page.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didZoomInPage:(NSArray * _Nonnull)pageNumbers;
/// Will be called when the page is Zoom Out.
/// <ul>
///   <li>
///     Discussion:
///     <ul>
///       <li>
///         If Zooming is performed in portrait mode pageNumbers Array will have one page.
///       </li>
///       <li>
///         In landscape mode pageNumbers Array will have two pages.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param pageNumbers Array of Loaded Pages.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didZoomOutPage:(NSArray * _Nonnull)pageNumbers;
/// Will be called when single tap is performed on page.
/// <ul>
///   <li>
///     Discussion:
///     The method permits user to perform all the actions which can be done on single tap. If this method is not implemented user can not perform action on signle tap.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param pageNumber The Tapped Page Number.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didSingleTapOnPage:(NSNumber * _Nonnull)pageNumber;
/// Will be called when pinch in or out is performed on page.
/// <ul>
///   <li>
///     Discussion:
///     The method permits user to perform all the actions which can be done on pinch in our out. If this method is not implemented user can not perform action on pinch on page.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param isPinchIn If we are pinching in or out.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didPinchOnPage:(BOOL)isPinchIn;
/// Will be called before the Pages are displayed.
/// <ul>
///   <li>
///     Discussion:
///     If this method is not implemented, Book will be launched with First Page.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
///
/// returns:
/// The Display number that need to be shown.
- (NSString * _Nonnull)initialDisplayNumberWithRendererViewController:(RendererViewController * _Nonnull)rendererViewController SWIFT_WARN_UNUSED_RESULT;
/// Will be called when the user highlight text on the Page.
/// <ul>
///   <li>
///     Discussion:
///     This method can be used to open HighlightActionView and user can change highlight color etc.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param highlightSelectionRect Type of CGRect for Highlighted text.
///
/// \param pageNo Is the page number where user highlighted the text.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didHighlightTextWithHighlightSelectionRect:(CGRect)highlightSelectionRect onPageNo:(NSInteger)pageNo;
/// Will be called when user completed the highlight on the particular Page.
/// <ul>
///   <li>
///     Discussion:
///     Use this method to save the highlight after completion. Highlight can be updated or Deleted based on the state of SDKHighlightVO object.
///   </li>
/// </ul>
/// \param highlightVO Object of SDKHighlightVO class.
///
- (void)didHighlighCompleteWith:(SDKHighlightVO * _Nonnull)highlightVO;
/// Will be called when the user tap on note.
/// <ul>
///   <li>
///     Discussion:
///     All the Actions after tapping on any note icon take place here.(eg. After tapping on note icon user can show note controller for particular note and save or share the note controller’s data.)
///   </li>
/// </ul>
/// \param highlightVO Object of SDKHighlightVO class.
///
- (void)didTapOnNoteHighlighWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO;
/// Will be called when the user tap on teacher review comment note.
/// <ul>
///   <li>
///     Discussion:
///     All the Actions after tapping on any teacher review comment note icon take place here.(eg. After tapping on note icon user can show note controller for particular note and save the note controller’s data.)
///   </li>
/// </ul>
/// \param fibArray Object of NSArray class contains selected fib array.
///
- (void)didTapOnTeacherCommentWithFibArray:(NSArray * _Nonnull)fibArray;
/// Will be called when the user tap on teacher review instant Feedback button.
/// <ul>
///   <li>
///     Discussion:
///     All the Actions after tapping on any teacher review instant feedback icon take place here.(eg. After tapping on icon user can show the correct answer for the submitted fib.)
///   </li>
/// </ul>
/// \param fibView Object of HDFIB class contains selected fib view.
///
- (void)didTapOnInstantFeedBackWithFibView:(UIView * _Nonnull)fibView;
/// Returns the Note icon view associated to SDKHighlightVO instance.
/// <ul>
///   <li>
///     Discussion:
///     All the customization related to note highlight icon can be performed here.(eg. If SDKHighlightVO instance is a type of Sticky note, sticky note will be added else Contextual note will be added.)
///   </li>
/// </ul>
/// \param highlightVO Object of SDKHighlightVO class to create Note icon view.
///
///
/// returns:
/// The Note icon view associated with the highlight.
- (UGCLabel * _Nonnull)noteIconViewForHighlightWithHighlightVO:(SDKHighlightVO * _Nonnull)highlightVO SWIFT_WARN_UNUSED_RESULT;
/// Will be called when the teacher review any fib with correct incorrect button.
/// <ul>
///   <li>
///     Discussion:
///     All the Actions after tapping on any fib teacher review action take place here.(eg. After tapping on correct/incorrect icon user can update with answer status for particular fib and save the fib controller’s data.)
///   </li>
/// </ul>
/// \param fibArray Object of NSArray class contains selected fib array.
///
- (void)didUpdateFibArrayWithFibArray:(NSArray * _Nonnull)fibArray;
/// Will be called when Text Annotation is completed.
/// <ul>
///   <li>
///     Discussion:
///     This method is called when any action related to text annotation either Adding a text annotation, Editing or Deleting a text annotation  is completed. And also use this callback to save text annotation changes.
///   </li>
/// </ul>
/// \param textAnnotationVO Object of SDKTextAnnotationVO.
///
/// \param newSDKTextAnnotationVO Object of SDKTextAnnotationVO.
///
- (void)didTextAnnotationCompleteWithTextAnnotationWithTextAnnotationVO:(SDKTextAnnotationVO * _Nonnull)textAnnotationVO withNewSDKTextAnnotationVO:(SDKTextAnnotationVO * _Nonnull)newSDKTextAnnotationVO;
/// Tells the delegate that editing began in the Text Annotation.
/// <ul>
///   <li>
///     Discussion:
///     This method notifies the delegate that the specified Text Annotation just became the first responder. Use this method to perform other tasks. For example, you might use this method to show overlay views that are visible only while editing.
///   </li>
/// </ul>
/// \param textView UITextView object in which the value has been updated.
///
- (void)didTextAnnotationBeginEditingWithTextView:(UITextView * _Nonnull)textView;
/// Asks the delegate if editing should begin in the specified text annotation.
/// <ul>
///   <li>
///     Discussion:
///     The text annotation calls this method when the user performs an action that would normally initiate the editing of the text annotation’s text. Implement this method if you want to prevent editing from happening in some situations. For example, you could use this method to prevent the user from editing the text annotation’s contents more than once. Most of the time, you should return YES to allow editing to proceed.
///     If you do not implement this method, the text annotation acts as if this method had returned YES.
///   </li>
/// </ul>
///
/// returns:
/// YES if editing should begin or NO if it should not.
- (BOOL)textAnnotationShouldBeginEditing SWIFT_WARN_UNUSED_RESULT;
/// This method will be called when the text in the text annotation is updated/changed
/// \param textView UITextView object in which the value has been updated.
///
- (void)didTextAnnotationValueChangedWithTextView:(UITextView * _Nonnull)textView;
/// This will return the color of selection when user selects any text.
///
/// returns:
/// object of UIColor which is selected.
- (UIColor * _Nonnull)colorForTextSelectionView SWIFT_WARN_UNUSED_RESULT;
/// Will be called when highlight selection is changed.
- (void)didChangeHighlightSelection;
/// This method is used to check whether sticky note allowes two Page Panning or Not.
/// <ul>
///   <li>
///     Discussion:
///     When the user performs an action on Sticky Note that would normally initiate a Panning session, the Page Controller calls this method to see if Panning should actually proceed for Two Pages.
///     Implementation of this method by the delegate is optional. If it is not present, Panning proceeds for Single Page.
///   </li>
/// </ul>
///
/// returns:
/// true if sticky note allows two Page Panning, false otherwise.
- (BOOL)didStickyNoteAllowedTwoPagePanning SWIFT_WARN_UNUSED_RESULT;
/// This method is used to set Zoom scale Percentage for current Book Pages.
/// <ul>
///   <li>
///     Discussion:
///     To set zoom scale percentage for book pages. Zoom Scale Percentage Must be less than or equal to 1000.
///     NOTE: This method will only works for Kitaboo Fixed books(PDF).
///     Implementation of this method by the delegate is optional. If it is not present, Default Zoom scale percentage is 400.
///   </li>
/// </ul>
/// \param bookVO Object of KitabooBookVO.
///
///
/// returns:
/// Zoom scale Percentage for book pages.
- (double)zoomScalePercentageForBookWithBookVO:(KitabooBookVO * _Nonnull)bookVO SWIFT_WARN_UNUSED_RESULT;
/// Will be called when the user taken action to delete ProtractorDrawing.
/// <ul>
///   <li>
///     Discussion:
///     All the Actions after user confirm to delete any protractorDrawing take place here.
///   </li>
/// </ul>
/// \param protractorVO Object of SDKProtractorVO class.
///
- (void)deleteProtractorWithProtractorVOWithProtractorVO:(SDKProtractorVO * _Nonnull)protractorVO;
/// Will be called when the user select ProtractorDrawing.
/// <ul>
///   <li>
///     Discussion:
///     All the Actions after user select protractorDrawing take place here.
///   </li>
/// </ul>
/// \param protractorVO Object of SDKProtractorVO class.
///
- (void)didSelectProtractorWithProtractorVOWithProtractorVO:(SDKProtractorVO * _Nonnull)protractorVO;
/// Will be called every time when page is about to load (ie. When user navigate the pages/ or When user launch the book)
/// \param rendererViewController Object of RendererViewController class.
///
/// \param state The RendererAvailabilityForActionState Begin or Complete.
///
/// \param number The Page number which will be loaded.
///
/// \param displayNum The number which will be displayed, Eg I,II,III.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didRendererChangedAvailabilityForActionState:(enum RendererAvailabilityForActionState)state forPageNumber:(NSNumber * _Nonnull)number withDisplayNumber:(NSString * _Nonnull)displayNum;
/// Will be called every time when book loading completed with content size.
/// \param contentSize Total content size of book.
///
- (void)bookLoadingCompletedWithContentSizeWithContentSize:(NSInteger)contentSize;
- (void)bookCFIsLoadingCompletedWithTotalNumberOfCFIs:(NSInteger)TotalNumberOfCFIs;
/// Will be called every time when every Chapter is processed.
/// \param chaptersIndex Current chapter index.
///
/// \param contentSize Current chapter content size.
///
/// \param coverPage Is Cover Image.
///
- (void)didBookChaptersProcessSuccessfullyWithChaptersIndex:(NSInteger)chaptersIndex withChapterContentSize:(NSInteger)contentSize isCoverPage:(BOOL)coverPage;
/// Will be called every time when page is scrolled for reflowable books.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param contentOffset Current chapter content Offset.
///
/// \param chapterIndex Current chapter index.
///
/// \param contentSize Current chapter content Size.
///
/// \param coverPage Is Cover Image.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didChangeContentPosition:(CGFloat)contentOffset forChapter:(NSInteger)chapterIndex withContentSize:(CGFloat)contentSize isCoverPage:(BOOL)coverPage;
/// Will be called every time when page is scrolled for reflowable books.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param pageNumber Current Paget.
///
/// \param chapterIndex Current chapter index.
///
/// \param totalChapterPages total Pages in Chapter.
///
/// \param totalBookPages total Pages in Book.
///
/// \param coverPage Is Cover Image.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didChangeReflowableBookPage:(NSString * _Nonnull)pageNumber forChapter:(NSInteger)chapterIndex withTotalPagesInChapter:(NSString * _Nonnull)totalChapterPages withTotalPagesInBook:(NSString * _Nonnull)totalBookPages isCoverPage:(BOOL)coverPage;
/// Will be called every time when CFI’s is about to load (ie. When user navigate the pages/ or When user launch the book)
/// \param rendererViewController Object of RendererViewController class.
///
/// \param cfiArray collection of CFI’s.
///
/// \param number The Page number for which CFI’s will be loaded.
///
/// \param displayNum The number which will be displayed, Eg I,II,III.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController willLoadCFI:(NSArray * _Nonnull)cfiArray withPageNumber:(NSNumber * _Nonnull)number withDisplayNumber:(NSString * _Nonnull)displayNum;
/// Will be called every time when CFI’s is about to unloaded.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param cfiArray collection of CFI’s.
///
/// \param number The Page Number for which CFI’s will be unloaded.
///
/// \param displayNum The number, Eg I,II,III.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController willUnloadCFI:(NSArray * _Nonnull)cfiArray withPageNumber:(NSNumber * _Nonnull)number withDisplayNumber:(NSString * _Nonnull)displayNum;
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didChangeBookCFI:(NSString * _Nonnull)bookCFI withPositionIdentifier:(NSString * _Nonnull)positionIdentifier withPageNumber:(NSNumber * _Nonnull)pageNumber;
- (void)rendererViewControllerDidPageNavigationCompleted;
/// Will be called when Page/CFI position is changed.
/// \param pageOrCFI New Page/CFI.
///
- (void)didChangePageIdentifierWithPageOrCFI:(NSString * _Nonnull)pageOrCFI;
/// Will be called every time when further visited page updated.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param furthestPageData Furthser visited page.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didUpdateFurthestPage:(NSString * _Nonnull)furthestPageData;
/// Will be called when EpubElementModal popup get opened
- (void)didOpenEpubElementModal;
/// Will be called when EpubElementModal popup get closed.
- (void)didCloseEpubElementModal;
/// Will be called when bookmark is updated(create new, delete/update existing).
/// <ul>
///   <li>
///     Discussion:
///     If book is type of Epub reflowable books, Only then this method will be called.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
/// \param bookmarkVO Object of SDKBookmarkVO class.
///
/// \param updatedBookmarkVO Object of SDKBookmarkVO class for updated bookmark.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didUpdateBookmarkVOFrom:(SDKBookmarkVO * _Nonnull)bookmarkVO to:(SDKBookmarkVO * _Nullable)updatedBookmarkVO;
/// Will be called when the epub content end scrolling.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param offset CGPoint for current offset of page.
///
/// \param pageNumber The Page Number for which the epub chapter ended it’s scrolling.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didEndScrollingWithContentOffset:(CGPoint)offset withPageNumber:(NSNumber * _Nonnull)pageNumber;
/// Will be called when user taps on any word for epub book.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param wordId Word id for the tapped word.
///
/// \param wordText Word inner text for the tapped word.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didTapOnWordWithWordId:(NSString * _Nonnull)wordId withWordText:(NSString * _Nonnull)wordText;
/// Will be called when user taps on any word for epub book.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param wordRect Word rect for the tapped word.
///
/// \param wordText Word inner text for the tapped word.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didTapOnWordWithWordRect:(CGRect)wordRect withWordText:(NSString * _Nonnull)wordText;
/// Will be called when user taps on any word for epub book.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param wordRect Word rect for the tapped word.
///
/// \param wordText Word inner text for the tapped word.
///
/// \param pageNumber Page number for the tapped word.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didTapOnWordWithWordRect:(CGRect)wordRect withWordText:(NSString * _Nonnull)wordText andPage:(NSNumber * _Nonnull)pageNumber;
/// Will be called when user taps on any resource markup for epub book.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param resource EPUBResource object for the tapped resource.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didTapOnResource:(EPUBResource * _Nonnull)resource;
/// Will be called when first word of viewport is changed for audio sync supported reflowable epub book.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param wordDictionary First Word id and text of type NSDictionary.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didChangeFirstVisibleWordWithWord:(NSDictionary * _Nonnull)wordDictionary;
/// Will be called when the user tap on markups hit area.
/// \param markupHitAreaLabel Object of MarkupHitAreaLabel class.
///
- (void)didTapOnMarkupHitArea:(MarkupHitAreaLabel * _Nonnull)markupHitAreaLabel;
/// Returns the font name for the book.
/// \param book The KitabooBookVO object.
///
///
/// returns:
/// The font name for the book.
- (NSString * _Nonnull)fontNameForBook:(KitabooBookVO * _Nonnull)book SWIFT_WARN_UNUSED_RESULT;
/// Returns the font file path for the book.
/// \param book The KitabooBookVO object.
///
///
/// returns:
/// The font file path for the book.
- (NSString * _Nonnull)fontFilePathForBook:(KitabooBookVO * _Nonnull)book SWIFT_WARN_UNUSED_RESULT;
/// Will be called when the search data decryption completed successfully.
/// \param rendererViewController Object of RendererViewController class.
///
/// \param bookPath The book path of the current book.
///
- (void)rendererViewController:(RendererViewController * _Nonnull)rendererViewController didCompleteSearchDecryptionForBookPath:(NSString * _Nonnull)bookPath;
/// Returns the ReaderFontSetting to apply on reader page.
/// <ul>
///   <li>
///     Discussion: If this method is not implemented, the book will be launched with the user default settings.
///   </li>
/// </ul>
/// \param rendererViewController Object of RendererViewController class.
///
///
/// returns:
/// The ReaderFontSetting to apply on reader page.
- (ReaderFontSetting * _Nullable)getReaderFontSetting:(RendererViewController * _Nonnull)rendererViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the milliseconds to wait per 500 CFI to be loaded before the chapter loading starts for the first time.
/// <ul>
///   <li>
///     Discussion: If this method is not implemented, the chapter will be loaded without any delay.
///   </li>
/// </ul>
///
/// returns:
/// The milliseconds to wait per 500 CFI to be loaded.
- (CGFloat)shouldWaitForChapterLoadForCFIPerMiliSeconds SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to disable or enable auto page scrolling while audio sync is in progress.
/// <ul>
///   <li>
///     Discussion: If you do not implement this method, auto page scrolling is enabled by default.
///     To disable auto page scrolling while audio sync is in progress, implement this method and return true.
///   </li>
/// </ul>
///
/// returns:
/// True to disable auto page scrolling, false to enable auto page scrolling.
- (BOOL)isAutoPageScrollingDisableInAudioSync SWIFT_WARN_UNUSED_RESULT;
- (void)isPageBreakEnable:(BOOL)isPageBreakEnable;
@end


SWIFT_CLASS_NAMED("SCORMData")
@interface SCORMData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SCORMData (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, copy) NSString * _Nullable activityName;
@property (nonatomic, strong) NSNumber * _Nullable bookID;
@property (nonatomic, strong) NSNumber * _Nullable classID;
@property (nonatomic, copy) NSString * _Nullable cmi__core;
@property (nonatomic, strong) NSNumber * _Nullable isSubmitted;
@property (nonatomic, copy) NSString * _Nullable pageID;
@property (nonatomic, copy) NSString * _Nullable scoId;
@property (nonatomic, strong) NSNumber * _Nullable userID;
@end


SWIFT_CLASS_NAMED("SDKBookClassInfo")
@interface SDKBookClassInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SDKBookClassInfo (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, strong) NSNumber * _Nullable bookGuid;
@property (nonatomic, copy) NSString * _Nullable bookIsbn;
@property (nonatomic, copy) NSString * _Nullable bookTitle;
@property (nonatomic, strong) NSNumber * _Nullable classId;
@property (nonatomic, copy) NSString * _Nullable classTitle;
@property (nonatomic, strong) NSObject * _Nullable instructors;
@property (nonatomic, strong) NSObject * _Nullable learners;
@property (nonatomic, strong) NSObject * _Nullable receiveList;
@property (nonatomic, strong) NSNumber * _Nullable roleID;
@property (nonatomic, strong) NSObject * _Nullable shareList;
@property (nonatomic, strong) NSObject * _Nullable sharingSetting;
@property (nonatomic, copy) NSString * _Nullable thumbnailUrl;
@property (nonatomic, strong) NSNumber * _Nullable totalPages;
@property (nonatomic, strong) NSNumber * _Nullable userId;
@end


/// An Object that will be responsible for Data of Book.
/// <ul>
///   <li>
///     As the name suggests, SDKBookClassInfoVO class contains all the data information about a book. For exampple Book title of the book, how many instructors and learners available for the book, total number of pages in the book etc.
///   </li>
///   <li>
///     SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18SDKBookClassInfoVO")
@interface SDKBookClassInfoVO : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("SDKBookInfo")
@interface SDKBookInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SDKBookInfo (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, strong) NSNumber * _Nullable bookID;
@property (nonatomic, strong) NSNumber * _Nullable isDecrypted;
@end

enum UGCStatus : NSInteger;

/// UGC(User Generated Code) is responsible for creating and managing highlight, note, fib, pentool, bookmark, text annotation.
/// @discussion UGC defines all the parameters/attributes which are required to create and manage UGC.
/// @superclass SuperClass : NSObject
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK3UGC")
@interface UGC : NSObject
@property (nonatomic, copy) NSString * _Nonnull ugcID;
@property (nonatomic, copy) NSString * _Nonnull localID;
@property (nonatomic, copy) NSDate * _Nullable createdDate;
@property (nonatomic, copy) NSDate * _Nullable modifiedDate;
@property (nonatomic, copy) NSString * _Nonnull chapterName;
@property (nonatomic, copy) NSString * _Nonnull href;
@property (nonatomic, copy) NSString * _Nonnull idref;
@property (nonatomic) BOOL isSynced;
@property (nonatomic, strong) NSNumber * _Nullable chapterID;
@property (nonatomic) enum UGCStatus status;
@property (nonatomic, copy) NSString * _Nonnull pageIdentifier;
@property (nonatomic, copy) NSString * _Nonnull displayNum;
@property (nonatomic, copy) NSString * _Nullable positionIdentifier;
@property (nonatomic, copy) NSString * _Nullable bookVersion;
/// This method is used to get the display date.
/// @discussion To set the display date in myDataController for notes and highlights, we get that date from this method.
/// @return String value, date in string form.
- (NSString * _Nonnull)getDisplayDate SWIFT_WARN_UNUSED_RESULT;
/// This method is used to get the created date.
/// @discussion To get the created date of UGC according to Coordinated Universal Time (UTC) standard.
/// @return String value, date in string form.
- (NSString * _Nonnull)getUTCCreatedDate SWIFT_WARN_UNUSED_RESULT;
/// This method is used to get the modified date.
/// @discussion To get the modified date of UGC according to Coordinated Universal Time (UTC) standard.
/// @return String value, date in string form.
- (NSString * _Nonnull)getUTCModifiedDate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// SDKBookmarkVO is responsible for Bookmarks.
/// @discussion SDKBookmarkVO defines all the parameters/atrributes which are required to create any Bookmark. Eg. Text, Start Offset, End Offset etc.
/// @superclass SuperClass : UGC
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13SDKBookmarkVO")
@interface SDKBookmarkVO : UGC
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) NSNumber * _Nullable startOffset;
@property (nonatomic, strong) NSNumber * _Nullable endOffset;
@property (nonatomic, copy) NSString * _Nullable creatorName;
@property (nonatomic) NSInteger creatorID;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metaData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(int32_t, SDKError, "SDKError", open) {
  SDKErrorKSDKErrorImageLoadingFailed = 0,
  SDKErrorKSDKErrorBookLoadingFailed = 1,
  SDKErrorKSDKErrorFontFileLoadingFailed = 2,
};


/// SDKFIBVO is responsible for FIB.
/// @discussion SDKFIBVO defines all the parameters/atrributes which are required for FIB. Eg. metaData, linkID, review etc.
/// @superclass SuperClass : UGC
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8SDKFIBVO")
@interface SDKFIBVO : UGC
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metaData;
@property (nonatomic, strong) NSNumber * _Nullable linkID;
@property (nonatomic, strong) NSNumber * _Nullable review;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, copy) NSString * _Nullable answerStatus;
@property (nonatomic, copy) NSString * _Nullable teacherComment;
@property (nonatomic, copy) NSDate * _Nullable commentCreatedDate;
@property (nonatomic, copy) NSDate * _Nullable commentModifiedDate;
@property (nonatomic) BOOL isSubmitted;
@property (nonatomic, strong) NSNumber * _Nullable inputType;
@property (nonatomic, readonly) BOOL isEquation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11SDKFontName")
@interface SDKFontName : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HELVETICA_FONT_LIGHT;)
+ (NSString * _Nonnull)HELVETICA_FONT_LIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HELVETICA_FONT_REGULAR;)
+ (NSString * _Nonnull)HELVETICA_FONT_REGULAR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HELVETICA_FONT_BOLD;)
+ (NSString * _Nonnull)HELVETICA_FONT_BOLD SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18SDKHLSDownloadInfo")
@interface SDKHLSDownloadInfo : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SDKHLSDownloadInfo (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
@property (nonatomic, copy) NSData * _Nullable assetDownloadedData;
@property (nonatomic, strong) NSNumber * _Nullable assetDownloadingBitrate;
@property (nonatomic, copy) NSData * _Nullable assetEncKeyData;
@property (nonatomic, copy) NSString * _Nullable assetM3U8Name;
@property (nonatomic, copy) NSString * _Nullable assetM3U8Path;
@property (nonatomic, copy) NSString * _Nullable bookId;
@property (nonatomic, strong) NSObject * _Nullable cookies;
@property (nonatomic, strong) NSNumber * _Nullable isDownloaded;
@property (nonatomic, strong) NSNumber * _Nullable totalAssets;
@end


/// SDKHighlightVO is responsible for Highlights and Notes.
/// @discussion SDKHighlightVO defines all the parameters/atrributes which are required to create any hightlight or to create any note either Sticky Note or Contextual Note.
/// <ul>
///   <li>
///     Contextual Note
///   </li>
/// </ul>
/// This note is related to any Selected Text.
/// <ul>
///   <li>
///     Sticky Note
///   </li>
/// </ul>
/// This note is not coupled with any Text. User can write her/his data on it. And Sticky note can be dragged anywhere on the page.
/// @superclass SuperClass : UGC
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14SDKHighlightVO")
@interface SDKHighlightVO : UGC
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic, strong) NSNumber * _Nonnull startOffset;
@property (nonatomic, strong) NSNumber * _Nonnull endOffset;
@property (nonatomic, copy) NSString * _Nonnull noteText;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nonnull noteComments;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull sharedUsers;
@property (nonatomic, copy) NSString * _Nonnull creatorName;
@property (nonatomic) NSInteger creatorID;
@property (nonatomic) BOOL isImportant;
@property (nonatomic) BOOL isShare;
@property (nonatomic) BOOL isReceived;
@property (nonatomic) BOOL isAnswered;
@property (nonatomic) BOOL isCollabSubmitted;
@property (nonatomic) BOOL isTeacherReviewNote;
@property (nonatomic, copy) NSString * _Nonnull textColor;
@property (nonatomic, copy) NSString * _Nonnull backgroundColor;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull metaData;
@property (nonatomic) BOOL isMultiNoteMember;
@property (nonatomic) CGRect multiNoteFrame;
- (BOOL)isStickyNote SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11SDKIconFont")
@interface SDKIconFont : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ALERT;)
+ (NSString * _Nonnull)ICON_ALERT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BOOKSHELF;)
+ (NSString * _Nonnull)ICON_BOOKSHELF SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_TOC;)
+ (NSString * _Nonnull)ICON_TOC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MYDATA;)
+ (NSString * _Nonnull)ICON_MYDATA SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SEARCH;)
+ (NSString * _Nonnull)ICON_SEARCH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_HIGHLIGHTER_K12;)
+ (NSString * _Nonnull)ICON_HIGHLIGHTER_K12 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_HIGHLIGHT;)
+ (NSString * _Nonnull)ICON_HIGHLIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_TAPPABLE_STICKY_NOTE;)
+ (NSString * _Nonnull)ICON_TAPPABLE_STICKY_NOTE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_STICKY_NOTE;)
+ (NSString * _Nonnull)ICON_STICKY_NOTE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_THUMBNAIL;)
+ (NSString * _Nonnull)ICON_THUMBNAIL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ASSESSMENT;)
+ (NSString * _Nonnull)ICON_ASSESSMENT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_AUDIO;)
+ (NSString * _Nonnull)ICON_AUDIO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO1;)
+ (NSString * _Nonnull)ICON_VIDEO1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGE1;)
+ (NSString * _Nonnull)ICON_IMAGE1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ACTIVITY;)
+ (NSString * _Nonnull)ICON_ACTIVITY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ANIMATION;)
+ (NSString * _Nonnull)ICON_ANIMATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_WEBLINK;)
+ (NSString * _Nonnull)ICON_WEBLINK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_JUMP_TO_SCREEN;)
+ (NSString * _Nonnull)ICON_JUMP_TO_SCREEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TOC_BOOKMARK_NORMAL_ICON;)
+ (NSString * _Nonnull)TOC_BOOKMARK_NORMAL_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BOOKMARK_SELECTED;)
+ (NSString * _Nonnull)ICON_BOOKMARK_SELECTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_EDIT_CATEGORY;)
+ (NSString * _Nonnull)ICON_EDIT_CATEGORY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DOWNLOAD;)
+ (NSString * _Nonnull)ICON_DOWNLOAD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_PENTOOL;)
+ (NSString * _Nonnull)ICON_PENTOOL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ADD_NOTES;)
+ (NSString * _Nonnull)ICON_ADD_NOTES SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FIT_HORIZONTAL;)
+ (NSString * _Nonnull)ICON_FIT_HORIZONTAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FIT_VERTICAL;)
+ (NSString * _Nonnull)ICON_FIT_VERTICAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ZOOM_IN;)
+ (NSString * _Nonnull)ICON_ZOOM_IN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ZOOM_OUT;)
+ (NSString * _Nonnull)ICON_ZOOM_OUT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FIT_TO_SCREEN;)
+ (NSString * _Nonnull)ICON_FIT_TO_SCREEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_PRINT;)
+ (NSString * _Nonnull)ICON_PRINT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SETTING_OUTLINE;)
+ (NSString * _Nonnull)ICON_SETTING_OUTLINE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DELETE_OUTLINE;)
+ (NSString * _Nonnull)ICON_DELETE_OUTLINE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMPORTANT;)
+ (NSString * _Nonnull)ICON_IMPORTANT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ADD_SHELF;)
+ (NSString * _Nonnull)ICON_ADD_SHELF SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CHECK;)
+ (NSString * _Nonnull)ICON_CHECK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_Tick;)
+ (NSString * _Nonnull)ICON_Tick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_PREV_PAGE_ICON;)
+ (NSString * _Nonnull)ICON_PREV_PAGE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_NEXT;)
+ (NSString * _Nonnull)ICON_NEXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_HISTORY_PREV;)
+ (NSString * _Nonnull)ICON_HISTORY_PREV SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_HISTORY_NEXT;)
+ (NSString * _Nonnull)ICON_HISTORY_NEXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MEDIA_PAUSE;)
+ (NSString * _Nonnull)ICON_MEDIA_PAUSE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MEDIA_PLAY;)
+ (NSString * _Nonnull)ICON_MEDIA_PLAY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MEDIA_STOP;)
+ (NSString * _Nonnull)ICON_MEDIA_STOP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CMENU_END_TAG;)
+ (NSString * _Nonnull)ICON_CMENU_END_TAG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CMENU_START_TAG;)
+ (NSString * _Nonnull)ICON_CMENU_START_TAG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BACK;)
+ (NSString * _Nonnull)ICON_BACK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CLEAR;)
+ (NSString * _Nonnull)ICON_CLEAR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NEXT_ICON;)
+ (NSString * _Nonnull)NEXT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SINGLE_PAGE_VIEW;)
+ (NSString * _Nonnull)ICON_SINGLE_PAGE_VIEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_TWO_PAGE_VIEW;)
+ (NSString * _Nonnull)ICON_TWO_PAGE_VIEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_AUDIO_ICON;)
+ (NSString * _Nonnull)NOTE_AUDIO_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_IMAGE_ICON;)
+ (NSString * _Nonnull)NOTE_IMAGE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_TEXT_ICON;)
+ (NSString * _Nonnull)NOTE_TEXT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_VIDEO_ICON;)
+ (NSString * _Nonnull)NOTE_VIDEO_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DELETE_BOOK_ICON;)
+ (NSString * _Nonnull)DELETE_BOOK_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SYNC_ICON;)
+ (NSString * _Nonnull)SYNC_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ANALYTICS_ICON;)
+ (NSString * _Nonnull)ANALYTICS_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYDATA_ICON01;)
+ (NSString * _Nonnull)MYDATA_ICON01 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FIT_TO_ACTUAL;)
+ (NSString * _Nonnull)ICON_FIT_TO_ACTUAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VIDEO_PLAYER_CLOSE_ICON;)
+ (NSString * _Nonnull)VIDEO_PLAYER_CLOSE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STATISTIC_CLOSE_ICON;)
+ (NSString * _Nonnull)STATISTIC_CLOSE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STATISTIC_LAUNCH_ICON;)
+ (NSString * _Nonnull)STATISTIC_LAUNCH_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VIDEO_PLAYER_DRAG_HANDLE_ICON;)
+ (NSString * _Nonnull)VIDEO_PLAYER_DRAG_HANDLE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CLOSE_ICON;)
+ (NSString * _Nonnull)CLOSE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ADD_ICON;)
+ (NSString * _Nonnull)ADD_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MOVE_SHELF_UP;)
+ (NSString * _Nonnull)ICON_MOVE_SHELF_UP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MOVE_SHELF_DOWN;)
+ (NSString * _Nonnull)ICON_MOVE_SHELF_DOWN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CHECK_SHARE;)
+ (NSString * _Nonnull)ICON_CHECK_SHARE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EDIT_MENU_ICON;)
+ (NSString * _Nonnull)EDIT_MENU_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BRUSH_ICON;)
+ (NSString * _Nonnull)BRUSH_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DONE_ICON;)
+ (NSString * _Nonnull)DONE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ERASER_ICON;)
+ (NSString * _Nonnull)ERASER_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_TICK;)
+ (NSString * _Nonnull)CIRCLE_TICK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EXPAND_POP_ICON;)
+ (NSString * _Nonnull)EXPAND_POP_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLLAPSE_POP_ICON;)
+ (NSString * _Nonnull)COLLAPSE_POP_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIGHLIGHT_SORT_ICON;)
+ (NSString * _Nonnull)HIGHLIGHT_SORT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EXPAND_ICON;)
+ (NSString * _Nonnull)EXPAND_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FORWARD;)
+ (NSString * _Nonnull)ICON_FORWARD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BACKWARD;)
+ (NSString * _Nonnull)ICON_BACKWARD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLLAPSE_ICON;)
+ (NSString * _Nonnull)COLLAPSE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SIGNIN_NEW;)
+ (NSString * _Nonnull)ICON_SIGNIN_NEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TEACHER_ICON;)
+ (NSString * _Nonnull)TEACHER_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STUDENT_ICON;)
+ (NSString * _Nonnull)STUDENT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TEACHER_ANNOTATION_ICON;)
+ (NSString * _Nonnull)TEACHER_ANNOTATION_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CLOUD_UPLOAD_ICON;)
+ (NSString * _Nonnull)CLOUD_UPLOAD_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOVE_SHELF_UP_ICON;)
+ (NSString * _Nonnull)MOVE_SHELF_UP_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOVE_SHELF_DOWN_ICON;)
+ (NSString * _Nonnull)MOVE_SHELF_DOWN_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DELETE_SHELF_ICON;)
+ (NSString * _Nonnull)DELETE_SHELF_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EBOOK_DOWNLOAD_ICON;)
+ (NSString * _Nonnull)EBOOK_DOWNLOAD_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull POPOUT_ICON;)
+ (NSString * _Nonnull)POPOUT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MULTIFILE_ICON;)
+ (NSString * _Nonnull)MULTIFILE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COMMENT_ICON;)
+ (NSString * _Nonnull)COMMENT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTMLWRAP_ICON;)
+ (NSString * _Nonnull)HTMLWRAP_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TOC_MENU_ICON;)
+ (NSString * _Nonnull)TOC_MENU_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOK_COVER_ICON;)
+ (NSString * _Nonnull)BOOK_COVER_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLLECTION_COVER_ICON;)
+ (NSString * _Nonnull)COLLECTION_COVER_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LEFT_ARROW_MARK_ICON;)
+ (NSString * _Nonnull)LEFT_ARROW_MARK_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DOWN_ARROW_ICON;)
+ (NSString * _Nonnull)DOWN_ARROW_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UPLOAD_ICON;)
+ (NSString * _Nonnull)UPLOAD_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ERASE_ICON;)
+ (NSString * _Nonnull)ERASE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CLOSE_NOTE_ICON;)
+ (NSString * _Nonnull)CLOSE_NOTE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NO_RESOURCE_ICON;)
+ (NSString * _Nonnull)NO_RESOURCE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DOWNLOAD_BOOK_ICON;)
+ (NSString * _Nonnull)DOWNLOAD_BOOK_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull INFO_ICON;)
+ (NSString * _Nonnull)INFO_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCESS_CODE_ICON;)
+ (NSString * _Nonnull)ACCESS_CODE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SLIDE_SHOW_ICON;)
+ (NSString * _Nonnull)SLIDE_SHOW_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KITABOO_LOGO_ICON;)
+ (NSString * _Nonnull)KITABOO_LOGO_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TEXT_SETTINGS_ICON;)
+ (NSString * _Nonnull)TEXT_SETTINGS_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BACK_CIRCLE_ICON;)
+ (NSString * _Nonnull)BACK_CIRCLE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NEXT_CIRCLE_ICON;)
+ (NSString * _Nonnull)NEXT_CIRCLE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHAPTER_NEXT_ICON;)
+ (NSString * _Nonnull)CHAPTER_NEXT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHAPTER_PREV_ICON;)
+ (NSString * _Nonnull)CHAPTER_PREV_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLOR_PICKER_ICON;)
+ (NSString * _Nonnull)COLOR_PICKER_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMPORTANT_ICON;)
+ (NSString * _Nonnull)IMPORTANT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ARCHIVE_ICON;)
+ (NSString * _Nonnull)ARCHIVE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KITABOO_TEXT_LOGO_ICON;)
+ (NSString * _Nonnull)KITABOO_TEXT_LOGO_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STUDENT_TEACHER_ICON;)
+ (NSString * _Nonnull)STUDENT_TEACHER_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PREVIEW_ICON;)
+ (NSString * _Nonnull)PREVIEW_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SEND_ARROW_ICON;)
+ (NSString * _Nonnull)SEND_ARROW_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAGE_SESSION_ICON;)
+ (NSString * _Nonnull)PAGE_SESSION_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TOTAL_READING_SESSION_ICON;)
+ (NSString * _Nonnull)TOTAL_READING_SESSION_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull READING_TIME_ICON;)
+ (NSString * _Nonnull)READING_TIME_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PREVIEW_HIDE_ICON;)
+ (NSString * _Nonnull)PREVIEW_HIDE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SHARE;)
+ (NSString * _Nonnull)ICON_SHARE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DRAG_AND_DROP_SEQUENCING_VERTICAL_ICON;)
+ (NSString * _Nonnull)DRAG_AND_DROP_SEQUENCING_VERTICAL_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_COMMENT;)
+ (NSString * _Nonnull)ICON_COMMENT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAGE_CURL_ICON;)
+ (NSString * _Nonnull)PAGE_CURL_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAGE_TRANSITION_ICON;)
+ (NSString * _Nonnull)PAGE_TRANSITION_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ACCORDION_ACTIVITY;)
+ (NSString * _Nonnull)ICON_ACCORDION_ACTIVITY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_ACCORDION_TEXT_AND_GRAPHIC;)
+ (NSString * _Nonnull)ICON_ACCORDION_TEXT_AND_GRAPHIC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BEAT_THE_CLOCK_ICON;)
+ (NSString * _Nonnull)BEAT_THE_CLOCK_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BULLET_IMAGE_LR_ICON;)
+ (NSString * _Nonnull)BULLET_IMAGE_LR_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CAROUSEL_ICON;)
+ (NSString * _Nonnull)CAROUSEL_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CASE_STUDY_WITH_TABS_TF_AND_MCQ_IN_T;)
+ (NSString * _Nonnull)ICON_CASE_STUDY_WITH_TABS_TF_AND_MCQ_IN_T SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CATEGORISE_BOTTOM_ICON;)
+ (NSString * _Nonnull)CATEGORISE_BOTTOM_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CATEGORISE_RIGHT_ICON;)
+ (NSString * _Nonnull)CATEGORISE_RIGHT_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CLICK_TO_REVEAL_BULLETED_TEXT;)
+ (NSString * _Nonnull)ICON_CLICK_TO_REVEAL_BULLETED_TEXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CLICK_TO_REVEAL_TEXT_ON_TOP;)
+ (NSString * _Nonnull)ICON_CLICK_TO_REVEAL_TEXT_ON_TOP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CLICK_TO_REVEAL_TEXT_IMAGE_GRID_WITH_POPUP;)
+ (NSString * _Nonnull)ICON_CLICK_TO_REVEAL_TEXT_IMAGE_GRID_WITH_POPUP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CLICK_TO_REVEAL_HORIZONTAL_TEXT_IMAGE_GRID_WITH_POPUP;)
+ (NSString * _Nonnull)ICON_CLICK_TO_REVEAL_HORIZONTAL_TEXT_IMAGE_GRID_WITH_POPUP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONCENTRATION_ICON;)
+ (NSString * _Nonnull)CONCENTRATION_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CROSSWORD_ICON;)
+ (NSString * _Nonnull)CROSSWORD_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DD_HOT_SPOT_70_CHARS;)
+ (NSString * _Nonnull)ICON_DD_HOT_SPOT_70_CHARS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DD_HOT_SPOT_150_CHARS;)
+ (NSString * _Nonnull)ICON_DD_HOT_SPOT_150_CHARS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DECISION_TREE_ICON;)
+ (NSString * _Nonnull)DECISION_TREE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DRAG_AND_DROP_SEQUENCING_TIMELINE;)
+ (NSString * _Nonnull)ICON_DRAG_AND_DROP_SEQUENCING_TIMELINE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DRAG_AND_DROP_SORTING;)
+ (NSString * _Nonnull)ICON_DRAG_AND_DROP_SORTING SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FILL_IN_THE_BLANK_DROP_DOWN;)
+ (NSString * _Nonnull)ICON_FILL_IN_THE_BLANK_DROP_DOWN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FILL_IN_THE_BLANK_INPUT_TYPE;)
+ (NSString * _Nonnull)ICON_FILL_IN_THE_BLANK_INPUT_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FLASH_CARDS_MCQ;)
+ (NSString * _Nonnull)ICON_FLASH_CARDS_MCQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FLASH_CARDS;)
+ (NSString * _Nonnull)ICON_FLASH_CARDS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_GENERIC;)
+ (NSString * _Nonnull)ICON_GENERIC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_HANGMAN;)
+ (NSString * _Nonnull)ICON_HANGMAN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_HOTSPOT_CLICK_TO_REVEAL;)
+ (NSString * _Nonnull)ICON_HOTSPOT_CLICK_TO_REVEAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGE_ON_RIGHT_TEXT_ON_LEFT;)
+ (NSString * _Nonnull)ICON_IMAGE_ON_RIGHT_TEXT_ON_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGE_ON_TOP_TEXT_ON_BOTTOM;)
+ (NSString * _Nonnull)ICON_IMAGE_ON_TOP_TEXT_ON_BOTTOM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGE_ON_BOTTOM_TEXT_ON_TOP;)
+ (NSString * _Nonnull)ICON_IMAGE_ON_BOTTOM_TEXT_ON_TOP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGES_AT_TOP_RIGHT_BOTTOM_LEFT;)
+ (NSString * _Nonnull)ICON_IMAGES_AT_TOP_RIGHT_BOTTOM_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MATCH_THE_PAIRS_VERTICAL;)
+ (NSString * _Nonnull)ICON_MATCH_THE_PAIRS_VERTICAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_JOURNAL;)
+ (NSString * _Nonnull)ICON_JOURNAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_JUMBLED_WORDS_MHOL;)
+ (NSString * _Nonnull)ICON_JUMBLED_WORDS_MHOL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGES_ON_RIGHT_AND_TEXT_ON_LEFT;)
+ (NSString * _Nonnull)ICON_IMAGES_ON_RIGHT_AND_TEXT_ON_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_LAYOUT_FOUR;)
+ (NSString * _Nonnull)ICON_LAYOUT_FOUR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_LAYOUT_ONE;)
+ (NSString * _Nonnull)ICON_LAYOUT_ONE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_LAYOUT_THREE;)
+ (NSString * _Nonnull)ICON_LAYOUT_THREE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_LAYOUT_TWO;)
+ (NSString * _Nonnull)ICON_LAYOUT_TWO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MATCH_THE_PAIRS_DRAW_LINES;)
+ (NSString * _Nonnull)ICON_MATCH_THE_PAIRS_DRAW_LINES SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRUE_OR_FALSE_ICON;)
+ (NSString * _Nonnull)TRUE_OR_FALSE_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WORDS_SEARCH_ICON;)
+ (NSString * _Nonnull)WORDS_SEARCH_ICON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO_2;)
+ (NSString * _Nonnull)ICON_VIDEO_2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO_WITH_INTERACTIVITY;)
+ (NSString * _Nonnull)ICON_VIDEO_WITH_INTERACTIVITY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_TABBED_TABLE;)
+ (NSString * _Nonnull)ICON_TABBED_TABLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MULTIPLE_CHOICE_SINGLE_SELECT;)
+ (NSString * _Nonnull)ICON_MULTIPLE_CHOICE_SINGLE_SELECT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_TEXT_CENTER_INLINE;)
+ (NSString * _Nonnull)ICON_TEXT_CENTER_INLINE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MULTIPLE_CHOICE_MULTIPLE_SELECT;)
+ (NSString * _Nonnull)ICON_MULTIPLE_CHOICE_MULTIPLE_SELECT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MATCH_THE_PAIRS;)
+ (NSString * _Nonnull)ICON_MATCH_THE_PAIRS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_OVERFLOW;)
+ (NSString * _Nonnull)ICON_OVERFLOW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_GALLERY_2;)
+ (NSString * _Nonnull)ICON_GALLERY_2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGE_2;)
+ (NSString * _Nonnull)ICON_IMAGE_2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MIC;)
+ (NSString * _Nonnull)ICON_MIC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO_3;)
+ (NSString * _Nonnull)ICON_VIDEO_3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BACK_ARROW_BUTTON;)
+ (NSString * _Nonnull)ICON_BACK_ARROW_BUTTON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SURVEY;)
+ (NSString * _Nonnull)ICON_SURVEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_GLOSSARY;)
+ (NSString * _Nonnull)ICON_GLOSSARY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_JUMP_TO_BOOK;)
+ (NSString * _Nonnull)ICON_JUMP_TO_BOOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_PORTO_REFRESH;)
+ (NSString * _Nonnull)ICON_PORTO_REFRESH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_IMAGE_ZOOM;)
+ (NSString * _Nonnull)ICON_IMAGE_ZOOM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MINIMIZE;)
+ (NSString * _Nonnull)ICON_MINIMIZE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DRAG;)
+ (NSString * _Nonnull)ICON_DRAG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_NAME_EDIT;)
+ (NSString * _Nonnull)ICON_NAME_EDIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_PROTRACTOR;)
+ (NSString * _Nonnull)ICON_PROTRACTOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull READ_TO_ME_LET_ME_READ;)
+ (NSString * _Nonnull)READ_TO_ME_LET_ME_READ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull READ_TO_ME_READ_TO_ME;)
+ (NSString * _Nonnull)READ_TO_ME_READ_TO_ME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull READ_TO_ME_AUTOPLAY;)
+ (NSString * _Nonnull)READ_TO_ME_AUTOPLAY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_EQUATION_EDITOR;)
+ (NSString * _Nonnull)ICON_EQUATION_EDITOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_EQUATION_EDITOR_NEW;)
+ (NSString * _Nonnull)ICON_EQUATION_EDITOR_NEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SETTINGS_BRIGHTNESS;)
+ (NSString * _Nonnull)ICON_SETTINGS_BRIGHTNESS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MUTE_AUDIO;)
+ (NSString * _Nonnull)ICON_MUTE_AUDIO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BACK_ARROW;)
+ (NSString * _Nonnull)ICON_BACK_ARROW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_NEXT_CHAPTER;)
+ (NSString * _Nonnull)ICON_NEXT_CHAPTER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_PREV_CHAPTER;)
+ (NSString * _Nonnull)ICON_PREV_CHAPTER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FORWARD_AUDIOBOOK;)
+ (NSString * _Nonnull)ICON_FORWARD_AUDIOBOOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BACKWARD_AUDIOBOOK;)
+ (NSString * _Nonnull)ICON_BACKWARD_AUDIOBOOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BOOKMARK_AUDIOBOOK;)
+ (NSString * _Nonnull)ICON_BOOKMARK_AUDIOBOOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BOOKMARK_ADDED_AUDIOBOOK;)
+ (NSString * _Nonnull)ICON_BOOKMARK_ADDED_AUDIOBOOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_DELETE_AUDIOBOOK;)
+ (NSString * _Nonnull)ICON_DELETE_AUDIOBOOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_CIRCULAR_PLAY;)
+ (NSString * _Nonnull)ICON_CIRCULAR_PLAY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO_FULLSCREEN;)
+ (NSString * _Nonnull)ICON_VIDEO_FULLSCREEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO_NORMALSCREEN;)
+ (NSString * _Nonnull)ICON_VIDEO_NORMALSCREEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO_MUTE;)
+ (NSString * _Nonnull)ICON_VIDEO_MUTE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_VIDEO_UMMUTE;)
+ (NSString * _Nonnull)ICON_VIDEO_UMMUTE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FORWARD_AUDIOBOOK_30SEC;)
+ (NSString * _Nonnull)ICON_FORWARD_AUDIOBOOK_30SEC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BACKWARD_AUDIOBOOK_30SEC;)
+ (NSString * _Nonnull)ICON_BACKWARD_AUDIOBOOK_30SEC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_FORWARD_AUDIOBOOK_15SEC;)
+ (NSString * _Nonnull)ICON_FORWARD_AUDIOBOOK_15SEC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_BACKWARD_AUDIOBOOK_15SEC;)
+ (NSString * _Nonnull)ICON_BACKWARD_AUDIOBOOK_15SEC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_SLEEP_MODE;)
+ (NSString * _Nonnull)ICON_SLEEP_MODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_RADIO_SELECTED;)
+ (NSString * _Nonnull)ICON_RADIO_SELECTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_RADIO_UNSELECTED;)
+ (NSString * _Nonnull)ICON_RADIO_UNSELECTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_MULTILEVEL_CHAPTER_DROP_DOWN;)
+ (NSString * _Nonnull)ICON_MULTILEVEL_CHAPTER_DROP_DOWN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICON_K_AI;)
+ (NSString * _Nonnull)ICON_K_AI SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// SDKPentoolVO is responsible for pentool data.
/// @discussion SDKPentoolVO defines all the parameters/atrributes which are required to create any pen drawing.Eg. colorCode, penThickness, penToolPoints etc.
/// @superclass SuperClass : UGC
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12SDKPentoolVO")
@interface SDKPentoolVO : UGC
@property (nonatomic, copy) NSString * _Nullable colorCode;
@property (nonatomic, strong) NSNumber * _Nullable penThickness;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull penToolPoints;
@property (nonatomic, strong) NSNumber * _Nullable penType;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable penToolData;
@property (nonatomic) BOOL isSubmitted;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15SDKProtractorVO")
@interface SDKProtractorVO : SDKPentoolVO
@property (nonatomic) float protractorLineThickness;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TextAnnotationAlignment : NSInteger;

/// SDKTextAnnotationVO is responsible for Text Annotation.
/// @discussion SDKTextAnnotationVO defines all the parameters/atrributes which are required to create text annotation.
/// @superclass SuperClass : UGC
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19SDKTextAnnotationVO")
@interface SDKTextAnnotationVO : UGC
@property (nonatomic, copy) NSDictionary * _Nullable metaData;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, copy) NSString * _Nullable fontName;
@property (nonatomic) float fontSize;
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic) enum TextAnnotationAlignment textAlignment;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("SDKUtility")
@interface SDKUtility : NSObject
+ (NSString * _Nonnull)getSDKDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8SVG_V6_0")
@interface SVG_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable opacity;
@property (nonatomic, copy) NSString * _Nullable color;
@property (nonatomic, copy) NSString * _Nullable backgroundHTML;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22ScormImsManifestParser")
@interface ScormImsManifestParser : NSObject <NSXMLParserDelegate>
@property (nonatomic) BOOL isInManifest;
@property (nonatomic) BOOL isInResources;
@property (nonatomic, copy) NSString * _Nonnull coreHtmlPath;
- (BOOL)parse:(NSString * _Nonnull)filePath error:(NSError * _Nullable * _Nullable)error;
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10ScreenSize")
@interface ScreenSize : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ScrollDirection, open) {
  ScrollDirectionSCROLL_NONE = 0,
  ScrollDirectionSCROLL_DOWN = 1,
  ScrollDirectionSCROLL_UP = 2,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15ScrollView_V6_0")
@interface ScrollView_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable tabBg;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable selectedTabBg;
@property (nonatomic, copy) NSString * _Nullable selectedTextColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20SelectedChapter_V6_0")
@interface SelectedChapter_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable chapterTimeColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16SelectedToc_V6_0")
@interface SelectedToc_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable divider;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable descriptionColor;
@property (nonatomic, copy) NSString * _Nullable arrowColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable sideTabBackground;
@property (nonatomic, copy) NSString * _Nullable levelBackground;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15SettingsV6_V6_0")
@interface SettingsV6_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable boxBorderColor;
@property (nonatomic, copy) NSString * _Nullable sectionTitleColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable checkColor;
@property (nonatomic, strong) ActionButton_V6_V6_0 * _Nullable actionButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18ShareFeedback_V6_0")
@interface ShareFeedback_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable emojiBackground;
@property (nonatomic, copy) NSString * _Nullable feedbackRespBorder;
@property (nonatomic, copy) NSString * _Nullable activeFeedbackBackground;
@property (nonatomic, copy) NSString * _Nullable existingFeedbackBackground;
@property (nonatomic, copy) NSString * _Nullable editFeedbackBtnColor;
@property (nonatomic, copy) NSString * _Nullable deleteFeedbackBtnColor;
@property (nonatomic, copy) NSString * _Nullable topbarDECColor;
@property (nonatomic, copy) NSString * _Nullable topbarProfileColor;
@property (nonatomic, copy) NSString * _Nullable dividerBackground;
@property (nonatomic, copy) NSString * _Nullable feedbackQtnColor;
@property (nonatomic, copy) NSString * _Nullable feedbackImproveColor;
@property (nonatomic, copy) NSString * _Nullable feedbackRespColor;
@property (nonatomic, copy) NSString * _Nullable submitBackground;
@property (nonatomic, copy) NSString * _Nullable editFeedbackColor;
@property (nonatomic, copy) NSString * _Nullable deleteCancelBorder;
@property (nonatomic, copy) NSString * _Nullable deleteOkBackground;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that manage a view for sharing a note/highlights.
/// <ul>
///   <li>
///     ShareSettingsController defines a view which appears, when user tap on settings button in MyDataController or share button of note controller. The share settings view is presented which contains information such as, to which teacher or student user wants to share his/her note/highlights.
///   </li>
///   <li>
///     SuperClass : UIViewController
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23ShareSettingsController")
@interface ShareSettingsController : UIViewController <HDDropDownDelegate, UITableViewDataSource, UITableViewDelegate>
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)didSelectItemWithName:(NSString * _Nonnull)name;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18ShareSettings_V6_0")
@interface ShareSettings_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable sectionTitleColor;
@property (nonatomic, copy) NSString * _Nullable boxBorderColor;
@property (nonatomic, copy) NSString * _Nullable allBoxBorderColor;
@property (nonatomic, copy) NSString * _Nullable checkColor;
@property (nonatomic, copy) NSString * _Nullable bottomBackground;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable mainActionColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK10Share_V6_0")
@interface Share_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable sharePopupBackground;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, strong) ShareSettings_V6_0 * _Nullable shareSettings;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14SharedUserInfo")
@interface SharedUserInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK15SideBottom_V6_0")
@interface SideBottom_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable shadow;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconBg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14Sidepanel_V6_0")
@interface Sidepanel_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable tabBg;
@property (nonatomic, copy) NSString * _Nullable tabBorder;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedTabBorder;
@property (nonatomic, copy) NSString * _Nullable selectedTextColor;
@property (nonatomic, strong) SelectedChapter_V6_0 * _Nullable selectedChapter;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable descriptionColor;
@property (nonatomic, copy) NSString * _Nullable timeColor;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable deleteIconColor;
@property (nonatomic, copy) NSString * _Nullable dividerColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11SignIn_V6_0")
@interface SignIn_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable loginLeftBgcolor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK11Signin_V6_0")
@interface Signin_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable leftBackground;
@property (nonatomic, copy) NSString * _Nullable signinBackground;
@property (nonatomic, copy) NSString * _Nullable horizontalDivider;
@property (nonatomic, copy) NSString * _Nullable tabSelected;
@property (nonatomic, copy) NSString * _Nullable tabDeselected;
@property (nonatomic, copy) NSString * _Nullable inputOutline;
@property (nonatomic, copy) NSString * _Nullable inputLabel;
@property (nonatomic, copy) NSString * _Nullable inputUsernamepassword;
@property (nonatomic, copy) NSString * _Nullable signinText;
@property (nonatomic, copy) NSString * _Nullable signinTextDisabled;
@property (nonatomic, copy) NSString * _Nullable signinDisabled;
@property (nonatomic, copy) NSString * _Nullable signinEnabled;
@property (nonatomic, copy) NSString * _Nullable remebermeRecoverPassword;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
@property (nonatomic, copy) NSString * _Nullable downloadappText;
@property (nonatomic, copy) NSString * _Nullable autofillbackground;
@property (nonatomic, copy) NSString * _Nullable leftHeadingTextcolor;
@property (nonatomic, copy) NSString * _Nullable spinner;
@property (nonatomic, copy) NSString * _Nullable termconditiontext;
@property (nonatomic, copy) NSString * _Nullable linkText;
@property (nonatomic, copy) NSString * _Nullable validationtext;
@property (nonatomic, copy) NSString * _Nullable Selected_Tab_Text;
@property (nonatomic, copy) NSString * _Nullable Signin_Remeberme;
@property (nonatomic, copy) NSString * _Nullable Signin_Remeberme_checkbox_bgColor;
@property (nonatomic, copy) NSString * _Nullable Signin_RecoverPassword;
@property (nonatomic, copy) NSString * _Nullable freetrial_text;
@property (nonatomic, copy) NSString * _Nullable freetrial_btn_border;
@property (nonatomic, copy) NSString * _Nullable Signup_Input_border;
@property (nonatomic, copy) NSString * _Nullable Signup_Input_Focus_border;
@property (nonatomic, strong) ForgotPassword_V6_0 * _Nullable forgotPassword;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18SignoutButton_V6_0")
@interface SignoutButton_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable icons_color;
@property (nonatomic, copy) NSString * _Nullable text_color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12Signout_V6_0")
@interface Signout_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SleepAction, open) {
  SleepActionKSleepActionNone = 0,
  SleepActionKSleepAction15Min = 1,
  SleepActionKSleepAction30Min = 2,
  SleepActionKSleepAction45Min = 3,
  SleepActionKSleepActionCustom = 4,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20SlideController_V6_0")
@interface SlideController_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable controllerColor;
@property (nonatomic, copy) NSString * _Nullable opacity;
@property (nonatomic, copy) NSString * _Nullable backgroundHTML;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20SlideshowMarkup_V6_0")
@interface SlideshowMarkup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable boxShadow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     The StickyNoteController class is used to detect the user’s touch point on the screen to create a note at the detected touch point.
///   </li>
///   <li>
///     SuperClass: UIView
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20StickyNoteController")
@interface StickyNoteController : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     protocol: StickyNoteControllerDelegate.
///   </li>
///   <li>
///     brief: The delegate of a StickyNoteController object must adopt the StickyNoteControllerDelegate protocol.
///   </li>
///   <li>
///     discussion: StickyNoteControllerDelegate Protocol used to handle all the callbacks of StickyNoteController Class. All the Delegate methods are optional. The StickyNoteControllerDelegate protocol defines method that allow user to perform action when sticky note icon is tapped.
///   </li>
///   <li>
///     When configuring the StickyNoteController object, assign your delegate object to its delegate property.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK28StickyNoteControllerDelegate_")
@protocol StickyNoteControllerDelegate
/// This method is called when the user taps on any point on the screen.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     stickyNoteController: An object of class StickyNoteController.
///   </li>
///   <li>
///     tapPoint: The CGPoint representing the tap point on the screen.
///   </li>
///   <li>
///     discussion: The tapPoint returns the coordinates where the user tapped on the screen. You can use this touch point to perform operations like creating a note at the touch point.
///   </li>
/// </ul>
- (void)didTapOnStickNoteController:(StickyNoteController * _Nonnull)stickyNoteController at:(CGPoint)tapPoint;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14SubButton_V6_0")
@interface SubButton_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable textIconColor;
@property (nonatomic, copy) NSString * _Nullable disabledTextIconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TEXT_ALIGNMENT, open) {
  TEXT_ALIGNMENTLEFT_ALIGNMENT = 0,
  TEXT_ALIGNMENTCENTER_ALIGNMENT = 1,
  TEXT_ALIGNMENTRIGHT_ALIGNMENT = 2,
  TEXT_ALIGNMENTJUSTIFY_ALIGNMENT = 3,
  TEXT_ALIGNMENTDEFAULT_ALIGNMENT = 4,
};

typedef SWIFT_ENUM(NSInteger, TEXT_LINESPACING, open) {
  TEXT_LINESPACINGDEFAULT_LINESPACING = 0,
  TEXT_LINESPACINGSMALL_LINESPACING = 1,
  TEXT_LINESPACINGMEDIUM_LINESPACING = 2,
  TEXT_LINESPACINGLARGE_LINESPACING = 3,
};


/// An Object that manages a Toc view.
/// The <code>TOCController</code> class is responsible for displaying data on Toc data and handling actions for TOC.
/// <ul>
///   <li>
///     Superclass: <code>UIViewController</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13TOCController")
@interface TOCController : UIViewController <UITableViewDataSource, UITableViewDelegate>
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly, strong) UITraitCollection * _Nonnull traitCollection;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The delegate of a TOCController object must adopt the TOCControllerDelegate protocol.
/// The TOCControllerDelegate protocol is used to handle all the callbacks of the TOCController class. It defines methods that allow the user to perform actions when any segment (content, resource, bookmark) is tapped or when any data row from the segment is tapped by the user. All delegate methods are optional.
/// When configuring the TOCController object, assign your delegate object to its delegate property.
SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK21TOCControllerDelegate_")
@protocol TOCControllerDelegate
/// Will be called when the user taps on any row in the TOCController.
/// This method provides the pageID for which the row was selected. Use this pageID to navigate to the respective page using the Renderer method.
/// \param pageID The page number where the user navigates.
///
- (void)navigateToPage:(NSString * _Nonnull)pageID;
/// Will be called when the user taps on the content segment.
/// When the user selects the content segment, this method gets called. You can update the table view data to show content-related data.
- (void)didSelectContentSegment;
/// Will be called when the user taps on a specific resource in the resource segment.
/// When the user selects a specific resource in the resource segment, this method gets called. You can write the action that needs to be performed when the user taps on the link.
/// \param linkVO The KFLinkVO object of the selected resource.
///
- (void)actionForLink:(KFLinkVO * _Nonnull)linkVO;
/// Will be called when the user taps on the resource segment.
/// When the user selects the resource segment, this method gets called. You can update the table view data to show resource-related data.
- (void)didSelectResourceSegment;
/// Will be called when the user taps on the bookmark segment.
/// When the user selects the bookmark segment, this method gets called. You can update the table view data to show bookmark-related data.
- (void)didSelectBookmarkSegment;
/// Will be called when the user performs an action to close the TOC.
/// When the TOC is opened on mobile and the user taps on the back button present on the TOC view, this method gets called. You can write code to remove the TOC view when tapped on the back button.
- (void)didSelectActionToCloseTOC;
/// Will be called while setting the icon for resources present in the resource segment.
/// While setting the icon for resources present in the resource segment, this method gets called. You can return the icon name that needs to be set.
/// \param linkVO The KFLinkVO object of the resource.
///
///
/// returns:
/// The icon name to be set.
- (NSString * _Nonnull)labelTextForLink:(KFLinkVO * _Nonnull)linkVO SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, TOOL_TYPE, open) {
  TOOL_TYPENone = 0,
  TOOL_TYPEToc = 1,
  TOOL_TYPEMyData = 2,
  TOOL_TYPESearch = 3,
  TOOL_TYPEPen = 4,
  TOOL_TYPEAnalytics = 5,
  TOOL_TYPEReview = 6,
  TOOL_TYPESubmit = 7,
  TOOL_TYPEThumbnails = 8,
  TOOL_TYPEInline = 9,
  TOOL_TYPEStickyNote = 10,
  TOOL_TYPENote = 11,
  TOOL_TYPEPostit = 12,
  TOOL_TYPETsView = 13,
  TOOL_TYPEReviewListing = 14,
  TOOL_TYPEMedia = 15,
  TOOL_TYPENoTool = 16,
  TOOL_TYPEKalturaWait = 17,
  TOOL_TYPEHighlight = 18,
  TOOL_TYPEReadToMe = 19,
  TOOL_TYPEProtractor = 20,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20Tableofcontents_V6_0")
@interface Tableofcontents_V6_0 : NSObject
@property (nonatomic, strong) OverlayPanel_V6_V6_0 * _Nullable overlayPanel;
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable tabBg;
@property (nonatomic, copy) NSString * _Nullable tabBorder;
@property (nonatomic, copy) NSString * _Nullable tabBorderWrapper;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedTabBorder;
@property (nonatomic, copy) NSString * _Nullable selectedTextColor;
@property (nonatomic, copy) NSString * _Nullable chlabelFontweight;
@property (nonatomic, strong) SelectedToc_V6_0 * _Nullable selectedToc;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable descriptionColor;
@property (nonatomic, copy) NSString * _Nullable pagenoColor;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable moreIconColor;
@property (nonatomic, copy) NSString * _Nullable dividerColor;
@property (nonatomic, strong) CloseSlider_V6_0 * _Nullable closeSlider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TaskStatus, "TaskStatus", open) {
  TaskStatusUnknown = 0,
  TaskStatusGettingInfo = 1,
  TaskStatusStarted = 2,
  TaskStatusDownloading = 3,
  TaskStatusPaused = 4,
  TaskStatusCancelled = 5,
  TaskStatusFinished = 6,
  TaskStatusFailed = 7,
};


SWIFT_CLASS_NAMED("TeacherReviewController")
@interface TeacherReviewController : UIViewController <PlayerActionDelegate, UIGestureRecognizerDelegate, UITableViewDataSource, UITableViewDelegate>
- (void)viewDidLoad;
- (void)didSelectedPlayerActionBar:(PlayerActionBar * _Nonnull)playerActionBar withItem:(PlayerActionBarItem * _Nonnull)item;
- (void)willResetPlayerActionBar:(PlayerActionBar * _Nonnull)playerActionBar;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK21TeacherReviewDelegate_")
@protocol TeacherReviewDelegate <NSObject>
@optional
/// <ul>
///   <li>
///     Will be called when a learner name is selected.
///   </li>
///   <li>
///   </li>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     <ul>
///       <li>
///         learnerName: Selected learner name.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <ul>
///       <li>
///         learnerID: Selected learner’s ID.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didSelectLearner:(NSString * _Nonnull)learnerName withLearnerID:(NSString * _Nonnull)learnerID;
/// <ul>
///   <li>
///     Will be called when the Pentool is selected.
///   </li>
/// </ul>
- (void)didSelectPenTypeForTeacherReview;
/// <ul>
///   <li>
///     Will be called when the PenTool color is selected.
///   </li>
///   <li>
///   </li>
/// </ul>
/// \param color Selected Pen color.
///
- (void)didSelectPenColorForTeacherReview:(NSString * _Nonnull)color;
/// <ul>
///   <li>
///     Will be called when the Eraser mode is selected.
///   </li>
/// </ul>
- (void)didSelectEraserForTeacherReview;
/// <ul>
///   <li>
///     Will be called when the Delete option is selected.
///   </li>
/// </ul>
- (void)didSelectDeleteForTeacherReview;
/// <ul>
///   <li>
///     Will be called when the Done option is selected.
///   </li>
///   <li>
///   </li>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     <ul>
///       <li>
///         anotations: Annotations of recently updated UGCs.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <ul>
///       <li>
///         learnerID: Selected Learner ID.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didSelectDoneForTeacherReviewWithUpdatedAnotations:(NSArray * _Nonnull)anotations forLearnerID:(NSString * _Nonnull)learnerID;
/// <ul>
///   <li>
///     Will be called when the Navigate Page buttons are selected.
///   </li>
///   <li>
///   </li>
/// </ul>
/// \param pageNumber Page number.
///
- (void)didSelectNavigatePageButtonForTeacherReview:(NSString * _Nonnull)pageNumber;
/// <ul>
///   <li>
///     Will be called when the Student Popup is opened or closed.
///   </li>
///   <li>
///   </li>
/// </ul>
/// \param isStudentPopUpOpen Indicates whether the popup is open or closed.
///
- (void)didStudentPopUpOpen:(BOOL)isStudentPopUpOpen;
/// <ul>
///   <li>
///     Will be called when the Clear All option is selected.
///   </li>
/// </ul>
- (void)didSelectClearAllForTeacherReview;
/// <ul>
///   <li>
///     Will be called when the Generate Report button is tapped.
///   </li>
/// </ul>
- (void)didSelectGenerateReport;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20TeacherReviewFibView")
@interface TeacherReviewFibView : UIView
@property (nonatomic, strong) SDKFIBVO * _Nullable fibVO;
@property (nonatomic, copy) NSArray<SDKFIBVO *> * _Nonnull fibVOArray;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20TeacherSettings_V6_0")
@interface TeacherSettings_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable mainIconColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconBg;
@property (nonatomic, copy) NSString * _Nullable pen1Color;
@property (nonatomic, copy) NSString * _Nullable pen2Color;
@property (nonatomic, copy) NSString * _Nullable boxBorderColor;
@property (nonatomic, copy) NSString * _Nullable checkColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23TeacherStudentlist_V6_0")
@interface TeacherStudentlist_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable shadow;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable hintTextColor;
@property (nonatomic, copy) NSString * _Nullable tabBorder;
@property (nonatomic, copy) NSString * _Nullable tabSelectedBar;
@property (nonatomic, copy) NSString * _Nullable tabTextColor;
@property (nonatomic, copy) NSString * _Nullable nameColor;
@property (nonatomic, copy) NSString * _Nullable dataAddedColor;
@property (nonatomic, copy) NSString * _Nullable nodataAddedColor;
@property (nonatomic, strong) Refresh_V6_0 * _Nullable refresh;
@property (nonatomic, copy) NSString * _Nullable selectedColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TextAnnotationAlignment, open) {
  TextAnnotationAlignmentLeft = 0,
  TextAnnotationAlignmentRight = 1,
  TextAnnotationAlignmentCenter = 2,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19TextAnnotation_V6_0")
@interface TextAnnotation_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable lineColor;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, strong) DisabledIcon_V6_0 * _Nullable disabledIcon;
@property (nonatomic, copy) NSString * _Nullable selectedIconBg;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, strong) AlignPopup_V6_0 * _Nullable alignPopup;
@property (nonatomic, strong) ColorPopup_V6_0 * _Nullable colorPopup;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17TextHighlightView")
@interface TextHighlightView : UIView <UIGestureRecognizerDelegate>
@property (nonatomic, weak) id <TextHighlightViewDelegate> _Nullable delegate;
@property (nonatomic) NSInteger pageId;
@property (nonatomic) NSInteger maxWordsToHighlight;
@property (nonatomic) BOOL isHighlightImportant;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, copy) NSDictionary<NSNumber *, PdfLineExtractVO *> * _Nonnull extractionsDictionary;
- (void)setHighlightColor:(UIColor * _Nonnull)highlightColor;
@property (nonatomic, strong) HighlightTool * _Nonnull highlightVO;
- (PdfWordExtractVO * _Nullable)didRecognizeLongPressAt:(CGPoint)longPressedPoint SWIFT_WARN_UNUSED_RESULT;
- (void)saveHighlight;
- (void)didClickOnDeleteButton;
- (CGRect)getTargetRectForShowingPopOverForStartLineRect:(CGRect)startLineRect andEndLineRect:(CGRect)endLineRect SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getSelectedStartWordIDAndEndWordID SWIFT_WARN_UNUSED_RESULT;
- (void)updateHighlight;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK22TextHighlightViewColor")
@interface TextHighlightViewColor : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TextHighlightViewColor * _Nonnull shared;)
+ (TextHighlightViewColor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)dictionaryForColors SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// An Object that is responsible for returning searched result data of type TextSearchResult.
/// The TextSearchController is used to return searched result, which can be displayed on TextSearchController view or users can use their customised view to display searched result.
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20TextSearchController")
@interface TextSearchController : UIViewController <UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL shouldAutorotate;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// An object that is returned as a result when the user searches for any text.
/// <ul>
///   <li>
///     @superclass SuperClass : NSObject
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16TextSearchResult")
@interface TextSearchResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19TextSelectionHandle")
@interface TextSelectionHandle : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17TextSelectionView")
@interface TextSelectionView : UIView
@property (nonatomic) BOOL isStartSelectionView;
@property (nonatomic, strong) UIColor * _Nullable selectionHandleViewColor;
@property (nonatomic, strong) TextSelectionHandle * _Nullable holderView;
@property (nonatomic) NSInteger lineID;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame isStartSelectionView:(BOOL)isStartSelectionView selectionHandleColor:(UIColor * _Nullable)selectionHandleColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@property (nonatomic) CGRect frame;
- (CGRect)getCompleteFrame SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK14Thickness_V6_0")
@interface Thickness_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable popupBorder;
@property (nonatomic, copy) NSString * _Nullable shadow;
@property (nonatomic, copy) NSString * _Nullable sliderColor;
@property (nonatomic, copy) NSString * _Nullable sliderFilledColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18Kitaboo_Reader_SDK17ThumbnailDelegate_")
@protocol ThumbnailDelegate
/// <ul>
///   <li>
///     This method gives selected page number
///   </li>
/// </ul>
- (void)didSelectThumbnailPageNo:(NSString * _Nonnull)pageNo;
/// <ul>
///   <li>
///     Will be called when user perform action to close the thumbnail
///   </li>
/// </ul>
- (void)didSelectActionToCloseThumbnail;
/// <ul>
///   <li>
///     This method will be called when user click on previous history button
///   </li>
/// </ul>
- (void)didClickPreviousHistoryButtonWithCurrentPageNumber;
/// <ul>
///   <li>
///     This method will be called when user click on next history button
///   </li>
/// </ul>
- (void)didClickNextHistoryButtonWithCurrentPageNumber;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK20ThumbnailSlider_V6_0")
@interface ThumbnailSlider_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable sliderColor;
@property (nonatomic, copy) NSString * _Nullable chapterIconColor;
@property (nonatomic, copy) NSString * _Nullable sliderFilledColor;
@property (nonatomic, copy) NSString * _Nullable defaultThumbnailColor;
@property (nonatomic, copy) NSString * _Nullable selectedThumbnailColor;
@property (nonatomic, copy) NSString * _Nullable thumbnailTextColor;
@property (nonatomic, copy) NSString * _Nullable selectedTitleColor;
@property (nonatomic, copy) NSString * _Nullable titleColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable pageSubmittedBorderColor;
@property (nonatomic, copy) NSString * _Nullable pageNotSubmittedBorderColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK23ThumbnailViewController")
@interface ThumbnailViewController : UIViewController <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, UIGestureRecognizerDelegate, UITextFieldDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)didReceiveMemoryWarning;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL shouldAutorotate;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK17Toastmessage_V6_0")
@interface Toastmessage_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
@property (nonatomic, copy) NSString * _Nullable color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8Top_V6_0")
@interface Top_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable shadow;
@property (nonatomic, copy) NSString * _Nullable selectedIconColor;
@property (nonatomic, copy) NSString * _Nullable selectedIconBg;
@property (nonatomic, copy) NSString * _Nullable titleTextColor;
@property (nonatomic, copy) NSString * _Nullable navigationArrowColor;
@property (nonatomic, copy) NSString * _Nullable profileBorder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK13Toppanel_V6_0")
@interface Toppanel_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable iconsColor;
@property (nonatomic, copy) NSString * _Nullable bookTitleTextColor;
@property (nonatomic, copy) NSString * _Nullable bottomLine;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK12UGCConstants")
@interface UGCConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TYPE_HIGHLIGHT;)
+ (NSInteger)TYPE_HIGHLIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TYPE_PENTOOL;)
+ (NSInteger)TYPE_PENTOOL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TYPE_BOOKMARK;)
+ (NSInteger)TYPE_BOOKMARK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TYPE_FIB;)
+ (NSInteger)TYPE_FIB SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TYPE_PROTRACTOR;)
+ (NSInteger)TYPE_PROTRACTOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USER_ID_KEY;)
+ (NSString * _Nonnull)USER_ID_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DELETED_KEY;)
+ (NSString * _Nonnull)DELETED_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_SYNCED_KEY;)
+ (NSString * _Nonnull)IS_SYNCED_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_SUBMITTED_KEY;)
+ (NSString * _Nonnull)IS_SUBMITTED_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOK_GUIID_KEY;)
+ (NSString * _Nonnull)BOOK_GUIID_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHAPTER_NUMBER_KEY;)
+ (NSString * _Nonnull)CHAPTER_NUMBER_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHAPTER_TITLE_KEY;)
+ (NSString * _Nonnull)CHAPTER_TITLE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAGE_ID_KEY;)
+ (NSString * _Nonnull)PAGE_ID_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLOUR_CODE_KEY;)
+ (NSString * _Nonnull)COLOUR_CODE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SERVER_ID_KEY;)
+ (NSString * _Nonnull)SERVER_ID_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DATETIME_KEY;)
+ (NSString * _Nonnull)DATETIME_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DISPLAY_NUM_KEY;)
+ (NSString * _Nonnull)DISPLAY_NUM_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PEN_TYPE_KEY;)
+ (NSString * _Nonnull)PEN_TYPE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKMARK_UNIQUE_KEY;)
+ (NSString * _Nonnull)BOOKMARK_UNIQUE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BOOKMARK_TEXT_KEY;)
+ (NSString * _Nonnull)BOOKMARK_TEXT_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HAS_NOTE_KEY;)
+ (NSString * _Nonnull)HAS_NOTE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_IMPORTANT_KEY;)
+ (NSString * _Nonnull)IS_IMPORTANT_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_TYPE_KEY;)
+ (NSString * _Nonnull)NOTE_TYPE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_SHARED;)
+ (NSString * _Nonnull)IS_SHARED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_TEXT_KEY;)
+ (NSString * _Nonnull)NOTE_TEXT_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_COMMENTS_KEY;)
+ (NSString * _Nonnull)NOTE_COMMENTS_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HIGHLIGHTED_TEXT;)
+ (NSString * _Nonnull)HIGHLIGHTED_TEXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CREATOR_NAME;)
+ (NSString * _Nonnull)CREATOR_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull START_LINE_KEY;)
+ (NSString * _Nonnull)START_LINE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull END_LINE_KEY;)
+ (NSString * _Nonnull)END_LINE_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTEX_POS_KEY;)
+ (NSString * _Nonnull)NOTEX_POS_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTEY_POS_KEY;)
+ (NSString * _Nonnull)NOTEY_POS_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CREATED_BY;)
+ (NSString * _Nonnull)CREATED_BY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CREATOR_ID;)
+ (NSString * _Nonnull)CREATOR_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLLAB_CREATOR_FIRST_NAME;)
+ (NSString * _Nonnull)COLLAB_CREATOR_FIRST_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLLAB_CREATOR_LAST_NAME;)
+ (NSString * _Nonnull)COLLAB_CREATOR_LAST_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COLLAB_CREATOR_USERNAME;)
+ (NSString * _Nonnull)COLLAB_CREATOR_USERNAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_ANSWERED;)
+ (NSString * _Nonnull)IS_ANSWERED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACTION_TAKEN;)
+ (NSString * _Nonnull)ACTION_TAKEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHARED_WITH_USERS;)
+ (NSString * _Nonnull)SHARED_WITH_USERS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CREATION_TIME;)
+ (NSString * _Nonnull)CREATION_TIME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_COLLAB_SUBMITTED;)
+ (NSString * _Nonnull)IS_COLLAB_SUBMITTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_RECEIVED;)
+ (NSString * _Nonnull)IS_RECEIVED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_SHARED;)
+ (NSString * _Nonnull)NOTE_SHARED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PEN_CORDINATES;)
+ (NSString * _Nonnull)PEN_CORDINATES SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PEN_THICKNESS;)
+ (NSString * _Nonnull)PEN_THICKNESS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PEN_TOOL_DATA;)
+ (NSString * _Nonnull)PEN_TOOL_DATA SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LOCALID;)
+ (NSString * _Nonnull)LOCALID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CREATED_ON;)
+ (NSString * _Nonnull)CREATED_ON SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ID;)
+ (NSString * _Nonnull)ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UGC_DATA;)
+ (NSString * _Nonnull)UGC_DATA SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STATUS;)
+ (NSString * _Nonnull)STATUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAGE_ID;)
+ (NSString * _Nonnull)PAGE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LOCAL_ID;)
+ (NSString * _Nonnull)LOCAL_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TYPE;)
+ (NSString * _Nonnull)TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull METADATA;)
+ (NSString * _Nonnull)METADATA SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMPORTANT;)
+ (NSString * _Nonnull)IMPORTANT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull New;)
+ (NSString * _Nonnull)New SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Update;)
+ (NSString * _Nonnull)Update SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Delete;)
+ (NSString * _Nonnull)Delete SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHAPTER_NAME;)
+ (NSString * _Nonnull)CHAPTER_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHAPTER_ID;)
+ (NSString * _Nonnull)CHAPTER_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DELETED;)
+ (NSString * _Nonnull)DELETED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STARTWORD_INDEX;)
+ (NSString * _Nonnull)STARTWORD_INDEX SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ENDWORD_INDEX;)
+ (NSString * _Nonnull)ENDWORD_INDEX SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ISIMPORTANT;)
+ (NSString * _Nonnull)ISIMPORTANT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull X_POSITION;)
+ (NSString * _Nonnull)X_POSITION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Y_POSITION;)
+ (NSString * _Nonnull)Y_POSITION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TEXT;)
+ (NSString * _Nonnull)TEXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COMMENTS;)
+ (NSString * _Nonnull)COMMENTS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USER_ID;)
+ (NSString * _Nonnull)USER_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DISPLAY_NAME;)
+ (NSString * _Nonnull)DISPLAY_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DATE;)
+ (NSString * _Nonnull)DATE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LINE_COLOR;)
+ (NSString * _Nonnull)LINE_COLOR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LINE_WIDTH;)
+ (NSString * _Nonnull)LINE_WIDTH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LINE_STYLE;)
+ (NSString * _Nonnull)LINE_STYLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATH_POINTS;)
+ (NSString * _Nonnull)PATH_POINTS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LINK_ID;)
+ (NSString * _Nonnull)LINK_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull REVIEW;)
+ (NSString * _Nonnull)REVIEW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_SYNCED;)
+ (NSString * _Nonnull)IS_SYNCED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SERVER_SUBMITTED_KEY;)
+ (NSString * _Nonnull)SERVER_SUBMITTED_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PEN_TYPE;)
+ (NSString * _Nonnull)PEN_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PROTRACTOR_TOOL_DATA;)
+ (NSString * _Nonnull)PROTRACTOR_TOOL_DATA SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAGE_IDENTIFIER;)
+ (NSString * _Nonnull)PAGE_IDENTIFIER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UPDATE_BADGE_NOTIFICATION;)
+ (NSString * _Nonnull)UPDATE_BADGE_NOTIFICATION SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An Object that manage a Label for Note icon.
/// @discussion The UGCLabel class defines a label for notes(Sticky Note, Contextual Note, Multi Note).
/// @superclass SuperClass : UILabel
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK8UGCLabel")
@interface UGCLabel : UILabel
/// ugcUUID is UCG Unique ID
@property (nonatomic, copy) NSString * _Nonnull ugcUUID;
@property (nonatomic) BOOL isNote;
@property (nonatomic) BOOL isSticky;
@property (nonatomic) BOOL isMultiNote;
@property (nonatomic) BOOL isTeacherReviewNote;
@property (nonatomic) NSInteger startWordID;
@property (nonatomic) NSInteger endWorkID;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

/// UGC_STATUS is status or state of UGC, Whether it is unsaved, new, updated or deleted.
typedef SWIFT_ENUM(NSInteger, UGCStatus, open) {
  UGCStatusUnsaved = 0,
  UGCStatusNew = 1,
  UGCStatusUpdate = 2,
  UGCStatusDelete = 3,
};




@interface UIButton (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)setTitleForNormalState:(NSString * _Nonnull)title;
- (void)setTitleForAllState:(NSString * _Nonnull)title;
- (void)setTitleForSelectedState:(NSString * _Nonnull)title;
- (void)setTitleColorForNormalState:(UIColor * _Nonnull)color;
- (void)setTitleColorForSelectedState:(UIColor * _Nonnull)color;
- (void)setTitleColorForDisableState:(UIColor * _Nonnull)color;
- (void)setImageForNormalState:(UIImage * _Nonnull)image;
- (void)setImageForSelectedState:(UIImage * _Nonnull)image;
- (void)setRoundedCornerWithRadius:(CGFloat)radius;
- (void)setTitleLabelRoundedCornerWithRadius:(CGFloat)radius;
@end




@interface UIColor (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSMutableDictionary * _Nullable colorNameCache;)
+ (NSMutableDictionary * _Nullable)colorNameCache SWIFT_WARN_UNUSED_RESULT;
+ (void)setColorNameCache:(NSMutableDictionary * _Nullable)value;
- (CGColorSpaceModel)colorSpaceModel SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)colorSpaceString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)canProvideRGBComponents SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nullable)arrayFromRGBAComponents SWIFT_WARN_UNUSED_RESULT;
- (BOOL)red:(CGFloat * _Nullable)red green:(CGFloat * _Nullable)green blue:(CGFloat * _Nullable)blue alpha:(CGFloat * _Nullable)alpha SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)red SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)green SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)blue SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)white SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)rgbHex SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByLuminanceMapping SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByMultiplyingByRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByAddingWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByLighteningToRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByDarkeningToRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByMultiplyingBy:(CGFloat)f SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByAdding:(CGFloat)f SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByLighteningTo:(CGFloat)f SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByDarkeningTo:(CGFloat)f SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByMultiplyingByColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByAddingWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByLighteningToColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)colorByDarkeningToColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringFromColor SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)hexStringFromColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)colorWithString:(NSString * _Nonnull)stringToConvert SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)colorFromArray:(NSArray * _Nonnull)colorInfo SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)ios7Blue SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)ios7Gray SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)randomColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)colorWithRGBHex:(uint32_t)hex SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)colorWithHexString:(NSString * _Nonnull)stringToConvert SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)colorWithName:(NSString * _Nonnull)cssColorName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull colorNameDB;)
+ (NSString * _Nonnull)colorNameDB SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)searchForColorByName:(NSString * _Nonnull)cssColorName SWIFT_WARN_UNUSED_RESULT;
@end









@interface UIImage (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
+ (NSInteger)delayCentisecondsForImageAtIndex:(CGImageSourceRef _Nonnull)source :(size_t)i SWIFT_WARN_UNUSED_RESULT;
+ (void)createImagesAndDelays:(CGImageSourceRef _Nonnull)source :(size_t)count :(CGImageRef _Nullable * _Nonnull)imagesOut :(NSInteger * _Nonnull)delayCentisecondsOut;
+ (NSInteger)sum:(size_t)count :(NSInteger const * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)pairGCD:(NSInteger)a :(NSInteger)b SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)vectorGCD:(size_t)count :(NSInteger const * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<UIImage *> * _Nonnull)frameArray:(size_t)count :(CGImageRef _Nullable const * _Nonnull)images :(NSInteger const * _Nonnull)delayCentiseconds :(NSInteger)totalDurationCentiseconds SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)animatedImageWithAnimatedGIFImageSource:(CGImageSourceRef _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)animatedImageWithAnimatedGIFReleasingImageSource:(CGImageSourceRef _Nullable)source SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)animatedImageWithAnimatedGIFData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)animatedImageWithAnimatedGIFURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end










@interface UIView (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)setAccessibilityForElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file argument:(NSString * _Nonnull)text;
- (void)setAccessibilityForElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file argument:(NSString * _Nonnull)text value:(NSString * _Nonnull)val altText:(NSString * _Nonnull)alttxt;
- (void)setAccessibilityForElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file;
- (void)setAccessibilityWithElementID:(NSString * _Nonnull)elementID WithFile:(NSString * _Nonnull)file withArgument:(NSString * _Nonnull)text withValue:(NSString * _Nonnull)desc altText:(NSString * _Nonnull)alttxt;
- (void)disableAccessibilityOnView:(UIView * _Nonnull)view;
@end


@interface UIView (SWIFT_EXTENSION(Kitaboo_Reader_SDK))
- (void)addBorderWith:(UIColor * _Nonnull)color;
- (void)addBoarderToRightWith:(UIColor * _Nonnull)color;
- (UIView * _Nonnull)addBoarderToLeftWith:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)addBottomBorderWith:(UIColor * _Nonnull)colour SWIFT_WARN_UNUSED_RESULT;
- (void)addBottomBorderWith:(UIColor * _Nonnull)colour atYPostion:(CGFloat)yPos;
- (UIView * _Nonnull)addTopBorderWith:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (void)addDottedBottomBorderWith:(UIColor * _Nonnull)colour;
- (void)addDashedLineAtBottomOfViewWith:(UIColor * _Nonnull)colour;
- (void)addVerticalDottedLineWith:(UIColor * _Nonnull)color;
- (void)addShadowToView;
@end



SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK7Utility")
@interface Utility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21VerticalThumbnailCell")
@interface VerticalThumbnailCell : UICollectionViewCell
@property (nonatomic, strong) IBOutlet UIImageView * _Null_unspecified thumbnailImage;
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified pageIndex;
@property (nonatomic, strong) UIView * _Nullable pageSuperView;
@property (nonatomic) BOOL _isSelected;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18VideoControls_V6_0")
@interface VideoControls_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable playPauseIconBackgroundColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
@property (nonatomic, copy) NSString * _Nullable playerBackground;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16VideoMarkup_V6_0")
@interface VideoMarkup_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable plyr;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An Object of VideoPlayerViewStateUpdate.
typedef SWIFT_ENUM(NSInteger, VideoPlayerViewStateUpdate, open) {
  VideoPlayerViewStateUpdateKVideoUpdatePlayPauseState = 0,
  VideoPlayerViewStateUpdateKVideoUpdateReadingSpeed = 1,
  VideoPlayerViewStateUpdateKVideoUpdateCurrentTime = 2,
};

/// An Object of VideoPlayerViewStateUpdate_V6.
typedef SWIFT_ENUM(NSInteger, VideoPlayerViewStateUpdate_V6, open) {
  VideoPlayerViewStateUpdate_V6KVideoUpdatePlayPauseState = 0,
  VideoPlayerViewStateUpdate_V6KVideoUpdateReadingSpeed = 1,
  VideoPlayerViewStateUpdate_V6KVideoUpdateCurrentTime = 2,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK16VideoPlayer_V6_0")
@interface VideoPlayer_V6_0 : NSObject
@property (nonatomic, strong) VideoControls_V6_0 * _Nullable videoControls;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WatermarkPosition : NSInteger;

/// An object that manages the content for the watermark on the screen.
/// A WatermarkHolderView object adds content within its bounds rectangle and handles any interactions with that content. Use WatermarkHolderView to add watermark, it can be a label,  image etc.
/// <ul>
///   <li>
///     SuperClass : UIView
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK19WatermarkHolderView")
@interface WatermarkHolderView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// To display WatermarkHolderView.
/// Used this method to show hidden watermark .
- (void)showWatermark;
/// To hide WatermarkHolderView.
/// A hidden view disappears from its window. It remains in its superview’s list of subviews.
- (void)hideWatermark;
/// To set WaterMark Position.
/// Use this method to set <em>waterMark Position</em>. Default Position of waterMark is bottomLeft.
/// \param position WaterMarkPosition.
///
- (void)setWatermarkHolderViewPosition:(enum WatermarkPosition)position;
/// To get WaterMark Position.
/// Use this method to get <em>waterMark Position</em>.
///
/// returns:
/// WatermarkPosition .
- (enum WatermarkPosition)getWatermarkHolderViewPosition SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// WatermarkPosition is used to set position to WatermarkHolderView.
typedef SWIFT_ENUM(NSInteger, WatermarkPosition, open) {
/// Top Left Position of Page
  WatermarkPositionTopLeft = 0,
/// Top center Position of Page
  WatermarkPositionTopCenter = 1,
/// Top Right Position of Page
  WatermarkPositionTopRight = 2,
/// Bottom Left Position of Page
  WatermarkPositionBottomLeft = 3,
/// Bottom Center Position of Page
  WatermarkPositionBottomCenter = 4,
/// Bottom Right Position of Page
  WatermarkPositionBottomRight = 5,
};


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK32WelcomeAudioVideoBookPlayer_V6_0")
@interface WelcomeAudioVideoBookPlayer_V6_0 : NSObject
@property (nonatomic, strong) Toppanel_V6_0 * _Nullable toppanel;
@property (nonatomic, strong) Sidepanel_V6_0 * _Nullable sidepanel;
@property (nonatomic, strong) AudioBookCover_V6_0 * _Nullable audioBookCover;
@property (nonatomic, strong) AudioVideoSlider_V6_0 * _Nullable audioVideoSlider;
@property (nonatomic, strong) AllPopups_V6_0 * _Nullable allPopups;
@property (nonatomic, strong) Toastmessage_V6_0 * _Nullable toastmessage;
@property (nonatomic, strong) VideoPlayer_V6_0 * _Nullable videoPlayer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21WelcomeBookshelf_V6_0")
@interface WelcomeBookshelf_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable header;
@property (nonatomic, copy) NSString * _Nullable searchOutline;
@property (nonatomic, copy) NSString * _Nullable searchText;
@property (nonatomic, copy) NSString * _Nullable icons;
@property (nonatomic, copy) NSString * _Nullable Header_icons;
@property (nonatomic, copy) NSString * _Nullable horizontalDivider;
@property (nonatomic, copy) NSString * _Nullable background;
@property (nonatomic, copy) NSString * _Nullable titleText;
@property (nonatomic, copy) NSString * _Nullable contentTitle;
@property (nonatomic, copy) NSString * _Nullable viewAllText;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable progressBar;
@property (nonatomic, copy) NSString * _Nullable progressBackground;
@property (nonatomic, copy) NSString * _Nullable cardProgressbarFillBgcolor;
@property (nonatomic, copy) NSString * _Nullable cardProgressbarFillBuffercolor;
@property (nonatomic, strong) BookshelfSortby_V6_0 * _Nullable bookshelfSortby;
@property (nonatomic, strong) BookshelfInfoPopup_V6_0 * _Nullable bookshelfInfoPopup;
@property (nonatomic, strong) BottomBar_V6_0 * _Nullable bottomBar;
@property (nonatomic, strong) CategoryLeftPanel_V6_0 * _Nullable categoryLeftPanel;
@property (nonatomic, strong) CategoryRightShelf_V6_0 * _Nullable categoryRightShelf;
@property (nonatomic, strong) RecentShelf_V6_0 * _Nullable recentShelf;
@property (nonatomic, strong) Popup_V6_0 * _Nullable popup;
@property (nonatomic, strong) AboutThis_V6_0 * _Nullable aboutThis;
@property (nonatomic, strong) BookshelfProfile_V6_0 * _Nullable profile;
@property (nonatomic, strong) BookshelfSearch_V6_V6_0 * _Nullable search;
@property (nonatomic, strong) AboutUs_V6_0 * _Nullable aboutUs;
@property (nonatomic, strong) Analytics_V6_V6_0 * _Nullable analytics;
@property (nonatomic, strong) Footer_V6_0 * _Nullable footer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Zoom_V6_0;

SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK18WelcomeReader_V6_0")
@interface WelcomeReader_V6_0 : NSObject
@property (nonatomic, strong) Main_V6_0 * _Nullable main;
@property (nonatomic, strong) Tableofcontents_V6_0 * _Nullable tableofcontents;
@property (nonatomic, strong) MyData_V6_0 * _Nullable myData;
@property (nonatomic, strong) Bookmark_V6_0 * _Nullable bookmark;
@property (nonatomic, strong) ReaderSearch_V6_0 * _Nullable search;
@property (nonatomic, strong) Pentool_V6_0 * _Nullable pentool;
@property (nonatomic, strong) ThumbnailSlider_V6_0 * _Nullable thumbnailSlider;
@property (nonatomic, strong) AudioBar_V6_0 * _Nullable audioBar;
@property (nonatomic, strong) Note_V6_0 * _Nullable note;
@property (nonatomic, strong) Share_V6_0 * _Nullable share;
@property (nonatomic, strong) Comments_V6_0 * _Nullable comments;
@property (nonatomic, strong) Zoom_V6_0 * _Nullable zoom;
@property (nonatomic, strong) FontSettings_V6_0 * _Nullable fontSettings;
@property (nonatomic, strong) TeacherSettings_V6_0 * _Nullable teacherSettings;
@property (nonatomic, strong) TeacherStudentlist_V6_0 * _Nullable teacherStudentlist;
@property (nonatomic, strong) Highlight_V6_V6_0 * _Nullable highlight;
@property (nonatomic, strong) HighlightOnScreen_V6_0 * _Nullable highlightOnScreen;
@property (nonatomic, strong) ReaderProfile_V6_0 * _Nullable profile;
@property (nonatomic, strong) ReflowableReader_V6_0 * _Nullable reflowableReader;
@property (nonatomic, strong) TextAnnotation_V6_0 * _Nullable textAnnotation;
@property (nonatomic, strong) Markup_V6_0 * _Nullable markup;
@property (nonatomic, strong) MarkupGlossary_V6_0 * _Nullable markupGlossary;
@property (nonatomic, strong) ImageMarkup_V6_0 * _Nullable imageMarkup;
@property (nonatomic, strong) SlideshowMarkup_V6_0 * _Nullable slideshowMarkup;
@property (nonatomic, strong) AudioMarkup_V6_0 * _Nullable audioMarkup;
@property (nonatomic, strong) Help_V6_0 * _Nullable help;
@property (nonatomic, strong) VideoMarkup_V6_0 * _Nullable videoMarkup;
@property (nonatomic, strong) ShareFeedback_V6_0 * _Nullable shareFeedback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK21XMLToDictionaryParser")
@interface XMLToDictionaryParser : NSObject <NSXMLParserDelegate>
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18Kitaboo_Reader_SDK9Zoom_V6_0")
@interface Zoom_V6_0 : NSObject
@property (nonatomic, copy) NSString * _Nullable popupBackground;
@property (nonatomic, copy) NSString * _Nullable sliderColor;
@property (nonatomic, copy) NSString * _Nullable sliderFilledColor;
@property (nonatomic, copy) NSString * _Nullable iconColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
